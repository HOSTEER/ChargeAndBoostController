
ChargeAndBoostController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004a84  08004a84  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a84  08004a84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b0  20000010  08004a9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018c0  08004a9c  000218c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001527f  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370a  00000000  00000000  000352fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00038a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  00039ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a002  00000000  00000000  0003aee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019961  00000000  00000000  00054eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000996fa  00000000  00000000  0006e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005598  00000000  00000000  00107f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080049d8 	.word	0x080049d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080049d8 	.word	0x080049d8

08000150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f000 fd05 	bl	8000b9c <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f000 fac8 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fdcd 	bl	8000d4c <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f000 fab8 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a14      	ldr	r2, [pc, #80]	; (8000238 <HAL_ADC_MspInit+0x6c>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d121      	bne.n	8000230 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <HAL_ADC_MspInit+0x70>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin|USB_SENSE_Pin;
 800021c:	2303      	movs	r3, #3
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <HAL_ADC_MspInit+0x74>)
 800022c:	f000 ffa8 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40012400 	.word	0x40012400
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000060 	.word	0x20000060
 8000270:	200000b4 	.word	0x200000b4

08000274 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <MX_FREERTOS_Init+0x30>)
 800027c:	1d3c      	adds	r4, r7, #4
 800027e:	461d      	mov	r5, r3
 8000280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f003 f9b7 	bl	8003604 <osThreadCreate>
 8000296:	4603      	mov	r3, r0
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <MX_FREERTOS_Init+0x34>)
 800029a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bdb0      	pop	{r4, r5, r7, pc}
 80002a4:	080049fc 	.word	0x080049fc
 80002a8:	2000005c 	.word	0x2000005c

080002ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f003 f9f1 	bl	800369c <osDelay>
 80002ba:	e7fb      	b.n	80002b4 <StartDefaultTask+0x8>

080002bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b47      	ldr	r3, [pc, #284]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b41      	ldr	r3, [pc, #260]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b3e      	ldr	r3, [pc, #248]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b3b      	ldr	r3, [pc, #236]	; (80003f0 <MX_GPIO_Init+0x134>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a3a      	ldr	r2, [pc, #232]	; (80003f0 <MX_GPIO_Init+0x134>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b38      	ldr	r3, [pc, #224]	; (80003f0 <MX_GPIO_Init+0x134>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2107      	movs	r1, #7
 800031c:	4835      	ldr	r0, [pc, #212]	; (80003f4 <MX_GPIO_Init+0x138>)
 800031e:	f001 f8b3 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD0_Pin|CHARG_EN_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8000328:	4833      	ldr	r0, [pc, #204]	; (80003f8 <MX_GPIO_Init+0x13c>)
 800032a:	f001 f8ad 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12V_Pin|VOUT_EN_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000334:	4830      	ldr	r0, [pc, #192]	; (80003f8 <MX_GPIO_Init+0x13c>)
 8000336:	f001 f8a7 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800033a:	2380      	movs	r3, #128	; 0x80
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033e:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <MX_GPIO_Init+0x140>)
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	482a      	ldr	r0, [pc, #168]	; (80003f8 <MX_GPIO_Init+0x13c>)
 800034e:	f000 ff17 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD2_Pin;
 8000352:	2307      	movs	r3, #7
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4822      	ldr	r0, [pc, #136]	; (80003f4 <MX_GPIO_Init+0x138>)
 800036a:	f000 ff09 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD0_Pin|EN12V_Pin|VOUT_EN_Pin
 800036e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000372:	613b      	str	r3, [r7, #16]
                          |CHARG_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_GPIO_Init+0x13c>)
 8000388:	f000 fefa 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARG_ON_Pin;
 800038c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARG_ON_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4815      	ldr	r0, [pc, #84]	; (80003f8 <MX_GPIO_Init+0x13c>)
 80003a2:	f000 feed 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARG_OFF_Pin;
 80003a6:	2308      	movs	r3, #8
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARG_OFF_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480e      	ldr	r0, [pc, #56]	; (80003f4 <MX_GPIO_Init+0x138>)
 80003ba:	f000 fee1 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 80003be:	2320      	movs	r3, #32
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_GPIO_Init+0x140>)
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4808      	ldr	r0, [pc, #32]	; (80003f4 <MX_GPIO_Init+0x138>)
 80003d2:	f000 fed5 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2105      	movs	r1, #5
 80003da:	2017      	movs	r0, #23
 80003dc:	f000 fea5 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003e0:	2017      	movs	r0, #23
 80003e2:	f000 febe 	bl	8001162 <HAL_NVIC_EnableIRQ>

}
 80003e6:	bf00      	nop
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	40010800 	.word	0x40010800
 80003fc:	10110000 	.word	0x10110000

08000400 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_I2C1_Init+0x50>)
 8000406:	4a13      	ldr	r2, [pc, #76]	; (8000454 <MX_I2C1_Init+0x54>)
 8000408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_I2C1_Init+0x50>)
 800040c:	4a12      	ldr	r2, [pc, #72]	; (8000458 <MX_I2C1_Init+0x58>)
 800040e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_I2C1_Init+0x50>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_I2C1_Init+0x50>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_I2C1_Init+0x50>)
 800041e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_I2C1_Init+0x50>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_I2C1_Init+0x50>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <MX_I2C1_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_I2C1_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_I2C1_Init+0x50>)
 800043e:	f001 f86d 	bl	800151c <HAL_I2C_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000448:	f000 f970 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200002b4 	.word	0x200002b4
 8000454:	40005400 	.word	0x40005400
 8000458:	00061a80 	.word	0x00061a80

0800045c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <HAL_I2C_MspInit+0x70>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d123      	bne.n	80004c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000494:	23c0      	movs	r3, #192	; 0xc0
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000498:	2312      	movs	r3, #18
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049c:	2303      	movs	r3, #3
 800049e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480b      	ldr	r0, [pc, #44]	; (80004d4 <HAL_I2C_MspInit+0x78>)
 80004a8:	f000 fe6a 	bl	8001180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b6:	61d3      	str	r3, [r2, #28]
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40005400 	.word	0x40005400
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_Pin){
		//do something
	}
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <fusb_302_task>:

void fusb_302_task(void * unused){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af04      	add	r7, sp, #16
 80004f2:	6078      	str	r0, [r7, #4]
	uint8_t FUSB302BMPX_SLV_ADDR = 0b0100010;
 80004f4:	2322      	movs	r3, #34	; 0x22
 80004f6:	73fb      	strb	r3, [r7, #15]
	uint8_t fusb_ver = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Read(&hi2c1,(uint16_t) FUSB302BMPX_SLV_ADDR<<1, 0x01, 8, &fusb_ver, 8, HAL_MAX_DELAY);
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	b299      	uxth	r1, r3
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2308      	movs	r3, #8
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	f107 030e 	add.w	r3, r7, #14
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2308      	movs	r3, #8
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <fusb_302_task+0x3c>)
 800051a:	f001 f943 	bl	80017a4 <HAL_I2C_Mem_Read>
	vTaskDelay(pdMS_TO_TICKS(5000));
 800051e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000522:	f003 fb09 	bl	8003b38 <vTaskDelay>
	for(;;){
 8000526:	e7fe      	b.n	8000526 <fusb_302_task+0x3a>
 8000528:	200002b4 	.word	0x200002b4

0800052c <leds_task>:

	}
}

void leds_task(void * unused){
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b08c      	sub	sp, #48	; 0x30
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef * GPIO_port[5]={ LD0_GPIO_Port, LD1_GPIO_Port, LD2_GPIO_Port, LD3_GPIO_Port, LD4_GPIO_Port};
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <leds_task+0x6c>)
 8000536:	f107 0418 	add.w	r4, r7, #24
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	682b      	ldr	r3, [r5, #0]
 8000542:	6023      	str	r3, [r4, #0]
	uint16_t GPIO_pins[5]={ LD0_Pin, LD1_Pin, LD2_Pin, LD3_Pin, LD4_Pin};
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <leds_task+0x70>)
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	ca07      	ldmia	r2, {r0, r1, r2}
 800054c:	c303      	stmia	r3!, {r0, r1}
 800054e:	801a      	strh	r2, [r3, #0]
	vTaskDelay(pdMS_TO_TICKS(5000));
 8000550:	f241 3088 	movw	r0, #5000	; 0x1388
 8000554:	f003 faf0 	bl	8003b38 <vTaskDelay>
	for(uint8_t led_number=1; led_number<5; led_number++){
 8000558:	2301      	movs	r3, #1
 800055a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800055e:	e016      	b.n	800058e <leds_task+0x62>
		HAL_GPIO_WritePin(GPIO_port[led_number], GPIO_pins[led_number], GPIO_PIN_RESET);
 8000560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	3330      	adds	r3, #48	; 0x30
 8000568:	443b      	add	r3, r7
 800056a:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800056e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	3330      	adds	r3, #48	; 0x30
 8000576:	443b      	add	r3, r7
 8000578:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800057c:	2200      	movs	r2, #0
 800057e:	4619      	mov	r1, r3
 8000580:	f000 ff82 	bl	8001488 <HAL_GPIO_WritePin>
	for(uint8_t led_number=1; led_number<5; led_number++){
 8000584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000588:	3301      	adds	r3, #1
 800058a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800058e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000592:	2b04      	cmp	r3, #4
 8000594:	d9e4      	bls.n	8000560 <leds_task+0x34>
	}
	for(;;){
 8000596:	e7fe      	b.n	8000596 <leds_task+0x6a>
 8000598:	08004a18 	.word	0x08004a18
 800059c:	08004a2c 	.word	0x08004a2c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fac7 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f845 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f7ff fe85 	bl	80002bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b2:	f7ff ff25 	bl	8000400 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 fa25 	bl	8000a04 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ba:	f7ff fdc9 	bl	8000150 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005be:	f000 f9a9 	bl	8000914 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <main+0x7c>)
 80005c4:	f002 fb74 	bl	8002cb0 <HAL_TIM_Base_Start_IT>
	BaseType_t ret;
	ret = xTaskCreate(leds_task, "leds_task", DEFAULT_STACK_SIZE, NULL, 1, &h_leds);
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <main+0x80>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d6:	4913      	ldr	r1, [pc, #76]	; (8000624 <main+0x84>)
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0x88>)
 80005da:	f003 f97e 	bl	80038da <xTaskCreate>
 80005de:	6078      	str	r0, [r7, #4]
	if(ret != pdPASS)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d001      	beq.n	80005ea <main+0x4a>
	{
		Error_Handler();
 80005e6:	f000 f8a1 	bl	800072c <Error_Handler>
	}
	ret = xTaskCreate(fusb_302_task, "fusb_task", DEFAULT_STACK_SIZE, NULL, 2, &h_fusb_302);
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <main+0x8c>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f8:	490d      	ldr	r1, [pc, #52]	; (8000630 <main+0x90>)
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <main+0x94>)
 80005fc:	f003 f96d 	bl	80038da <xTaskCreate>
 8000600:	6078      	str	r0, [r7, #4]
	if(ret != pdPASS)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d001      	beq.n	800060c <main+0x6c>
	{
		Error_Handler();
 8000608:	f000 f890 	bl	800072c <Error_Handler>
	}
	vTaskStartScheduler();
 800060c:	f003 fac8 	bl	8003ba0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000610:	f7ff fe30 	bl	8000274 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000614:	f002 ffef 	bl	80035f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x78>
 800061a:	bf00      	nop
 800061c:	20000358 	.word	0x20000358
 8000620:	20000308 	.word	0x20000308
 8000624:	08004a38 	.word	0x08004a38
 8000628:	0800052d 	.word	0x0800052d
 800062c:	2000030c 	.word	0x2000030c
 8000630:	08004a44 	.word	0x08004a44
 8000634:	080004ed 	.word	0x080004ed

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000642:	2228      	movs	r2, #40	; 0x28
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 f99a 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000686:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fdc5 	bl	8002220 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800069c:	f000 f846 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f831 	bl	8002724 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f830 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006cc:	2302      	movs	r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f9e3 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006e4:	f000 f822 	bl	800072c <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000700:	d102      	bne.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000702:	f000 fa2f 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
	else if (htim->Instance == TIM1){
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
	}
  /* USER CODE END Callback 1 */
}
 8000706:	e009      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim->Instance == TIM1){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d104      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000718:	f000 fece 	bl	80014b8 <HAL_GPIO_TogglePin>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40012c00 	.word	0x40012c00
 8000728:	40010800 	.word	0x40010800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_MspInit+0x68>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_MspInit+0x68>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x68>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x68>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_MspInit+0x68>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x68>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210f      	movs	r1, #15
 8000772:	f06f 0001 	mvn.w	r0, #1
 8000776:	f000 fcd8 	bl	800112a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x6c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x6c>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <HAL_InitTick+0xe8>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a33      	ldr	r2, [pc, #204]	; (8000890 <HAL_InitTick+0xe8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <HAL_InitTick+0xe8>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d6:	f107 0210 	add.w	r2, r7, #16
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f911 	bl	8002a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d103      	bne.n	80007f8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007f0:	f002 f8e2 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 80007f4:	6378      	str	r0, [r7, #52]	; 0x34
 80007f6:	e004      	b.n	8000802 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007f8:	f002 f8de 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 80007fc:	4603      	mov	r3, r0
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <HAL_InitTick+0xec>)
 8000806:	fba2 2303 	umull	r2, r3, r2, r3
 800080a:	0c9b      	lsrs	r3, r3, #18
 800080c:	3b01      	subs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <HAL_InitTick+0xf0>)
 8000812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000816:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <HAL_InitTick+0xf0>)
 800081a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000820:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <HAL_InitTick+0xf0>)
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_InitTick+0xf0>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <HAL_InitTick+0xf0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_InitTick+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000838:	4817      	ldr	r0, [pc, #92]	; (8000898 <HAL_InitTick+0xf0>)
 800083a:	f002 f9e9 	bl	8002c10 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000848:	2b00      	cmp	r3, #0
 800084a:	d11b      	bne.n	8000884 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <HAL_InitTick+0xf0>)
 800084e:	f002 fa2f 	bl	8002cb0 <HAL_TIM_Base_Start_IT>
 8000852:	4603      	mov	r3, r0
 8000854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800085c:	2b00      	cmp	r3, #0
 800085e:	d111      	bne.n	8000884 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000860:	201c      	movs	r0, #28
 8000862:	f000 fc7e 	bl	8001162 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d808      	bhi.n	800087e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	201c      	movs	r0, #28
 8000872:	f000 fc5a 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <HAL_InitTick+0xf4>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e002      	b.n	8000884 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000884:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000888:	4618      	mov	r0, r3
 800088a:	3738      	adds	r7, #56	; 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	431bde83 	.word	0x431bde83
 8000898:	20000310 	.word	0x20000310
 800089c:	20000004 	.word	0x20000004

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_N_Pin);
 80008ce:	2020      	movs	r0, #32
 80008d0:	f000 fe0c 	bl	80014ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80008d4:	2080      	movs	r0, #128	; 0x80
 80008d6:	f000 fe09 	bl	80014ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM1_UP_IRQHandler+0x10>)
 80008e6:	f002 fa35 	bl	8002d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000358 	.word	0x20000358

080008f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM2_IRQHandler+0x10>)
 80008fa:	f002 fa2b 	bl	8002d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000310 	.word	0x20000310

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000932:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <MX_TIM1_Init+0xa0>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000938:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800093c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_TIM1_Init+0x9c>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_TIM1_Init+0x9c>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000960:	f002 f956 	bl	8002c10 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800096a:	f7ff fedf 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_TIM1_Init+0x9c>)
 800097c:	f002 faf2 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000986:	f7ff fed1 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000998:	f002 fcc8 	bl	800332c <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80009a2:	f7ff fec3 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000358 	.word	0x20000358
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d113      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_TIM_Base_MspInit+0x48>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <HAL_TIM_Base_MspInit+0x48>)
 80009d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_TIM_Base_MspInit+0x48>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2105      	movs	r1, #5
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 fb9f 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009ec:	2019      	movs	r0, #25
 80009ee:	f000 fbb8 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40012c00 	.word	0x40012c00
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f002 fce6 	bl	800340c <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f7ff fe71 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200003a0 	.word	0x200003a0
 8000a54:	40004400 	.word	0x40004400

08000a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d12f      	bne.n	8000ad8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a82:	61d3      	str	r3, [r2, #28]
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000abc:	f000 fb60 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0x90>)
 8000ad4:	f000 fb54 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010800 	.word	0x40010800

08000aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff ff0c 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af2:	490c      	ldr	r1, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b08:	4c09      	ldr	r4, [pc, #36]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 ff3b 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1a:	f7ff fd41 	bl	80005a0 <main>
  bx lr
 8000b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b28:	08004a8c 	.word	0x08004a8c
  ldr r2, =_sbss
 8000b2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b30:	200018c0 	.word	0x200018c0

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x28>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 fae3 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f7ff fe2a 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff fdf0 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x20>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <HAL_IncTick+0x20>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	20000008 	.word	0x20000008
 8000b84:	200003e8 	.word	0x200003e8

08000b88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <HAL_GetTick+0x10>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	200003e8 	.word	0x200003e8

08000b9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e0be      	b.n	8000d3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff faf6 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f9ab 	bl	8000f3c <ADC_ConversionStop_Disable>
 8000be6:	4603      	mov	r3, r0
 8000be8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8099 	bne.w	8000d2a <HAL_ADC_Init+0x18e>
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8095 	bne.w	8000d2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c08:	f023 0302 	bic.w	r3, r3, #2
 8000c0c:	f043 0202 	orr.w	r2, r3, #2
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7b1b      	ldrb	r3, [r3, #12]
 8000c22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_Init+0xa2>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d102      	bne.n	8000c44 <HAL_ADC_Init+0xa8>
 8000c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c42:	e000      	b.n	8000c46 <HAL_ADC_Init+0xaa>
 8000c44:	2300      	movs	r3, #0
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7d1b      	ldrb	r3, [r3, #20]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d119      	bne.n	8000c88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7b1b      	ldrb	r3, [r3, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d109      	bne.n	8000c70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	035a      	lsls	r2, r3, #13
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	e00b      	b.n	8000c88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f043 0220 	orr.w	r2, r3, #32
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	f043 0201 	orr.w	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_ADC_Init+0x1a8>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb8:	d003      	beq.n	8000cc2 <HAL_ADC_Init+0x126>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d104      	bne.n	8000ccc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	051b      	lsls	r3, r3, #20
 8000cca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_ADC_Init+0x1ac>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d10b      	bne.n	8000d08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfa:	f023 0303 	bic.w	r3, r3, #3
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d06:	e018      	b.n	8000d3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f023 0312 	bic.w	r3, r3, #18
 8000d10:	f043 0210 	orr.w	r2, r3, #16
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	f043 0201 	orr.w	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d28:	e007      	b.n	8000d3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f043 0210 	orr.w	r2, r3, #16
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	ffe1f7fd 	.word	0xffe1f7fd
 8000d48:	ff1f0efe 	.word	0xff1f0efe

08000d4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d101      	bne.n	8000d6c <HAL_ADC_ConfigChannel+0x20>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e0dc      	b.n	8000f26 <HAL_ADC_ConfigChannel+0x1da>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d81c      	bhi.n	8000db6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3b05      	subs	r3, #5
 8000d8e:	221f      	movs	r2, #31
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4019      	ands	r1, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	3b05      	subs	r3, #5
 8000da8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
 8000db4:	e03c      	b.n	8000e30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	d81c      	bhi.n	8000df8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	3b23      	subs	r3, #35	; 0x23
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4019      	ands	r1, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	3b23      	subs	r3, #35	; 0x23
 8000dea:	fa00 f203 	lsl.w	r2, r0, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
 8000df6:	e01b      	b.n	8000e30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	3b41      	subs	r3, #65	; 0x41
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4019      	ands	r1, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	3b41      	subs	r3, #65	; 0x41
 8000e24:	fa00 f203 	lsl.w	r2, r0, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d91c      	bls.n	8000e72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68d9      	ldr	r1, [r3, #12]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	3b1e      	subs	r3, #30
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6898      	ldr	r0, [r3, #8]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	3b1e      	subs	r3, #30
 8000e64:	fa00 f203 	lsl.w	r2, r0, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	e019      	b.n	8000ea6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6919      	ldr	r1, [r3, #16]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	2207      	movs	r2, #7
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	6898      	ldr	r0, [r3, #8]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d003      	beq.n	8000eb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eb2:	2b11      	cmp	r3, #17
 8000eb4:	d132      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d125      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d126      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000edc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d11a      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_ADC_ConfigChannel+0x1ec>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9a      	lsrs	r2, r3, #18
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000efc:	e002      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x1b2>
 8000f0a:	e007      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f043 0220 	orr.w	r2, r3, #32
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40012400 	.word	0x40012400
 8000f34:	20000000 	.word	0x20000000
 8000f38:	431bde83 	.word	0x431bde83

08000f3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d12e      	bne.n	8000fb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f66:	f7ff fe0f 	bl	8000b88 <HAL_GetTick>
 8000f6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f6c:	e01b      	b.n	8000fa6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f6e:	f7ff fe0b 	bl	8000b88 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d914      	bls.n	8000fa6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10d      	bne.n	8000fa6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f043 0210 	orr.w	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e007      	b.n	8000fb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d0dc      	beq.n	8000f6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4906      	ldr	r1, [pc, #24]	; (8001058 <__NVIC_EnableIRQ+0x34>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff4f 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff64 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ffb2 	bl	80010b0 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff81 	bl	800105c <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff57 	bl	8001024 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e169      	b.n	8001468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8158 	bne.w	8001462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a9a      	ldr	r2, [pc, #616]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d05e      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011bc:	4a98      	ldr	r2, [pc, #608]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d875      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011c2:	4a98      	ldr	r2, [pc, #608]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d058      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011c8:	4a96      	ldr	r2, [pc, #600]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d86f      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011ce:	4a96      	ldr	r2, [pc, #600]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d052      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011d4:	4a94      	ldr	r2, [pc, #592]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d869      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011da:	4a94      	ldr	r2, [pc, #592]	; (800142c <HAL_GPIO_Init+0x2ac>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d04c      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011e0:	4a92      	ldr	r2, [pc, #584]	; (800142c <HAL_GPIO_Init+0x2ac>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d863      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011e6:	4a92      	ldr	r2, [pc, #584]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d046      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011ec:	4a90      	ldr	r2, [pc, #576]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d85d      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011f2:	2b12      	cmp	r3, #18
 80011f4:	d82a      	bhi.n	800124c <HAL_GPIO_Init+0xcc>
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d859      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <HAL_GPIO_Init+0x80>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	0800127b 	.word	0x0800127b
 8001204:	08001255 	.word	0x08001255
 8001208:	08001267 	.word	0x08001267
 800120c:	080012a9 	.word	0x080012a9
 8001210:	080012af 	.word	0x080012af
 8001214:	080012af 	.word	0x080012af
 8001218:	080012af 	.word	0x080012af
 800121c:	080012af 	.word	0x080012af
 8001220:	080012af 	.word	0x080012af
 8001224:	080012af 	.word	0x080012af
 8001228:	080012af 	.word	0x080012af
 800122c:	080012af 	.word	0x080012af
 8001230:	080012af 	.word	0x080012af
 8001234:	080012af 	.word	0x080012af
 8001238:	080012af 	.word	0x080012af
 800123c:	080012af 	.word	0x080012af
 8001240:	080012af 	.word	0x080012af
 8001244:	0800125d 	.word	0x0800125d
 8001248:	08001271 	.word	0x08001271
 800124c:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_GPIO_Init+0x2b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001252:	e02c      	b.n	80012ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e029      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	3304      	adds	r3, #4
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e024      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	3308      	adds	r3, #8
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e01f      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	330c      	adds	r3, #12
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e01a      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001282:	2304      	movs	r3, #4
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e013      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	611a      	str	r2, [r3, #16]
          break;
 800129a:	e009      	b.n	80012b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	615a      	str	r2, [r3, #20]
          break;
 80012a6:	e003      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          break;
 80012ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d801      	bhi.n	80012ba <HAL_GPIO_Init+0x13a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_Init+0x13e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d802      	bhi.n	80012cc <HAL_GPIO_Init+0x14c>
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x152>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	3b08      	subs	r3, #8
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	210f      	movs	r1, #15
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80b1 	beq.w	8001462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001300:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2bc>)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x1ec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <HAL_GPIO_Init+0x2c4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1e8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1e4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_GPIO_Init+0x2cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1e0>
 800135c:	2303      	movs	r3, #3
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001360:	2304      	movs	r3, #4
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001364:	2302      	movs	r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 800136c:	2300      	movs	r3, #0
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800137e:	492f      	ldr	r1, [pc, #188]	; (800143c <HAL_GPIO_Init+0x2bc>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	492c      	ldr	r1, [pc, #176]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4928      	ldr	r1, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	4922      	ldr	r1, [pc, #136]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	491e      	ldr	r1, [pc, #120]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4914      	ldr	r1, [pc, #80]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d021      	beq.n	8001454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e021      	b.n	8001462 <HAL_GPIO_Init+0x2e2>
 800141e:	bf00      	nop
 8001420:	10320000 	.word	0x10320000
 8001424:	10310000 	.word	0x10310000
 8001428:	10220000 	.word	0x10220000
 800142c:	10210000 	.word	0x10210000
 8001430:	10120000 	.word	0x10120000
 8001434:	10110000 	.word	0x10110000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000
 800144c:	40011400 	.word	0x40011400
 8001450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43db      	mvns	r3, r3
 800145c:	4909      	ldr	r1, [pc, #36]	; (8001484 <HAL_GPIO_Init+0x304>)
 800145e:	4013      	ands	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f ae8e 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	372c      	adds	r7, #44	; 0x2c
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	611a      	str	r2, [r3, #16]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43d9      	mvns	r1, r3
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	400b      	ands	r3, r1
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	611a      	str	r2, [r3, #16]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffe4 	bl	80004d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e12b      	b.n	8001786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7fe ff8a 	bl	800045c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800156e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800157e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001580:	f001 fa1a 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8001584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a81      	ldr	r2, [pc, #516]	; (8001790 <HAL_I2C_Init+0x274>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d807      	bhi.n	80015a0 <HAL_I2C_Init+0x84>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4a80      	ldr	r2, [pc, #512]	; (8001794 <HAL_I2C_Init+0x278>)
 8001594:	4293      	cmp	r3, r2
 8001596:	bf94      	ite	ls
 8001598:	2301      	movls	r3, #1
 800159a:	2300      	movhi	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e006      	b.n	80015ae <HAL_I2C_Init+0x92>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4a7d      	ldr	r2, [pc, #500]	; (8001798 <HAL_I2C_Init+0x27c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	bf94      	ite	ls
 80015a8:	2301      	movls	r3, #1
 80015aa:	2300      	movhi	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0e7      	b.n	8001786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4a78      	ldr	r2, [pc, #480]	; (800179c <HAL_I2C_Init+0x280>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_I2C_Init+0x274>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d802      	bhi.n	80015f0 <HAL_I2C_Init+0xd4>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	e009      	b.n	8001604 <HAL_I2C_Init+0xe8>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	4a69      	ldr	r2, [pc, #420]	; (80017a0 <HAL_I2C_Init+0x284>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	3301      	adds	r3, #1
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	430b      	orrs	r3, r1
 800160a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	495c      	ldr	r1, [pc, #368]	; (8001790 <HAL_I2C_Init+0x274>)
 8001620:	428b      	cmp	r3, r1
 8001622:	d819      	bhi.n	8001658 <HAL_I2C_Init+0x13c>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1e59      	subs	r1, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001632:	1c59      	adds	r1, r3, #1
 8001634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001638:	400b      	ands	r3, r1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00a      	beq.n	8001654 <HAL_I2C_Init+0x138>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1e59      	subs	r1, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fbb1 f3f3 	udiv	r3, r1, r3
 800164c:	3301      	adds	r3, #1
 800164e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001652:	e051      	b.n	80016f8 <HAL_I2C_Init+0x1dc>
 8001654:	2304      	movs	r3, #4
 8001656:	e04f      	b.n	80016f8 <HAL_I2C_Init+0x1dc>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <HAL_I2C_Init+0x168>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	440b      	add	r3, r1
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	e012      	b.n	80016aa <HAL_I2C_Init+0x18e>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1e58      	subs	r0, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	0099      	lsls	r1, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Init+0x196>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e022      	b.n	80016f8 <HAL_I2C_Init+0x1dc>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10e      	bne.n	80016d8 <HAL_I2C_Init+0x1bc>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1e58      	subs	r0, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	440b      	add	r3, r1
 80016c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d6:	e00f      	b.n	80016f8 <HAL_I2C_Init+0x1dc>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	0099      	lsls	r1, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	6809      	ldr	r1, [r1, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6911      	ldr	r1, [r2, #16]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68d2      	ldr	r2, [r2, #12]
 8001732:	4311      	orrs	r1, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	430b      	orrs	r3, r1
 800173a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	000186a0 	.word	0x000186a0
 8001794:	001e847f 	.word	0x001e847f
 8001798:	003d08ff 	.word	0x003d08ff
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	10624dd3 	.word	0x10624dd3

080017a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	817b      	strh	r3, [r7, #10]
 80017b6:	460b      	mov	r3, r1
 80017b8:	813b      	strh	r3, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017c2:	f7ff f9e1 	bl	8000b88 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	f040 8244 	bne.w	8001c5e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2319      	movs	r3, #25
 80017dc:	2201      	movs	r2, #1
 80017de:	4982      	ldr	r1, [pc, #520]	; (80019e8 <HAL_I2C_Mem_Read+0x244>)
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fb2f 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
 80017ee:	e237      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Mem_Read+0x5a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e230      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d007      	beq.n	8001824 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2222      	movs	r2, #34	; 0x22
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2240      	movs	r2, #64	; 0x40
 8001840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4a62      	ldr	r2, [pc, #392]	; (80019ec <HAL_I2C_Mem_Read+0x248>)
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001866:	88f8      	ldrh	r0, [r7, #6]
 8001868:	893a      	ldrh	r2, [r7, #8]
 800186a:	8979      	ldrh	r1, [r7, #10]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4603      	mov	r3, r0
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f9fc 	bl	8001c74 <I2C_RequestMemoryRead>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1ec      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d113      	bne.n	80018b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e1c0      	b.n	8001c38 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d11e      	bne.n	80018fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018ce:	b672      	cpsid	i
}
 80018d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018f8:	b662      	cpsie	i
}
 80018fa:	e035      	b.n	8001968 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	2b02      	cmp	r3, #2
 8001902:	d11e      	bne.n	8001942 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001912:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800193c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800193e:	b662      	cpsie	i
}
 8001940:	e012      	b.n	8001968 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001950:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001968:	e166      	b.n	8001c38 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	2b03      	cmp	r3, #3
 8001970:	f200 811f 	bhi.w	8001bb2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	2b01      	cmp	r3, #1
 800197a:	d123      	bne.n	80019c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fbc1 	bl	8002108 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e167      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019c2:	e139      	b.n	8001c38 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d152      	bne.n	8001a72 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d2:	2200      	movs	r2, #0
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <HAL_I2C_Mem_Read+0x24c>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fa34 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e13c      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
 80019e6:	bf00      	nop
 80019e8:	00100002 	.word	0x00100002
 80019ec:	ffff0000 	.word	0xffff0000
 80019f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a3a:	b662      	cpsie	i
}
 8001a3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a70:	e0e2      	b.n	8001c38 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	2200      	movs	r2, #0
 8001a7a:	497b      	ldr	r1, [pc, #492]	; (8001c68 <HAL_I2C_Mem_Read+0x4c4>)
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f9e1 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0e9      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ad2:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <HAL_I2C_Mem_Read+0x4c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_I2C_Mem_Read+0x4cc>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0a1a      	lsrs	r2, r3, #8
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00da      	lsls	r2, r3, #3
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d118      	bne.n	8001b2a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f043 0220 	orr.w	r2, r3, #32
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001b1a:	b662      	cpsie	i
}
 8001b1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e09a      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d1d9      	bne.n	8001aec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b7a:	b662      	cpsie	i
}
 8001b7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bb0:	e042      	b.n	8001c38 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 faa6 	bl	8002108 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e04c      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d118      	bne.n	8001c38 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f47f ae94 	bne.w	800196a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	00010004 	.word	0x00010004
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	14f8b589 	.word	0x14f8b589

08001c74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	460b      	mov	r3, r1
 8001c88:	813b      	strh	r3, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f8c2 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	d103      	bne.n	8001cde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0aa      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	4952      	ldr	r1, [pc, #328]	; (8001e40 <I2C_RequestMemoryRead+0x1cc>)
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f91d 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e097      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	6a39      	ldr	r1, [r7, #32]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f9a8 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d107      	bne.n	8001d46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e076      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d50:	893b      	ldrh	r3, [r7, #8]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	e021      	b.n	8001da0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d5c:	893b      	ldrh	r3, [r7, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	6a39      	ldr	r1, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f982 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d107      	bne.n	8001d92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e050      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d96:	893b      	ldrh	r3, [r7, #8]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da2:	6a39      	ldr	r1, [r7, #32]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f967 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00d      	beq.n	8001dcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d107      	bne.n	8001dc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e035      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f82b 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e02:	d103      	bne.n	8001e0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e013      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e10:	897b      	ldrh	r3, [r7, #10]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	6a3a      	ldr	r2, [r7, #32]
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <I2C_RequestMemoryRead+0x1cc>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f886 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	00010002 	.word	0x00010002

08001e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e54:	e048      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d044      	beq.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5e:	f7fe fe93 	bl	8000b88 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d302      	bcc.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d139      	bne.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10d      	bne.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	e00c      	b.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d116      	bne.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e023      	b.n	8001f30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10d      	bne.n	8001f0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	e00c      	b.n	8001f28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d093      	beq.n	8001e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f46:	e071      	b.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f56:	d123      	bne.n	8001fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e067      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d041      	beq.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fdee 	bl	8000b88 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d302      	bcc.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d136      	bne.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10c      	bne.n	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	e00b      	b.n	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4013      	ands	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e021      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10c      	bne.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	43da      	mvns	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	e00b      	b.n	8002068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f af6d 	bne.w	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002084:	e034      	b.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f89b 	bl	80021c2 <I2C_IsAcknowledgeFailed>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e034      	b.n	8002100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d028      	beq.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7fe fd73 	bl	8000b88 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d11d      	bne.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d016      	beq.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e007      	b.n	8002100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d1c3      	bne.n	8002086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002114:	e049      	b.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b10      	cmp	r3, #16
 8002122:	d119      	bne.n	8002158 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e030      	b.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002158:	f7fe fd16 	bl	8000b88 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d302      	bcc.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d11d      	bne.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d016      	beq.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f043 0220 	orr.w	r2, r3, #32
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e007      	b.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d1ae      	bne.n	8002116 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d8:	d11b      	bne.n	8002212 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e272      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002240:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b04      	cmp	r3, #4
 800224a:	d00c      	beq.n	8002266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800224c:	4b8f      	ldr	r3, [pc, #572]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d112      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
 8002258:	4b8c      	ldr	r3, [pc, #560]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d06c      	beq.n	800234c <HAL_RCC_OscConfig+0x12c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d168      	bne.n	800234c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e24c      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x76>
 8002288:	4b80      	ldr	r3, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a7f      	ldr	r2, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7a      	ldr	r2, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a77      	ldr	r2, [pc, #476]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0xbc>
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a71      	ldr	r2, [pc, #452]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022dc:	4b6b      	ldr	r3, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc44 	bl	8000b88 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fc40 	bl	8000b88 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e200      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xe4>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fc30 	bl	8000b88 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7fe fc2c 	bl	8000b88 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1ec      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x10c>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x18c>
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x176>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1c0      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4939      	ldr	r1, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7fe fbe5 	bl	8000b88 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c2:	f7fe fbe1 	bl	8000b88 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1a1      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4927      	ldr	r1, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fbc4 	bl	8000b88 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7fe fbc0 	bl	8000b88 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e180      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03a      	beq.n	80024a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d019      	beq.n	800246a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243c:	f7fe fba4 	bl	8000b88 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7fe fba0 	bl	8000b88 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e160      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002462:	2001      	movs	r0, #1
 8002464:	f000 fb00 	bl	8002a68 <RCC_Delay>
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7fe fb8a 	bl	8000b88 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002476:	e00f      	b.n	8002498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fb86 	bl	8000b88 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d908      	bls.n	8002498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e146      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	42420000 	.word	0x42420000
 8002494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	4b92      	ldr	r3, [pc, #584]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e9      	bne.n	8002478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a6 	beq.w	80025fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b6:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a87      	ldr	r2, [pc, #540]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]
 80024ce:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <HAL_RCC_OscConfig+0x4c8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fb47 	bl	8000b88 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7fe fb43 	bl	8000b88 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e103      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_RCC_OscConfig+0x4c8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x312>
 8002524:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	e02d      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x334>
 800253a:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a69      	ldr	r2, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a66      	ldr	r2, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	e01c      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0x356>
 800255c:	4b61      	ldr	r3, [pc, #388]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	4b5e      	ldr	r3, [pc, #376]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a5d      	ldr	r2, [pc, #372]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d015      	beq.n	80025c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe faf7 	bl	8000b88 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe faf3 	bl	8000b88 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0b1      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ee      	beq.n	800259e <HAL_RCC_OscConfig+0x37e>
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fae1 	bl	8000b88 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fadd 	bl	8000b88 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e09b      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8087 	beq.w	8002716 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d061      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d146      	bne.n	80026aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261c:	4b33      	ldr	r3, [pc, #204]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fab1 	bl	8000b88 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe faad 	bl	8000b88 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e06d      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4921      	ldr	r1, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002664:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a19      	ldr	r1, [r3, #32]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	430b      	orrs	r3, r1
 8002676:	491b      	ldr	r1, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fa81 	bl	8000b88 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fa7d 	bl	8000b88 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e03d      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x46a>
 80026a8:	e035      	b.n	8002716 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fa6a 	bl	8000b88 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fa66 	bl	8000b88 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e026      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x498>
 80026d6:	e01e      	b.n	8002716 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e019      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40007000 	.word	0x40007000
 80026ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x500>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	429a      	cmp	r2, r3
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0d0      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d910      	bls.n	8002768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4965      	ldr	r1, [pc, #404]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d040      	beq.n	8002844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d115      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e073      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06b      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4936      	ldr	r1, [pc, #216]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002814:	f7fe f9b8 	bl	8000b88 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe f9b4 	bl	8000b88 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e053      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d210      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0207 	bic.w	r2, r3, #7
 800285a:	4922      	ldr	r1, [pc, #136]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1cc>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd ff68 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08004a58 	.word	0x08004a58
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_GetSysClockFreq+0x94>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d002      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x30>
 8002922:	2b08      	cmp	r3, #8
 8002924:	d003      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x36>
 8002926:	e027      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_GetSysClockFreq+0x98>)
 800292a:	613b      	str	r3, [r7, #16]
      break;
 800292c:	e027      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0c9b      	lsrs	r3, r3, #18
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d010      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_GetSysClockFreq+0x94>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0c5b      	lsrs	r3, r3, #17
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_RCC_GetSysClockFreq+0x98>)
 800295a:	fb03 f202 	mul.w	r2, r3, r2
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e004      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_RCC_GetSysClockFreq+0xa4>)
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	613b      	str	r3, [r7, #16]
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800297a:	613b      	str	r3, [r7, #16]
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	693b      	ldr	r3, [r7, #16]
}
 8002980:	4618      	mov	r0, r3
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	00f42400 	.word	0x00f42400
 8002994:	08004a70 	.word	0x08004a70
 8002998:	08004a80 	.word	0x08004a80
 800299c:	003d0900 	.word	0x003d0900
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000000 	.word	0x20000000

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff2 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08004a68 	.word	0x08004a68

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff ffde 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0adb      	lsrs	r3, r3, #11
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08004a68 	.word	0x08004a68

08002a08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	220f      	movs	r2, #15
 8002a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_GetClockConfig+0x58>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCC_GetClockConfig+0x58>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_GetClockConfig+0x58>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_GetClockConfig+0x58>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0207 	and.w	r2, r3, #7
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40022000 	.word	0x40022000

08002a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <RCC_Delay+0x34>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <RCC_Delay+0x38>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a5b      	lsrs	r3, r3, #9
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a84:	bf00      	nop
  }
  while (Delay --);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f9      	bne.n	8002a84 <RCC_Delay+0x1c>
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d07d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10d      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a4b      	ldr	r2, [pc, #300]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d118      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a42      	ldr	r2, [pc, #264]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b04:	f7fe f840 	bl	8000b88 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fe f83c 	bl	8000b88 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e06d      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02e      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d027      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b58:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5e:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f80b 	bl	8000b88 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f807 	bl	8000b88 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e036      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4917      	ldr	r1, [pc, #92]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	490b      	ldr	r1, [pc, #44]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4904      	ldr	r1, [pc, #16]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	42420440 	.word	0x42420440

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e041      	b.n	8002ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd febe 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 fa74 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e03a      	b.n	8002d3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_Base_Start_IT+0x98>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d010      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	e007      	b.n	8002d3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0202 	mvn.w	r2, #2
 8002d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9b4 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9a7 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9b6 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0204 	mvn.w	r2, #4
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f98a 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f97d 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f98c 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0208 	mvn.w	r2, #8
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f960 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f953 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f962 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0210 	mvn.w	r2, #16
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2208      	movs	r2, #8
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f936 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f929 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f938 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0201 	mvn.w	r2, #1
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fc0c 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa7b 	bl	80033fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d107      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8fc 	bl	8003128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d10e      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d107      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0220 	mvn.w	r2, #32
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa46 	bl	80033e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x1c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0b4      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x186>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb8:	d03e      	beq.n	8003038 <HAL_TIM_ConfigClockSource+0xd4>
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fbe:	f200 8087 	bhi.w	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	f000 8086 	beq.w	80030d6 <HAL_TIM_ConfigClockSource+0x172>
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fce:	d87f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b70      	cmp	r3, #112	; 0x70
 8002fd2:	d01a      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xa6>
 8002fd4:	2b70      	cmp	r3, #112	; 0x70
 8002fd6:	d87b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b60      	cmp	r3, #96	; 0x60
 8002fda:	d050      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x11a>
 8002fdc:	2b60      	cmp	r3, #96	; 0x60
 8002fde:	d877      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b50      	cmp	r3, #80	; 0x50
 8002fe2:	d03c      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xfa>
 8002fe4:	2b50      	cmp	r3, #80	; 0x50
 8002fe6:	d873      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d058      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x13a>
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d86f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b30      	cmp	r3, #48	; 0x30
 8002ff2:	d064      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b30      	cmp	r3, #48	; 0x30
 8002ff6:	d86b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d060      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d867      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d05a      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	e062      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301a:	f000 f968 	bl	80032ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800302c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
      break;
 8003036:	e04f      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003048:	f000 f951 	bl	80032ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800305a:	609a      	str	r2, [r3, #8]
      break;
 800305c:	e03c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	461a      	mov	r2, r3
 800306c:	f000 f8c8 	bl	8003200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2150      	movs	r1, #80	; 0x50
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f91f 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 800307c:	e02c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308a:	461a      	mov	r2, r3
 800308c:	f000 f8e6 	bl	800325c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2160      	movs	r1, #96	; 0x60
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f90f 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 800309c:	e01c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 f8a8 	bl	8003200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2140      	movs	r1, #64	; 0x40
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f8ff 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 80030bc:	e00c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 f8f6 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 80030ce:	e003      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <TIM_Base_SetConfig+0xb8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_Base_SetConfig+0xbc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <TIM_Base_SetConfig+0xb8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00b      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d007      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <TIM_Base_SetConfig+0xbc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d108      	bne.n	80031b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <TIM_Base_SetConfig+0xb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800

08003200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 0201 	bic.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800322a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 030a 	bic.w	r3, r3, #10
 800323c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0210 	bic.w	r2, r3, #16
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	031b      	lsls	r3, r3, #12
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	621a      	str	r2, [r3, #32]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f043 0307 	orr.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b087      	sub	sp, #28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003308:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	021a      	lsls	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	431a      	orrs	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4313      	orrs	r3, r2
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	609a      	str	r2, [r3, #8]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003340:	2302      	movs	r3, #2
 8003342:	e046      	b.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d009      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10c      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800

080033e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e042      	b.n	80034a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fb10 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f82b 	bl	80034ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034e6:	f023 030c 	bic.w	r3, r3, #12
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <UART_SetConfig+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7ff fa64 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	e002      	b.n	8003522 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff fa4c 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8003520:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <UART_SetConfig+0x118>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	0119      	lsls	r1, r3, #4
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fbb2 f2f3 	udiv	r2, r2, r3
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <UART_SetConfig+0x118>)
 800355a:	fba3 0302 	umull	r0, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2064      	movs	r0, #100	; 0x64
 8003562:	fb00 f303 	mul.w	r3, r0, r3
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	3332      	adds	r3, #50	; 0x32
 800356c:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <UART_SetConfig+0x118>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003578:	4419      	add	r1, r3
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009a      	lsls	r2, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <UART_SetConfig+0x118>)
 8003592:	fba3 0302 	umull	r0, r3, r3, r2
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2064      	movs	r0, #100	; 0x64
 800359a:	fb00 f303 	mul.w	r3, r0, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	3332      	adds	r3, #50	; 0x32
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <UART_SetConfig+0x118>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	f003 020f 	and.w	r2, r3, #15
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	440a      	add	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40013800 	.word	0x40013800
 80035c4:	51eb851f 	.word	0x51eb851f

080035c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035da:	2b84      	cmp	r3, #132	; 0x84
 80035dc:	d005      	beq.n	80035ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	3303      	adds	r3, #3
 80035e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035fa:	f000 fad1 	bl	8003ba0 <vTaskStartScheduler>
  
  return osOK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}

08003604 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af04      	add	r7, sp, #16
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d020      	beq.n	8003658 <osThreadCreate+0x54>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01c      	beq.n	8003658 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685c      	ldr	r4, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691e      	ldr	r6, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ffc9 	bl	80035c8 <makeFreeRtosPriority>
 8003636:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003640:	9202      	str	r2, [sp, #8]
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	9100      	str	r1, [sp, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	4632      	mov	r2, r6
 800364a:	4629      	mov	r1, r5
 800364c:	4620      	mov	r0, r4
 800364e:	f000 f8e8 	bl	8003822 <xTaskCreateStatic>
 8003652:	4603      	mov	r3, r0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e01c      	b.n	8003692 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685c      	ldr	r4, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003664:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ffab 	bl	80035c8 <makeFreeRtosPriority>
 8003672:	4602      	mov	r2, r0
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	9200      	str	r2, [sp, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4632      	mov	r2, r6
 8003680:	4629      	mov	r1, r5
 8003682:	4620      	mov	r0, r4
 8003684:	f000 f929 	bl	80038da <xTaskCreate>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800369c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <osDelay+0x16>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	e000      	b.n	80036b4 <osDelay+0x18>
 80036b2:	2301      	movs	r3, #1
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fa3f 	bl	8003b38 <vTaskDelay>
  
  return osOK;
 80036ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f103 0208 	add.w	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f103 0208 	add.w	r2, r3, #8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d103      	bne.n	8003780 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e00c      	b.n	800379a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3308      	adds	r3, #8
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e002      	b.n	800378e <vListInsert+0x2e>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d2f6      	bcs.n	8003788 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6892      	ldr	r2, [r2, #8]
 80037e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6852      	ldr	r2, [r2, #4]
 80037f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d103      	bne.n	8003804 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003822:	b580      	push	{r7, lr}
 8003824:	b08e      	sub	sp, #56	; 0x38
 8003826:	af04      	add	r7, sp, #16
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <xTaskCreateStatic+0x46>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	61fb      	str	r3, [r7, #28]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003868:	2354      	movs	r3, #84	; 0x54
 800386a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b54      	cmp	r3, #84	; 0x54
 8003870:	d00a      	beq.n	8003888 <xTaskCreateStatic+0x66>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	61bb      	str	r3, [r7, #24]
}
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01e      	beq.n	80038cc <xTaskCreateStatic+0xaa>
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a6:	2300      	movs	r3, #0
 80038a8:	9303      	str	r3, [sp, #12]
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	9302      	str	r3, [sp, #8]
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f850 	bl	8003964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c6:	f000 f8cd 	bl	8003a64 <prvAddNewTaskToReadyList>
 80038ca:	e001      	b.n	80038d0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038d0:	697b      	ldr	r3, [r7, #20]
	}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08c      	sub	sp, #48	; 0x30
 80038de:	af04      	add	r7, sp, #16
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fe6e 	bl	80045d0 <pvPortMalloc>
 80038f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038fc:	2054      	movs	r0, #84	; 0x54
 80038fe:	f000 fe67 	bl	80045d0 <pvPortMalloc>
 8003902:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
 8003910:	e005      	b.n	800391e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f000 ff20 	bl	8004758 <vPortFree>
 8003918:	e001      	b.n	800391e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d017      	beq.n	8003954 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	2300      	movs	r3, #0
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f80e 	bl	8003964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003948:	69f8      	ldr	r0, [r7, #28]
 800394a:	f000 f88b 	bl	8003a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800394e:	2301      	movs	r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e002      	b.n	800395a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003954:	f04f 33ff 	mov.w	r3, #4294967295
 8003958:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800395a:	69bb      	ldr	r3, [r7, #24]
	}
 800395c:	4618      	mov	r0, r3
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800397c:	3b01      	subs	r3, #1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f023 0307 	bic.w	r3, r3, #7
 800398a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	617b      	str	r3, [r7, #20]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e012      	b.n	80039d8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	7819      	ldrb	r1, [r3, #0]
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	3334      	adds	r3, #52	; 0x34
 80039c2:	460a      	mov	r2, r1
 80039c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d9e9      	bls.n	80039b2 <prvInitialiseNewTask+0x4e>
 80039de:	e000      	b.n	80039e2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80039e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d901      	bls.n	80039f4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039f0:	2306      	movs	r3, #6
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fe79 	bl	8003702 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	3318      	adds	r3, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fe74 	bl	8003702 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f1c3 0207 	rsb	r2, r3, #7
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	69b8      	ldr	r0, [r7, #24]
 8003a44:	f000 fc0e 	bl	8004264 <pxPortInitialiseStack>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a5a:	bf00      	nop
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a6c:	f000 fcee 	bl	800444c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <prvAddNewTaskToReadyList+0xb8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <prvAddNewTaskToReadyList+0xb8>)
 8003a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a82:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <prvAddNewTaskToReadyList+0xb8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d110      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a90:	f000 fac0 	bl	8004014 <prvInitialiseTaskLists>
 8003a94:	e00d      	b.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <prvAddNewTaskToReadyList+0xc0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d802      	bhi.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <prvAddNewTaskToReadyList+0xc4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <prvAddNewTaskToReadyList+0xc4>)
 8003aba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <prvAddNewTaskToReadyList+0xc8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <prvAddNewTaskToReadyList+0xc8>)
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <prvAddNewTaskToReadyList+0xcc>)
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7ff fe18 	bl	800371a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003aea:	f000 fcdf 	bl	80044ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <prvAddNewTaskToReadyList+0xc0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00e      	beq.n	8003b14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d207      	bcs.n	8003b14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <prvAddNewTaskToReadyList+0xd0>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200004ec 	.word	0x200004ec
 8003b20:	200003ec 	.word	0x200003ec
 8003b24:	200004f8 	.word	0x200004f8
 8003b28:	20000508 	.word	0x20000508
 8003b2c:	200004f4 	.word	0x200004f4
 8003b30:	200003f0 	.word	0x200003f0
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d017      	beq.n	8003b7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <vTaskDelay+0x60>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <vTaskDelay+0x30>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60bb      	str	r3, [r7, #8]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b68:	f000 f87a 	bl	8003c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fb12 	bl	8004198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b74:	f000 f882 	bl	8003c7c <xTaskResumeAll>
 8003b78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <vTaskDelay+0x64>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000514 	.word	0x20000514
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bae:	463a      	mov	r2, r7
 8003bb0:	1d39      	adds	r1, r7, #4
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fb44 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	9202      	str	r2, [sp, #8]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	460a      	mov	r2, r1
 8003bce:	491e      	ldr	r1, [pc, #120]	; (8003c48 <vTaskStartScheduler+0xa8>)
 8003bd0:	481e      	ldr	r0, [pc, #120]	; (8003c4c <vTaskStartScheduler+0xac>)
 8003bd2:	f7ff fe26 	bl	8003822 <xTaskCreateStatic>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <vTaskStartScheduler+0xb0>)
 8003bda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <vTaskStartScheduler+0xb0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e001      	b.n	8003bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d116      	bne.n	8003c22 <vTaskStartScheduler+0x82>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	613b      	str	r3, [r7, #16]
}
 8003c06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <vTaskStartScheduler+0xb4>)
 8003c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <vTaskStartScheduler+0xb8>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <vTaskStartScheduler+0xbc>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c1c:	f000 fba4 	bl	8004368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c20:	e00e      	b.n	8003c40 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d10a      	bne.n	8003c40 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fb      	str	r3, [r7, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <vTaskStartScheduler+0x9e>
}
 8003c40:	bf00      	nop
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	08004a50 	.word	0x08004a50
 8003c4c:	08003fe5 	.word	0x08003fe5
 8003c50:	20000510 	.word	0x20000510
 8003c54:	2000050c 	.word	0x2000050c
 8003c58:	200004f8 	.word	0x200004f8
 8003c5c:	200004f0 	.word	0x200004f0

08003c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <vTaskSuspendAll+0x18>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <vTaskSuspendAll+0x18>)
 8003c6c:	6013      	str	r3, [r2, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000514 	.word	0x20000514

08003c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <xTaskResumeAll+0x114>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	603b      	str	r3, [r7, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ca8:	f000 fbd0 	bl	800444c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cac:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <xTaskResumeAll+0x114>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <xTaskResumeAll+0x114>)
 8003cb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <xTaskResumeAll+0x114>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d161      	bne.n	8003d82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cbe:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <xTaskResumeAll+0x118>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d05d      	beq.n	8003d82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc6:	e02e      	b.n	8003d26 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003cc8:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <xTaskResumeAll+0x11c>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fd7b 	bl	80037d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fd76 	bl	80037d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <xTaskResumeAll+0x120>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <xTaskResumeAll+0x120>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a27      	ldr	r2, [pc, #156]	; (8003da0 <xTaskResumeAll+0x124>)
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7ff fd04 	bl	800371a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <xTaskResumeAll+0x128>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d302      	bcc.n	8003d26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <xTaskResumeAll+0x12c>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <xTaskResumeAll+0x11c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1cc      	bne.n	8003cc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d34:	f000 fa0c 	bl	8004150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <xTaskResumeAll+0x130>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d44:	f000 f836 	bl	8003db4 <xTaskIncrementTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <xTaskResumeAll+0x12c>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f1      	bne.n	8003d44 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <xTaskResumeAll+0x130>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <xTaskResumeAll+0x12c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <xTaskResumeAll+0x134>)
 8003d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d82:	f000 fb93 	bl	80044ac <vPortExitCritical>

	return xAlreadyYielded;
 8003d86:	68bb      	ldr	r3, [r7, #8]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000514 	.word	0x20000514
 8003d94:	200004ec 	.word	0x200004ec
 8003d98:	200004ac 	.word	0x200004ac
 8003d9c:	200004f4 	.word	0x200004f4
 8003da0:	200003f0 	.word	0x200003f0
 8003da4:	200003ec 	.word	0x200003ec
 8003da8:	20000500 	.word	0x20000500
 8003dac:	200004fc 	.word	0x200004fc
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 808d 	bne.w	8003ee2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <xTaskIncrementTick+0x154>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dd0:	4a4d      	ldr	r2, [pc, #308]	; (8003f08 <xTaskIncrementTick+0x154>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d120      	bne.n	8003e1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <xTaskIncrementTick+0x48>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	603b      	str	r3, [r7, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <xTaskIncrementTick+0x46>
 8003dfc:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4a41      	ldr	r2, [pc, #260]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b40      	ldr	r3, [pc, #256]	; (8003f14 <xTaskIncrementTick+0x160>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	4a3f      	ldr	r2, [pc, #252]	; (8003f14 <xTaskIncrementTick+0x160>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	f000 f999 	bl	8004150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e1e:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d34d      	bcc.n	8003ec4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e28:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <xTaskIncrementTick+0x82>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xTaskIncrementTick+0x84>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e42:	601a      	str	r2, [r3, #0]
					break;
 8003e44:	e03e      	b.n	8003ec4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d203      	bcs.n	8003e66 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6013      	str	r3, [r2, #0]
						break;
 8003e64:	e02e      	b.n	8003ec4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fcb0 	bl	80037d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fca7 	bl	80037d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	2201      	movs	r2, #1
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <xTaskIncrementTick+0x168>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <xTaskIncrementTick+0x168>)
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <xTaskIncrementTick+0x16c>)
 8003ea2:	441a      	add	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7ff fc35 	bl	800371a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <xTaskIncrementTick+0x170>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3b4      	bcc.n	8003e28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec2:	e7b1      	b.n	8003e28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ec4:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <xTaskIncrementTick+0x170>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4915      	ldr	r1, [pc, #84]	; (8003f20 <xTaskIncrementTick+0x16c>)
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d907      	bls.n	8003eec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e004      	b.n	8003eec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <xTaskIncrementTick+0x174>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <xTaskIncrementTick+0x174>)
 8003eea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <xTaskIncrementTick+0x178>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ef8:	697b      	ldr	r3, [r7, #20]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000514 	.word	0x20000514
 8003f08:	200004f0 	.word	0x200004f0
 8003f0c:	200004a4 	.word	0x200004a4
 8003f10:	200004a8 	.word	0x200004a8
 8003f14:	20000504 	.word	0x20000504
 8003f18:	2000050c 	.word	0x2000050c
 8003f1c:	200004f4 	.word	0x200004f4
 8003f20:	200003f0 	.word	0x200003f0
 8003f24:	200003ec 	.word	0x200003ec
 8003f28:	200004fc 	.word	0x200004fc
 8003f2c:	20000500 	.word	0x20000500

08003f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <vTaskSwitchContext+0xa0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <vTaskSwitchContext+0xa4>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f44:	e03f      	b.n	8003fc6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <vTaskSwitchContext+0xa4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <vTaskSwitchContext+0xa8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	f1c3 031f 	rsb	r3, r3, #31
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	491e      	ldr	r1, [pc, #120]	; (8003fdc <vTaskSwitchContext+0xac>)
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	607b      	str	r3, [r7, #4]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <vTaskSwitchContext+0x5a>
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <vTaskSwitchContext+0xac>)
 8003f98:	4413      	add	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	3308      	adds	r3, #8
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d104      	bne.n	8003fbc <vTaskSwitchContext+0x8c>
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <vTaskSwitchContext+0xb0>)
 8003fc4:	6013      	str	r3, [r2, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000514 	.word	0x20000514
 8003fd4:	20000500 	.word	0x20000500
 8003fd8:	200004f4 	.word	0x200004f4
 8003fdc:	200003f0 	.word	0x200003f0
 8003fe0:	200003ec 	.word	0x200003ec

08003fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fec:	f000 f852 	bl	8004094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <prvIdleTask+0x28>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d9f9      	bls.n	8003fec <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <prvIdleTask+0x2c>)
 8003ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004008:	e7f0      	b.n	8003fec <prvIdleTask+0x8>
 800400a:	bf00      	nop
 800400c:	200003f0 	.word	0x200003f0
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e00c      	b.n	800403a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <prvInitialiseTaskLists+0x60>)
 800402c:	4413      	add	r3, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fb48 	bl	80036c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3301      	adds	r3, #1
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d9ef      	bls.n	8004020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004040:	480d      	ldr	r0, [pc, #52]	; (8004078 <prvInitialiseTaskLists+0x64>)
 8004042:	f7ff fb3f 	bl	80036c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004046:	480d      	ldr	r0, [pc, #52]	; (800407c <prvInitialiseTaskLists+0x68>)
 8004048:	f7ff fb3c 	bl	80036c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800404c:	480c      	ldr	r0, [pc, #48]	; (8004080 <prvInitialiseTaskLists+0x6c>)
 800404e:	f7ff fb39 	bl	80036c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004052:	480c      	ldr	r0, [pc, #48]	; (8004084 <prvInitialiseTaskLists+0x70>)
 8004054:	f7ff fb36 	bl	80036c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004058:	480b      	ldr	r0, [pc, #44]	; (8004088 <prvInitialiseTaskLists+0x74>)
 800405a:	f7ff fb33 	bl	80036c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <prvInitialiseTaskLists+0x78>)
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <prvInitialiseTaskLists+0x64>)
 8004062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <prvInitialiseTaskLists+0x7c>)
 8004066:	4a05      	ldr	r2, [pc, #20]	; (800407c <prvInitialiseTaskLists+0x68>)
 8004068:	601a      	str	r2, [r3, #0]
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200003f0 	.word	0x200003f0
 8004078:	2000047c 	.word	0x2000047c
 800407c:	20000490 	.word	0x20000490
 8004080:	200004ac 	.word	0x200004ac
 8004084:	200004c0 	.word	0x200004c0
 8004088:	200004d8 	.word	0x200004d8
 800408c:	200004a4 	.word	0x200004a4
 8004090:	200004a8 	.word	0x200004a8

08004094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409a:	e019      	b.n	80040d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800409c:	f000 f9d6 	bl	800444c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <prvCheckTasksWaitingTermination+0x50>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fb8f 	bl	80037d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <prvCheckTasksWaitingTermination+0x54>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <prvCheckTasksWaitingTermination+0x54>)
 80040ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <prvCheckTasksWaitingTermination+0x58>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <prvCheckTasksWaitingTermination+0x58>)
 80040c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040c6:	f000 f9f1 	bl	80044ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f810 	bl	80040f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <prvCheckTasksWaitingTermination+0x58>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e1      	bne.n	800409c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200004c0 	.word	0x200004c0
 80040e8:	200004ec 	.word	0x200004ec
 80040ec:	200004d4 	.word	0x200004d4

080040f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fb26 	bl	8004758 <vPortFree>
				vPortFree( pxTCB );
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb23 	bl	8004758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004112:	e018      	b.n	8004146 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411a:	2b01      	cmp	r3, #1
 800411c:	d103      	bne.n	8004126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fb1a 	bl	8004758 <vPortFree>
	}
 8004124:	e00f      	b.n	8004146 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800412c:	2b02      	cmp	r3, #2
 800412e:	d00a      	beq.n	8004146 <prvDeleteTCB+0x56>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60fb      	str	r3, [r7, #12]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <prvDeleteTCB+0x54>
	}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <prvResetNextTaskUnblockTime+0x40>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <prvResetNextTaskUnblockTime+0x14>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <prvResetNextTaskUnblockTime+0x16>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvResetNextTaskUnblockTime+0x44>)
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004172:	e008      	b.n	8004186 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <prvResetNextTaskUnblockTime+0x40>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4a04      	ldr	r2, [pc, #16]	; (8004194 <prvResetNextTaskUnblockTime+0x44>)
 8004184:	6013      	str	r3, [r2, #0]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	200004a4 	.word	0x200004a4
 8004194:	2000050c 	.word	0x2000050c

08004198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <prvAddCurrentTaskToDelayedList+0xb0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fb0e 	bl	80037d0 <uxListRemove>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2201      	movs	r2, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	4a20      	ldr	r2, [pc, #128]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d10a      	bne.n	80041f0 <prvAddCurrentTaskToDelayedList+0x58>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	481a      	ldr	r0, [pc, #104]	; (8004254 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041ea:	f7ff fa96 	bl	800371a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041ee:	e026      	b.n	800423e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d209      	bcs.n	800421c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <prvAddCurrentTaskToDelayedList+0xc0>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7ff faa3 	bl	8003760 <vListInsert>
}
 800421a:	e010      	b.n	800423e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <prvAddCurrentTaskToDelayedList+0xc4>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7ff fa99 	bl	8003760 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d202      	bcs.n	800423e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200004f0 	.word	0x200004f0
 800424c:	200003ec 	.word	0x200003ec
 8004250:	200004f4 	.word	0x200004f4
 8004254:	200004d8 	.word	0x200004d8
 8004258:	200004a8 	.word	0x200004a8
 800425c:	200004a4 	.word	0x200004a4
 8004260:	2000050c 	.word	0x2000050c

08004264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b04      	subs	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3b04      	subs	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <pxPortInitialiseStack+0x54>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b14      	subs	r3, #20
 800429e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3b20      	subs	r3, #32
 80042aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	080042bd 	.word	0x080042bd

080042bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <prvTaskExitError+0x54>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d00a      	beq.n	80042e6 <prvTaskExitError+0x2a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <prvTaskExitError+0x28>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
}
 80042f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042fa:	bf00      	nop
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0fc      	beq.n	80042fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000000c 	.word	0x2000000c
	...

08004320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	f04e 0e0d 	orr.w	lr, lr, #13
 800433e:	4770      	bx	lr

08004340 <pxCurrentTCBConst2>:
 8004340:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <prvPortStartFirstTask+0x1c>)
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f380 8808 	msr	MSP, r0
 8004352:	b662      	cpsie	i
 8004354:	b661      	cpsie	f
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	df00      	svc	0
 8004360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004362:	bf00      	nop
 8004364:	e000ed08 	.word	0xe000ed08

08004368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436e:	4b32      	ldr	r3, [pc, #200]	; (8004438 <xPortStartScheduler+0xd0>)
 8004370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b2a      	ldr	r3, [pc, #168]	; (800443c <xPortStartScheduler+0xd4>)
 8004394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <xPortStartScheduler+0xd8>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439c:	e009      	b.n	80043b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <xPortStartScheduler+0xd8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a26      	ldr	r2, [pc, #152]	; (8004440 <xPortStartScheduler+0xd8>)
 80043a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d0ef      	beq.n	800439e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043be:	4b20      	ldr	r3, [pc, #128]	; (8004440 <xPortStartScheduler+0xd8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1c3 0307 	rsb	r3, r3, #7
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d00a      	beq.n	80043e0 <xPortStartScheduler+0x78>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	60bb      	str	r3, [r7, #8]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043e0:	4b17      	ldr	r3, [pc, #92]	; (8004440 <xPortStartScheduler+0xd8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <xPortStartScheduler+0xd8>)
 80043e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <xPortStartScheduler+0xd8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <xPortStartScheduler+0xd8>)
 80043f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <xPortStartScheduler+0xdc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <xPortStartScheduler+0xdc>)
 8004404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <xPortStartScheduler+0xdc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <xPortStartScheduler+0xdc>)
 8004410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004416:	f000 f8b9 	bl	800458c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <xPortStartScheduler+0xe0>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004420:	f7ff ff92 	bl	8004348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004424:	f7ff fd84 	bl	8003f30 <vTaskSwitchContext>
	prvTaskExitError();
 8004428:	f7ff ff48 	bl	80042bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e400 	.word	0xe000e400
 800443c:	20000518 	.word	0x20000518
 8004440:	2000051c 	.word	0x2000051c
 8004444:	e000ed20 	.word	0xe000ed20
 8004448:	2000000c 	.word	0x2000000c

0800444c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
}
 8004464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <vPortEnterCritical+0x58>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	4a0d      	ldr	r2, [pc, #52]	; (80044a4 <vPortEnterCritical+0x58>)
 800446e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <vPortEnterCritical+0x58>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10f      	bne.n	8004498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <vPortEnterCritical+0x5c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <vPortEnterCritical+0x4c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	603b      	str	r3, [r7, #0]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <vPortEnterCritical+0x4a>
	}
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	2000000c 	.word	0x2000000c
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <vPortExitCritical+0x4c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <vPortExitCritical+0x24>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	607b      	str	r3, [r7, #4]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <vPortExitCritical+0x4c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <vPortExitCritical+0x4c>)
 80044d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <vPortExitCritical+0x4c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d105      	bne.n	80044ee <vPortExitCritical+0x42>
 80044e2:	2300      	movs	r3, #0
 80044e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	2000000c 	.word	0x2000000c
 80044fc:	00000000 	.word	0x00000000

08004500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004500:	f3ef 8009 	mrs	r0, PSP
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <pxCurrentTCBConst>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004510:	6010      	str	r0, [r2, #0]
 8004512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800451a:	f380 8811 	msr	BASEPRI, r0
 800451e:	f7ff fd07 	bl	8003f30 <vTaskSwitchContext>
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8811 	msr	BASEPRI, r0
 800452a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	6808      	ldr	r0, [r1, #0]
 8004532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004536:	f380 8809 	msr	PSP, r0
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	4770      	bx	lr

08004540 <pxCurrentTCBConst>:
 8004540:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004562:	f7ff fc27 	bl	8003db4 <xTaskIncrementTick>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SysTick_Handler+0x40>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
}
 800457e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <vPortSetupTimerInterrupt+0x30>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <vPortSetupTimerInterrupt+0x38>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <vPortSetupTimerInterrupt+0x30>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	e000e010 	.word	0xe000e010
 80045c0:	e000e018 	.word	0xe000e018
 80045c4:	20000000 	.word	0x20000000
 80045c8:	10624dd3 	.word	0x10624dd3
 80045cc:	e000e014 	.word	0xe000e014

080045d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045dc:	f7ff fb40 	bl	8003c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045e0:	4b58      	ldr	r3, [pc, #352]	; (8004744 <pvPortMalloc+0x174>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045e8:	f000 f910 	bl	800480c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045ec:	4b56      	ldr	r3, [pc, #344]	; (8004748 <pvPortMalloc+0x178>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 808e 	bne.w	8004716 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01d      	beq.n	800463c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004600:	2208      	movs	r2, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f023 0307 	bic.w	r3, r3, #7
 8004618:	3308      	adds	r3, #8
 800461a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <pvPortMalloc+0x6c>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	617b      	str	r3, [r7, #20]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d069      	beq.n	8004716 <pvPortMalloc+0x146>
 8004642:	4b42      	ldr	r3, [pc, #264]	; (800474c <pvPortMalloc+0x17c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d864      	bhi.n	8004716 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <pvPortMalloc+0x180>)
 800464e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004650:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <pvPortMalloc+0x180>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004656:	e004      	b.n	8004662 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d903      	bls.n	8004674 <pvPortMalloc+0xa4>
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f1      	bne.n	8004658 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004674:	4b33      	ldr	r3, [pc, #204]	; (8004744 <pvPortMalloc+0x174>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	429a      	cmp	r2, r3
 800467c:	d04b      	beq.n	8004716 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2208      	movs	r2, #8
 8004684:	4413      	add	r3, r2
 8004686:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	2308      	movs	r3, #8
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	429a      	cmp	r2, r3
 800469e:	d91f      	bls.n	80046e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <pvPortMalloc+0xf8>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	613b      	str	r3, [r7, #16]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046da:	69b8      	ldr	r0, [r7, #24]
 80046dc:	f000 f8f8 	bl	80048d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <pvPortMalloc+0x17c>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	4a18      	ldr	r2, [pc, #96]	; (800474c <pvPortMalloc+0x17c>)
 80046ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <pvPortMalloc+0x17c>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b18      	ldr	r3, [pc, #96]	; (8004754 <pvPortMalloc+0x184>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d203      	bcs.n	8004702 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <pvPortMalloc+0x17c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a15      	ldr	r2, [pc, #84]	; (8004754 <pvPortMalloc+0x184>)
 8004700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <pvPortMalloc+0x178>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	431a      	orrs	r2, r3
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004716:	f7ff fab1 	bl	8003c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <pvPortMalloc+0x16a>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <pvPortMalloc+0x168>
	return pvReturn;
 800473a:	69fb      	ldr	r3, [r7, #28]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3728      	adds	r7, #40	; 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	200018b0 	.word	0x200018b0
 8004748:	200018bc 	.word	0x200018bc
 800474c:	200018b4 	.word	0x200018b4
 8004750:	200018a8 	.word	0x200018a8
 8004754:	200018b8 	.word	0x200018b8

08004758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d048      	beq.n	80047fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800476a:	2308      	movs	r3, #8
 800476c:	425b      	negs	r3, r3
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4413      	add	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4b21      	ldr	r3, [pc, #132]	; (8004804 <vPortFree+0xac>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <vPortFree+0x44>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60fb      	str	r3, [r7, #12]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <vPortFree+0x62>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60bb      	str	r3, [r7, #8]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <vPortFree+0xac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d019      	beq.n	80047fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d115      	bne.n	80047fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <vPortFree+0xac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	43db      	mvns	r3, r3
 80047da:	401a      	ands	r2, r3
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047e0:	f7ff fa3e 	bl	8003c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <vPortFree+0xb0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	4a06      	ldr	r2, [pc, #24]	; (8004808 <vPortFree+0xb0>)
 80047f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047f2:	6938      	ldr	r0, [r7, #16]
 80047f4:	f000 f86c 	bl	80048d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047f8:	f7ff fa40 	bl	8003c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047fc:	bf00      	nop
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200018bc 	.word	0x200018bc
 8004808:	200018b4 	.word	0x200018b4

0800480c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004812:	f241 3388 	movw	r3, #5000	; 0x1388
 8004816:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <prvHeapInit+0xac>)
 800481a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3307      	adds	r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0307 	bic.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <prvHeapInit+0xac>)
 800483c:	4413      	add	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004844:	4a1d      	ldr	r2, [pc, #116]	; (80048bc <prvHeapInit+0xb0>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <prvHeapInit+0xb0>)
 800484c:	2200      	movs	r2, #0
 800484e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4413      	add	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004858:	2208      	movs	r2, #8
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <prvHeapInit+0xb4>)
 800486c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <prvHeapInit+0xb4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <prvHeapInit+0xb4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	1ad2      	subs	r2, r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <prvHeapInit+0xb4>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <prvHeapInit+0xb8>)
 800489a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <prvHeapInit+0xbc>)
 80048a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <prvHeapInit+0xc0>)
 80048a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000520 	.word	0x20000520
 80048bc:	200018a8 	.word	0x200018a8
 80048c0:	200018b0 	.word	0x200018b0
 80048c4:	200018b8 	.word	0x200018b8
 80048c8:	200018b4 	.word	0x200018b4
 80048cc:	200018bc 	.word	0x200018bc

080048d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <prvInsertBlockIntoFreeList+0xa8>)
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e002      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x14>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d8f7      	bhi.n	80048de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4413      	add	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d108      	bne.n	8004912 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	441a      	add	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d118      	bne.n	8004958 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <prvInsertBlockIntoFreeList+0xac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d00d      	beq.n	800494e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	441a      	add	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e008      	b.n	8004960 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <prvInsertBlockIntoFreeList+0xac>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e003      	b.n	8004960 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d002      	beq.n	800496e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	200018a8 	.word	0x200018a8
 800497c:	200018b0 	.word	0x200018b0

08004980 <memset>:
 8004980:	4603      	mov	r3, r0
 8004982:	4402      	add	r2, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	2600      	movs	r6, #0
 8004994:	4d0c      	ldr	r5, [pc, #48]	; (80049c8 <__libc_init_array+0x38>)
 8004996:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004998:	1b64      	subs	r4, r4, r5
 800499a:	10a4      	asrs	r4, r4, #2
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	f000 f81a 	bl	80049d8 <_init>
 80049a4:	2600      	movs	r6, #0
 80049a6:	4d0a      	ldr	r5, [pc, #40]	; (80049d0 <__libc_init_array+0x40>)
 80049a8:	4c0a      	ldr	r4, [pc, #40]	; (80049d4 <__libc_init_array+0x44>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004a84 	.word	0x08004a84
 80049cc:	08004a84 	.word	0x08004a84
 80049d0:	08004a84 	.word	0x08004a84
 80049d4:	08004a88 	.word	0x08004a88

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

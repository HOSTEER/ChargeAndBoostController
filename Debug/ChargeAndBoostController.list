
ChargeAndBoostController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b04  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db8  08009db8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009db8  08009db8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009db8  08009db8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  20000074  08009e38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c4c  08009e38  00021c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cc59  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e97  00000000  00000000  0003cd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  00041bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001314  00000000  00000000  00043480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fdf6  00000000  00000000  00044794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa6c  00000000  00000000  0006458a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a34f3  00000000  00000000  00083ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cc0  00000000  00000000  001274ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0012e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08009bfc 	.word	0x08009bfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08009bfc 	.word	0x08009bfc

08000150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f000 fe8d 	bl	8000eac <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f000 fb64 	bl	8000864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 ff55 	bl	800105c <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f000 fb54 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a14      	ldr	r2, [pc, #80]	; (8000238 <HAL_ADC_MspInit+0x6c>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d121      	bne.n	8000230 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <HAL_ADC_MspInit+0x70>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin|USB_SENSE_Pin;
 800021c:	2303      	movs	r3, #3
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <HAL_ADC_MspInit+0x74>)
 800022c:	f001 fb16 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40012400 	.word	0x40012400
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800

08000244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_DMA_Init+0x48>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a0f      	ldr	r2, [pc, #60]	; (800028c <MX_DMA_Init+0x48>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6153      	str	r3, [r2, #20]
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <MX_DMA_Init+0x48>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2105      	movs	r1, #5
 8000266:	2010      	movs	r0, #16
 8000268:	f001 f8e7 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800026c:	2010      	movs	r0, #16
 800026e:	f001 f900 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2105      	movs	r1, #5
 8000276:	2011      	movs	r0, #17
 8000278:	f001 f8df 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800027c:	2011      	movs	r0, #17
 800027e:	f001 f8f8 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <vApplicationGetIdleTaskMemory+0x28>)
 80002a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	4a05      	ldr	r2, [pc, #20]	; (80002bc <vApplicationGetIdleTaskMemory+0x2c>)
 80002a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	200000c4 	.word	0x200000c4
 80002bc:	20000118 	.word	0x20000118

080002c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002c0:	b5b0      	push	{r4, r5, r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <MX_FREERTOS_Init+0x30>)
 80002c8:	1d3c      	adds	r4, r7, #4
 80002ca:	461d      	mov	r5, r3
 80002cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f005 fcb1 	bl	8005c44 <osThreadCreate>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <MX_FREERTOS_Init+0x34>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002e8:	bf00      	nop
 80002ea:	3720      	adds	r7, #32
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bdb0      	pop	{r4, r5, r7, pc}
 80002f0:	08009c20 	.word	0x08009c20
 80002f4:	200000c0 	.word	0x200000c0

080002f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f005 fceb 	bl	8005cdc <osDelay>
 8000306:	e7fb      	b.n	8000300 <StartDefaultTask+0x8>

08000308 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800031c:	4b47      	ldr	r3, [pc, #284]	; (800043c <MX_GPIO_Init+0x134>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a46      	ldr	r2, [pc, #280]	; (800043c <MX_GPIO_Init+0x134>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b44      	ldr	r3, [pc, #272]	; (800043c <MX_GPIO_Init+0x134>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0320 	and.w	r3, r3, #32
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b41      	ldr	r3, [pc, #260]	; (800043c <MX_GPIO_Init+0x134>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a40      	ldr	r2, [pc, #256]	; (800043c <MX_GPIO_Init+0x134>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b3e      	ldr	r3, [pc, #248]	; (800043c <MX_GPIO_Init+0x134>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034c:	4b3b      	ldr	r3, [pc, #236]	; (800043c <MX_GPIO_Init+0x134>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a3a      	ldr	r2, [pc, #232]	; (800043c <MX_GPIO_Init+0x134>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b38      	ldr	r3, [pc, #224]	; (800043c <MX_GPIO_Init+0x134>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0308 	and.w	r3, r3, #8
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2107      	movs	r1, #7
 8000368:	4835      	ldr	r0, [pc, #212]	; (8000440 <MX_GPIO_Init+0x138>)
 800036a:	f001 fc12 	bl	8001b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD0_Pin|CHARG_EN_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8000374:	4833      	ldr	r0, [pc, #204]	; (8000444 <MX_GPIO_Init+0x13c>)
 8000376:	f001 fc0c 	bl	8001b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12V_Pin|VOUT_EN_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000380:	4830      	ldr	r0, [pc, #192]	; (8000444 <MX_GPIO_Init+0x13c>)
 8000382:	f001 fc06 	bl	8001b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800038a:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <MX_GPIO_Init+0x140>)
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	482a      	ldr	r0, [pc, #168]	; (8000444 <MX_GPIO_Init+0x13c>)
 800039a:	f001 fa5f 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD2_Pin;
 800039e:	2307      	movs	r3, #7
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4822      	ldr	r0, [pc, #136]	; (8000440 <MX_GPIO_Init+0x138>)
 80003b6:	f001 fa51 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD0_Pin|EN12V_Pin|VOUT_EN_Pin
 80003ba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80003be:	613b      	str	r3, [r7, #16]
                          |CHARG_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	481c      	ldr	r0, [pc, #112]	; (8000444 <MX_GPIO_Init+0x13c>)
 80003d4:	f001 fa42 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARG_ON_Pin;
 80003d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARG_ON_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <MX_GPIO_Init+0x13c>)
 80003ee:	f001 fa35 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARG_OFF_Pin;
 80003f2:	2308      	movs	r3, #8
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARG_OFF_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	480e      	ldr	r0, [pc, #56]	; (8000440 <MX_GPIO_Init+0x138>)
 8000406:	f001 fa29 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FUSB_IRQ_Pin;
 800040a:	2320      	movs	r3, #32
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_GPIO_Init+0x140>)
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FUSB_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4808      	ldr	r0, [pc, #32]	; (8000440 <MX_GPIO_Init+0x138>)
 800041e:	f001 fa1d 	bl	800185c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2105      	movs	r1, #5
 8000426:	2017      	movs	r0, #23
 8000428:	f001 f807 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800042c:	2017      	movs	r0, #23
 800042e:	f001 f820 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40010c00 	.word	0x40010c00
 8000444:	40010800 	.word	0x40010800
 8000448:	10110000 	.word	0x10110000

0800044c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_I2C1_Init+0x50>)
 8000452:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <MX_I2C1_Init+0x54>)
 8000454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_I2C1_Init+0x50>)
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_I2C1_Init+0x58>)
 800045a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_I2C1_Init+0x50>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_I2C1_Init+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_I2C1_Init+0x50>)
 800046a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800046e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <MX_I2C1_Init+0x50>)
 8000472:	2200      	movs	r2, #0
 8000474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_I2C1_Init+0x50>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <MX_I2C1_Init+0x50>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_I2C1_Init+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_I2C1_Init+0x50>)
 800048a:	f001 fbcb 	bl	8001c24 <HAL_I2C_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000494:	f000 f9e6 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000318 	.word	0x20000318
 80004a0:	40005400 	.word	0x40005400
 80004a4:	00061a80 	.word	0x00061a80

080004a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a43      	ldr	r2, [pc, #268]	; (80005d0 <HAL_I2C_MspInit+0x128>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d17f      	bne.n	80005c8 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <HAL_I2C_MspInit+0x12c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a41      	ldr	r2, [pc, #260]	; (80005d4 <HAL_I2C_MspInit+0x12c>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <HAL_I2C_MspInit+0x12c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = FUSB_SCL_Pin|FUSB_SDA_Pin;
 80004e0:	23c0      	movs	r3, #192	; 0xc0
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004e4:	2312      	movs	r3, #18
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4839      	ldr	r0, [pc, #228]	; (80005d8 <HAL_I2C_MspInit+0x130>)
 80004f4:	f001 f9b2 	bl	800185c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <HAL_I2C_MspInit+0x12c>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <HAL_I2C_MspInit+0x12c>)
 80004fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000502:	61d3      	str	r3, [r2, #28]
 8000504:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <HAL_I2C_MspInit+0x12c>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000512:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <HAL_I2C_MspInit+0x138>)
 8000514:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000516:	4b31      	ldr	r3, [pc, #196]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <HAL_I2C_MspInit+0x134>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000522:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000528:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <HAL_I2C_MspInit+0x134>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800053a:	4b28      	ldr	r3, [pc, #160]	; (80005dc <HAL_I2C_MspInit+0x134>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000540:	4826      	ldr	r0, [pc, #152]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000542:	f000 ffa5 	bl	8001490 <HAL_DMA_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800054c:	f000 f98a 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a22      	ldr	r2, [pc, #136]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000554:	639a      	str	r2, [r3, #56]	; 0x38
 8000556:	4a21      	ldr	r2, [pc, #132]	; (80005dc <HAL_I2C_MspInit+0x134>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 800055e:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <HAL_I2C_MspInit+0x140>)
 8000560:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 8000564:	2210      	movs	r2, #16
 8000566:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 800058e:	f000 ff7f 	bl	8001490 <HAL_DMA_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000598:	f000 f964 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <HAL_I2C_MspInit+0x13c>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2105      	movs	r1, #5
 80005ac:	201f      	movs	r0, #31
 80005ae:	f000 ff44 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005b2:	201f      	movs	r0, #31
 80005b4:	f000 ff5d 	bl	8001472 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2105      	movs	r1, #5
 80005bc:	2020      	movs	r0, #32
 80005be:	f000 ff3c 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80005c2:	2020      	movs	r0, #32
 80005c4:	f000 ff55 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40005400 	.word	0x40005400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	2000036c 	.word	0x2000036c
 80005e0:	40020080 	.word	0x40020080
 80005e4:	200003b0 	.word	0x200003b0
 80005e8:	4002006c 	.word	0x4002006c

080005ec <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <__io_putchar+0x20>)
 80005fe:	f005 f983 	bl	8005908 <HAL_UART_Transmit>
	return ch;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000490 	.word	0x20000490

08000610 <fusb_302_task>:

void fusb_302_task(void * unused){
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af04      	add	r7, sp, #16
 8000616:	6078      	str	r0, [r7, #4]
	uint8_t FUSB302BMPX_SLV_ADDR = 0b0100010;
 8000618:	2322      	movs	r3, #34	; 0x22
 800061a:	73fb      	strb	r3, [r7, #15]
	uint8_t fusb_ver = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Read(&hi2c1,(uint16_t) FUSB302BMPX_SLV_ADDR<<1, 0x01, 8, &fusb_ver, 8, HAL_MAX_DELAY);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	b29b      	uxth	r3, r3
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	b299      	uxth	r1, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	2308      	movs	r3, #8
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f107 030e 	add.w	r3, r7, #14
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2308      	movs	r3, #8
 800063a:	2201      	movs	r2, #1
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <fusb_302_task+0x48>)
 800063e:	f001 fd43 	bl	80020c8 <HAL_I2C_Mem_Read>
	//vTaskDelay(pdMS_TO_TICKS(5000));
	printf("Starting\r\n");
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <fusb_302_task+0x4c>)
 8000644:	f008 fc5a 	bl	8008efc <puts>
	pd_user_main();
 8000648:	f008 f8b0 	bl	80087ac <pd_user_main>
	vTaskDelay(pdMS_TO_TICKS(5000));
 800064c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000650:	f005 fd92 	bl	8006178 <vTaskDelay>
	for(;;){
 8000654:	e7fe      	b.n	8000654 <fusb_302_task+0x44>
 8000656:	bf00      	nop
 8000658:	20000318 	.word	0x20000318
 800065c:	08009c3c 	.word	0x08009c3c

08000660 <leds_task>:

	}
}

void leds_task(void * unused){
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef * GPIO_port[5]={ LD0_GPIO_Port, LD1_GPIO_Port, LD2_GPIO_Port, LD3_GPIO_Port, LD4_GPIO_Port};
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <leds_task+0x6c>)
 800066a:	f107 0418 	add.w	r4, r7, #24
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	6023      	str	r3, [r4, #0]
	uint16_t GPIO_pins[5]={ LD0_Pin, LD1_Pin, LD2_Pin, LD3_Pin, LD4_Pin};
 8000678:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <leds_task+0x70>)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000680:	c303      	stmia	r3!, {r0, r1}
 8000682:	801a      	strh	r2, [r3, #0]
	vTaskDelay(pdMS_TO_TICKS(5000));
 8000684:	f241 3088 	movw	r0, #5000	; 0x1388
 8000688:	f005 fd76 	bl	8006178 <vTaskDelay>
	for(uint8_t led_number=1; led_number<5; led_number++){
 800068c:	2301      	movs	r3, #1
 800068e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000692:	e016      	b.n	80006c2 <leds_task+0x62>
		HAL_GPIO_WritePin(GPIO_port[led_number], GPIO_pins[led_number], GPIO_PIN_RESET);
 8000694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	3330      	adds	r3, #48	; 0x30
 800069c:	443b      	add	r3, r7
 800069e:	f853 0c18 	ldr.w	r0, [r3, #-24]
 80006a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	3330      	adds	r3, #48	; 0x30
 80006aa:	443b      	add	r3, r7
 80006ac:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 fa6d 	bl	8001b92 <HAL_GPIO_WritePin>
	for(uint8_t led_number=1; led_number<5; led_number++){
 80006b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006bc:	3301      	adds	r3, #1
 80006be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d9e4      	bls.n	8000694 <leds_task+0x34>
	}
	for(;;){
 80006ca:	e7fe      	b.n	80006ca <leds_task+0x6a>
 80006cc:	08009c48 	.word	0x08009c48
 80006d0:	08009c5c 	.word	0x08009c5c

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fb91 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f847 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f7ff fe11 	bl	8000308 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e6:	f7ff fdad 	bl	8000244 <MX_DMA_Init>
  MX_I2C1_Init();
 80006ea:	f7ff feaf 	bl	800044c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006ee:	f000 faed 	bl	8000ccc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006f2:	f7ff fd2d 	bl	8000150 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006f6:	f000 fa71 	bl	8000bdc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <main+0x80>)
 80006fc:	f004 fd06 	bl	800510c <HAL_TIM_Base_Start_IT>
	BaseType_t ret;
	ret = xTaskCreate(leds_task, "leds_task", DEFAULT_STACK_SIZE, NULL, 1, &h_leds);
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <main+0x84>)
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070e:	4913      	ldr	r1, [pc, #76]	; (800075c <main+0x88>)
 8000710:	4813      	ldr	r0, [pc, #76]	; (8000760 <main+0x8c>)
 8000712:	f005 fc02 	bl	8005f1a <xTaskCreate>
 8000716:	6078      	str	r0, [r7, #4]
	if(ret != pdPASS)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d001      	beq.n	8000722 <main+0x4e>
	{
		Error_Handler();
 800071e:	f000 f8a1 	bl	8000864 <Error_Handler>
	}
	ret = xTaskCreate(fusb_302_task, "fusb_task", DEFAULT_STACK_SIZE, NULL, 2, &h_fusb_302);
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x90>)
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	2302      	movs	r3, #2
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	490d      	ldr	r1, [pc, #52]	; (8000768 <main+0x94>)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <main+0x98>)
 8000734:	f005 fbf1 	bl	8005f1a <xTaskCreate>
 8000738:	6078      	str	r0, [r7, #4]
	if(ret != pdPASS)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d001      	beq.n	8000744 <main+0x70>
	{
		Error_Handler();
 8000740:	f000 f890 	bl	8000864 <Error_Handler>
	}
	vTaskStartScheduler();
 8000744:	f005 fd4c 	bl	80061e0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000748:	f7ff fdba 	bl	80002c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800074c:	f005 fa73 	bl	8005c36 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x7c>
 8000752:	bf00      	nop
 8000754:	20000448 	.word	0x20000448
 8000758:	200003f4 	.word	0x200003f4
 800075c:	08009c68 	.word	0x08009c68
 8000760:	08000661 	.word	0x08000661
 8000764:	200003f8 	.word	0x200003f8
 8000768:	08009c74 	.word	0x08009c74
 800076c:	08000611 	.word	0x08000611

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	2228      	movs	r2, #40	; 0x28
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f008 fc9c 	bl	80090bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 ff57 	bl	800467c <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007d4:	f000 f846 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2102      	movs	r1, #2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 f9c3 	bl	8004b80 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 f830 	bl	8000864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000804:	2302      	movs	r3, #2
 8000806:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800080c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fb75 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800081c:	f000 f822 	bl	8000864 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000838:	d102      	bne.n	8000840 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800083a:	f000 faf7 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
	else if (htim->Instance == TIM1){
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
	}
  /* USER CODE END Callback 1 */
}
 800083e:	e009      	b.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim->Instance == TIM1){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a05      	ldr	r2, [pc, #20]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d104      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 800084a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000850:	f001 f9b7 	bl	8001bc2 <HAL_GPIO_TogglePin>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40010800 	.word	0x40010800

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_MspInit+0x68>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_MspInit+0x68>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_MspInit+0x68>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_MspInit+0x68>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_MspInit+0x68>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x68>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fdc4 	bl	800143a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_MspInit+0x6c>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_MspInit+0x6c>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010000 	.word	0x40010000

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <HAL_InitTick+0xe8>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <HAL_InitTick+0xe8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <HAL_InitTick+0xe8>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090e:	f107 0210 	add.w	r2, r7, #16
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f004 faa3 	bl	8004e64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000928:	f004 fa74 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 800092c:	6378      	str	r0, [r7, #52]	; 0x34
 800092e:	e004      	b.n	800093a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000930:	f004 fa70 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8000934:	4603      	mov	r3, r0
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093c:	4a23      	ldr	r2, [pc, #140]	; (80009cc <HAL_InitTick+0xec>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	3b01      	subs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <HAL_InitTick+0xf0>)
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <HAL_InitTick+0xf0>)
 8000952:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000956:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <HAL_InitTick+0xf0>)
 800095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_InitTick+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <HAL_InitTick+0xf0>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HAL_InitTick+0xf0>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000970:	4817      	ldr	r0, [pc, #92]	; (80009d0 <HAL_InitTick+0xf0>)
 8000972:	f004 fb7b 	bl	800506c <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800097c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000980:	2b00      	cmp	r3, #0
 8000982:	d11b      	bne.n	80009bc <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000984:	4812      	ldr	r0, [pc, #72]	; (80009d0 <HAL_InitTick+0xf0>)
 8000986:	f004 fbc1 	bl	800510c <HAL_TIM_Base_Start_IT>
 800098a:	4603      	mov	r3, r0
 800098c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000994:	2b00      	cmp	r3, #0
 8000996:	d111      	bne.n	80009bc <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f000 fd6a 	bl	8001472 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d808      	bhi.n	80009b6 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	201c      	movs	r0, #28
 80009aa:	f000 fd46 	bl	800143a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_InitTick+0xf4>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	e002      	b.n	80009bc <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3738      	adds	r7, #56	; 0x38
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	200003fc 	.word	0x200003fc
 80009d4:	20000004 	.word	0x20000004

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
	...

08000a04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <DMA1_Channel6_IRQHandler+0x10>)
 8000a0a:	f000 fe13 	bl	8001634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200003b0 	.word	0x200003b0

08000a18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <DMA1_Channel7_IRQHandler+0x10>)
 8000a1e:	f000 fe09 	bl	8001634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000036c 	.word	0x2000036c

08000a2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FUSB_IRQ_Pin);
 8000a30:	2020      	movs	r0, #32
 8000a32:	f001 f8df 	bl	8001bf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	f001 f8dc 	bl	8001bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <TIM1_UP_IRQHandler+0x10>)
 8000a46:	f004 fbb3 	bl	80051b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000448 	.word	0x20000448

08000a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM2_IRQHandler+0x10>)
 8000a5a:	f004 fba9 	bl	80051b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200003fc 	.word	0x200003fc

08000a68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <I2C1_EV_IRQHandler+0x10>)
 8000a6e:	f001 fd93 	bl	8002598 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000318 	.word	0x20000318

08000a7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <I2C1_ER_IRQHandler+0x10>)
 8000a82:	f001 fedc 	bl	800283e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000318 	.word	0x20000318

08000a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00a      	b.n	8000ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa2:	f3af 8000 	nop.w
 8000aa6:	4601      	mov	r1, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dbf0      	blt.n	8000aa2 <_read+0x12>
  }

  return len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	e009      	b.n	8000af0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd81 	bl	80005ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf1      	blt.n	8000adc <_write+0x12>
  }
  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b28:	605a      	str	r2, [r3, #4]
  return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f008 fae0 	bl	8009158 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20005000 	.word	0x20005000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000444 	.word	0x20000444
 8000bcc:	20001c50 	.word	0x20001c50

08000bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000bfa:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c00:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c28:	f004 fa20 	bl	800506c <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f7ff fe17 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c44:	f004 fbbc 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c4e:	f7ff fe09 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_TIM1_Init+0x9c>)
 8000c60:	f004 fd92 	bl	8005788 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c6a:	f7ff fdfb 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000448 	.word	0x20000448
 8000c7c:	40012c00 	.word	0x40012c00

08000c80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_TIM_Base_MspInit+0x44>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d113      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_TIM_Base_MspInit+0x48>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_TIM_Base_MspInit+0x48>)
 8000c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x48>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 fbc3 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cb4:	2019      	movs	r0, #25
 8000cb6:	f000 fbdc 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	40021000 	.word	0x40021000

08000ccc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_USART2_UART_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000d04:	f004 fdb0 	bl	8005868 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f7ff fda9 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000490 	.word	0x20000490
 8000d1c:	40004400 	.word	0x40004400

08000d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d12f      	bne.n	8000da0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	61d3      	str	r3, [r2, #28]
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8000d70:	2304      	movs	r3, #4
 8000d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <HAL_UART_MspInit+0x90>)
 8000d84:	f000 fd6a 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x90>)
 8000d9c:	f000 fd5e 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800

08000db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff ff0c 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dba:	490c      	ldr	r1, [pc, #48]	; (8000dec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dd0:	4c09      	ldr	r4, [pc, #36]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f008 f9c1 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fc77 	bl	80006d4 <main>
  bx lr
 8000de6:	4770      	bx	lr
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000df0:	08009dc4 	.word	0x08009dc4
  ldr r2, =_sbss
 8000df4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000df8:	20001c4c 	.word	0x20001c4c

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x28>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 fb07 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff fd62 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fd28 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200004d8 	.word	0x200004d8

08000e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	200004d8 	.word	0x200004d8

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff fff0 	bl	8000e50 <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffe0 	bl	8000e50 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0be      	b.n	800104c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d109      	bne.n	8000ef0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff f96e 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f9ab 	bl	800124c <ADC_ConversionStop_Disable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 8099 	bne.w	800103a <HAL_ADC_Init+0x18e>
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8095 	bne.w	800103a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	f043 0202 	orr.w	r2, r3, #2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_Init+0xa2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_Init+0xa8>
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	e000      	b.n	8000f56 <HAL_ADC_Init+0xaa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d119      	bne.n	8000f98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	035a      	lsls	r2, r3, #13
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e00b      	b.n	8000f98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f043 0220 	orr.w	r2, r3, #32
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_ADC_Init+0x1a8>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d003      	beq.n	8000fd2 <HAL_ADC_Init+0x126>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_Init+0x1ac>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001016:	e018      	b.n	800104a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f023 0312 	bic.w	r3, r3, #18
 8001020:	f043 0210 	orr.w	r2, r3, #16
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001038:	e007      	b.n	800104a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	ffe1f7fd 	.word	0xffe1f7fd
 8001058:	ff1f0efe 	.word	0xff1f0efe

0800105c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_ADC_ConfigChannel+0x20>
 8001078:	2302      	movs	r3, #2
 800107a:	e0dc      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1da>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b06      	cmp	r3, #6
 800108a:	d81c      	bhi.n	80010c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b05      	subs	r3, #5
 800109e:	221f      	movs	r2, #31
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4019      	ands	r1, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b05      	subs	r3, #5
 80010b8:	fa00 f203 	lsl.w	r2, r0, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
 80010c4:	e03c      	b.n	8001140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b0c      	cmp	r3, #12
 80010cc:	d81c      	bhi.n	8001108 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b23      	subs	r3, #35	; 0x23
 80010e0:	221f      	movs	r2, #31
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4019      	ands	r1, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b23      	subs	r3, #35	; 0x23
 80010fa:	fa00 f203 	lsl.w	r2, r0, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
 8001106:	e01b      	b.n	8001140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	3b41      	subs	r3, #65	; 0x41
 800111a:	221f      	movs	r2, #31
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	4019      	ands	r1, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b41      	subs	r3, #65	; 0x41
 8001134:	fa00 f203 	lsl.w	r2, r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d91c      	bls.n	8001182 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68d9      	ldr	r1, [r3, #12]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	3b1e      	subs	r3, #30
 800115a:	2207      	movs	r2, #7
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	4019      	ands	r1, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6898      	ldr	r0, [r3, #8]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	3b1e      	subs	r3, #30
 8001174:	fa00 f203 	lsl.w	r2, r0, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	e019      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6919      	ldr	r1, [r3, #16]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4019      	ands	r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d003      	beq.n	80011c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c2:	2b11      	cmp	r3, #17
 80011c4:	d132      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_ADC_ConfigChannel+0x1e4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d125      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d126      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d11a      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_ADC_ConfigChannel+0x1e8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <HAL_ADC_ConfigChannel+0x1ec>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9a      	lsrs	r2, r3, #18
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800120c:	e002      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3b01      	subs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <HAL_ADC_ConfigChannel+0x1b2>
 800121a:	e007      	b.n	800122c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f043 0220 	orr.w	r2, r3, #32
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40012400 	.word	0x40012400
 8001244:	20000000 	.word	0x20000000
 8001248:	431bde83 	.word	0x431bde83

0800124c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d12e      	bne.n	80012c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001276:	f7ff fdeb 	bl	8000e50 <HAL_GetTick>
 800127a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800127c:	e01b      	b.n	80012b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800127e:	f7ff fde7 	bl	8000e50 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d914      	bls.n	80012b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10d      	bne.n	80012b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e007      	b.n	80012c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d0dc      	beq.n	800127e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <__NVIC_EnableIRQ+0x34>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff4f 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff64 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ffb2 	bl	80013c0 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff81 	bl	800136c <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff57 	bl	8001334 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e043      	b.n	800152e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_DMA_Init+0xa8>)
 80014ae:	4413      	add	r3, r2
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_DMA_Init+0xac>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_DMA_Init+0xb0>)
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	bffdfff8 	.word	0xbffdfff8
 800153c:	cccccccd 	.word	0xcccccccd
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d005      	beq.n	8001568 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2204      	movs	r2, #4
 8001560:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e051      	b.n	800160c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020e 	bic.w	r2, r2, #14
 8001576:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_DMA_Abort_IT+0xd4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d029      	beq.n	80015e6 <HAL_DMA_Abort_IT+0xa2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_DMA_Abort_IT+0xd8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x9e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_DMA_Abort_IT+0xdc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_Abort_IT+0x98>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_DMA_Abort_IT+0xe0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d012      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x92>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <HAL_DMA_Abort_IT+0xe4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00a      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x8c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_DMA_Abort_IT+0xe8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <HAL_DMA_Abort_IT+0x86>
 80015c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015c8:	e00e      	b.n	80015e8 <HAL_DMA_Abort_IT+0xa4>
 80015ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ce:	e00b      	b.n	80015e8 <HAL_DMA_Abort_IT+0xa4>
 80015d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d4:	e008      	b.n	80015e8 <HAL_DMA_Abort_IT+0xa4>
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	e005      	b.n	80015e8 <HAL_DMA_Abort_IT+0xa4>
 80015dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e0:	e002      	b.n	80015e8 <HAL_DMA_Abort_IT+0xa4>
 80015e2:	2310      	movs	r3, #16
 80015e4:	e000      	b.n	80015e8 <HAL_DMA_Abort_IT+0xa4>
 80015e6:	2301      	movs	r3, #1
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <HAL_DMA_Abort_IT+0xec>)
 80015ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
    } 
  }
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020008 	.word	0x40020008
 800161c:	4002001c 	.word	0x4002001c
 8001620:	40020030 	.word	0x40020030
 8001624:	40020044 	.word	0x40020044
 8001628:	40020058 	.word	0x40020058
 800162c:	4002006c 	.word	0x4002006c
 8001630:	40020000 	.word	0x40020000

08001634 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2204      	movs	r2, #4
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d04f      	beq.n	80016fc <HAL_DMA_IRQHandler+0xc8>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d04a      	beq.n	80016fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a66      	ldr	r2, [pc, #408]	; (8001824 <HAL_DMA_IRQHandler+0x1f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d029      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xae>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_DMA_IRQHandler+0x1f4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_IRQHandler+0xaa>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a63      	ldr	r2, [pc, #396]	; (800182c <HAL_DMA_IRQHandler+0x1f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xa4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a62      	ldr	r2, [pc, #392]	; (8001830 <HAL_DMA_IRQHandler+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x9e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_DMA_IRQHandler+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00a      	beq.n	80016cc <HAL_DMA_IRQHandler+0x98>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a5f      	ldr	r2, [pc, #380]	; (8001838 <HAL_DMA_IRQHandler+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x92>
 80016c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c4:	e00e      	b.n	80016e4 <HAL_DMA_IRQHandler+0xb0>
 80016c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ca:	e00b      	b.n	80016e4 <HAL_DMA_IRQHandler+0xb0>
 80016cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016d0:	e008      	b.n	80016e4 <HAL_DMA_IRQHandler+0xb0>
 80016d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016d6:	e005      	b.n	80016e4 <HAL_DMA_IRQHandler+0xb0>
 80016d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016dc:	e002      	b.n	80016e4 <HAL_DMA_IRQHandler+0xb0>
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_IRQHandler+0xb0>
 80016e2:	2304      	movs	r3, #4
 80016e4:	4a55      	ldr	r2, [pc, #340]	; (800183c <HAL_DMA_IRQHandler+0x208>)
 80016e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8094 	beq.w	800181a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016fa:	e08e      	b.n	800181a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	2202      	movs	r2, #2
 8001702:	409a      	lsls	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d056      	beq.n	80017ba <HAL_DMA_IRQHandler+0x186>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d051      	beq.n	80017ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10b      	bne.n	800173c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020a 	bic.w	r2, r2, #10
 8001732:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a38      	ldr	r2, [pc, #224]	; (8001824 <HAL_DMA_IRQHandler+0x1f0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d029      	beq.n	800179a <HAL_DMA_IRQHandler+0x166>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a37      	ldr	r2, [pc, #220]	; (8001828 <HAL_DMA_IRQHandler+0x1f4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d022      	beq.n	8001796 <HAL_DMA_IRQHandler+0x162>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a35      	ldr	r2, [pc, #212]	; (800182c <HAL_DMA_IRQHandler+0x1f8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d01a      	beq.n	8001790 <HAL_DMA_IRQHandler+0x15c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a34      	ldr	r2, [pc, #208]	; (8001830 <HAL_DMA_IRQHandler+0x1fc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d012      	beq.n	800178a <HAL_DMA_IRQHandler+0x156>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a32      	ldr	r2, [pc, #200]	; (8001834 <HAL_DMA_IRQHandler+0x200>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00a      	beq.n	8001784 <HAL_DMA_IRQHandler+0x150>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <HAL_DMA_IRQHandler+0x204>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d102      	bne.n	800177e <HAL_DMA_IRQHandler+0x14a>
 8001778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800177c:	e00e      	b.n	800179c <HAL_DMA_IRQHandler+0x168>
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	e00b      	b.n	800179c <HAL_DMA_IRQHandler+0x168>
 8001784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001788:	e008      	b.n	800179c <HAL_DMA_IRQHandler+0x168>
 800178a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178e:	e005      	b.n	800179c <HAL_DMA_IRQHandler+0x168>
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	e002      	b.n	800179c <HAL_DMA_IRQHandler+0x168>
 8001796:	2320      	movs	r3, #32
 8001798:	e000      	b.n	800179c <HAL_DMA_IRQHandler+0x168>
 800179a:	2302      	movs	r3, #2
 800179c:	4a27      	ldr	r2, [pc, #156]	; (800183c <HAL_DMA_IRQHandler+0x208>)
 800179e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d034      	beq.n	800181a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017b8:	e02f      	b.n	800181a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2208      	movs	r2, #8
 80017c0:	409a      	lsls	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d028      	beq.n	800181c <HAL_DMA_IRQHandler+0x1e8>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020e 	bic.w	r2, r2, #14
 80017e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
    }
  }
  return;
 800181a:	bf00      	nop
 800181c:	bf00      	nop
}
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40020008 	.word	0x40020008
 8001828:	4002001c 	.word	0x4002001c
 800182c:	40020030 	.word	0x40020030
 8001830:	40020044 	.word	0x40020044
 8001834:	40020058 	.word	0x40020058
 8001838:	4002006c 	.word	0x4002006c
 800183c:	40020000 	.word	0x40020000

08001840 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184e:	b2db      	uxtb	r3, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e169      	b.n	8001b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001870:	2201      	movs	r2, #1
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8158 	bne.w	8001b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a9a      	ldr	r2, [pc, #616]	; (8001afc <HAL_GPIO_Init+0x2a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d05e      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 8001898:	4a98      	ldr	r2, [pc, #608]	; (8001afc <HAL_GPIO_Init+0x2a0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d875      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 800189e:	4a98      	ldr	r2, [pc, #608]	; (8001b00 <HAL_GPIO_Init+0x2a4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d058      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018a4:	4a96      	ldr	r2, [pc, #600]	; (8001b00 <HAL_GPIO_Init+0x2a4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d86f      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018aa:	4a96      	ldr	r2, [pc, #600]	; (8001b04 <HAL_GPIO_Init+0x2a8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d052      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018b0:	4a94      	ldr	r2, [pc, #592]	; (8001b04 <HAL_GPIO_Init+0x2a8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d869      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018b6:	4a94      	ldr	r2, [pc, #592]	; (8001b08 <HAL_GPIO_Init+0x2ac>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d04c      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018bc:	4a92      	ldr	r2, [pc, #584]	; (8001b08 <HAL_GPIO_Init+0x2ac>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d863      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018c2:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d046      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018c8:	4a90      	ldr	r2, [pc, #576]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d85d      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d82a      	bhi.n	8001928 <HAL_GPIO_Init+0xcc>
 80018d2:	2b12      	cmp	r3, #18
 80018d4:	d859      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <HAL_GPIO_Init+0x80>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001931 	.word	0x08001931
 80018e4:	08001943 	.word	0x08001943
 80018e8:	08001985 	.word	0x08001985
 80018ec:	0800198b 	.word	0x0800198b
 80018f0:	0800198b 	.word	0x0800198b
 80018f4:	0800198b 	.word	0x0800198b
 80018f8:	0800198b 	.word	0x0800198b
 80018fc:	0800198b 	.word	0x0800198b
 8001900:	0800198b 	.word	0x0800198b
 8001904:	0800198b 	.word	0x0800198b
 8001908:	0800198b 	.word	0x0800198b
 800190c:	0800198b 	.word	0x0800198b
 8001910:	0800198b 	.word	0x0800198b
 8001914:	0800198b 	.word	0x0800198b
 8001918:	0800198b 	.word	0x0800198b
 800191c:	0800198b 	.word	0x0800198b
 8001920:	08001939 	.word	0x08001939
 8001924:	0800194d 	.word	0x0800194d
 8001928:	4a79      	ldr	r2, [pc, #484]	; (8001b10 <HAL_GPIO_Init+0x2b4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800192e:	e02c      	b.n	800198a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e029      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	3304      	adds	r3, #4
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e024      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	3308      	adds	r3, #8
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e01f      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	330c      	adds	r3, #12
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e01a      	b.n	800198c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800195e:	2304      	movs	r3, #4
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e013      	b.n	800198c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800196c:	2308      	movs	r3, #8
 800196e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	611a      	str	r2, [r3, #16]
          break;
 8001976:	e009      	b.n	800198c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	615a      	str	r2, [r3, #20]
          break;
 8001982:	e003      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x130>
          break;
 800198a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d801      	bhi.n	8001996 <HAL_GPIO_Init+0x13a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	e001      	b.n	800199a <HAL_GPIO_Init+0x13e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3304      	adds	r3, #4
 800199a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d802      	bhi.n	80019a8 <HAL_GPIO_Init+0x14c>
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0x152>
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3b08      	subs	r3, #8
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	210f      	movs	r1, #15
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80b1 	beq.w	8001b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_GPIO_Init+0x2b8>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <HAL_GPIO_Init+0x2b8>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_GPIO_Init+0x2b8>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f4:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2bc>)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a40      	ldr	r2, [pc, #256]	; (8001b1c <HAL_GPIO_Init+0x2c0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_GPIO_Init+0x1ec>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3f      	ldr	r2, [pc, #252]	; (8001b20 <HAL_GPIO_Init+0x2c4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00d      	beq.n	8001a44 <HAL_GPIO_Init+0x1e8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <HAL_GPIO_Init+0x2c8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d007      	beq.n	8001a40 <HAL_GPIO_Init+0x1e4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <HAL_GPIO_Init+0x2cc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_GPIO_Init+0x1e0>
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x1ee>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x1ee>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x1ee>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x1ee>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5a:	492f      	ldr	r1, [pc, #188]	; (8001b18 <HAL_GPIO_Init+0x2bc>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	492c      	ldr	r1, [pc, #176]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4928      	ldr	r1, [pc, #160]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	4922      	ldr	r1, [pc, #136]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	491e      	ldr	r1, [pc, #120]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4918      	ldr	r1, [pc, #96]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4914      	ldr	r1, [pc, #80]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d021      	beq.n	8001b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
 8001af8:	e021      	b.n	8001b3e <HAL_GPIO_Init+0x2e2>
 8001afa:	bf00      	nop
 8001afc:	10320000 	.word	0x10320000
 8001b00:	10310000 	.word	0x10310000
 8001b04:	10220000 	.word	0x10220000
 8001b08:	10210000 	.word	0x10210000
 8001b0c:	10120000 	.word	0x10120000
 8001b10:	10110000 	.word	0x10110000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40010800 	.word	0x40010800
 8001b20:	40010c00 	.word	0x40010c00
 8001b24:	40011000 	.word	0x40011000
 8001b28:	40011400 	.word	0x40011400
 8001b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4909      	ldr	r1, [pc, #36]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f47f ae8e 	bne.w	8001870 <HAL_GPIO_Init+0x14>
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	372c      	adds	r7, #44	; 0x2c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	807b      	strh	r3, [r7, #2]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba2:	787b      	ldrb	r3, [r7, #1]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba8:	887a      	ldrh	r2, [r7, #2]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bae:	e003      	b.n	8001bb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	041a      	lsls	r2, r3, #16
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	400b      	ands	r3, r1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f006 fe22 	bl	800885c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e12b      	b.n	8001e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fc2c 	bl	80004a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c88:	f003 f8c4 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4a81      	ldr	r2, [pc, #516]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d807      	bhi.n	8001ca8 <HAL_I2C_Init+0x84>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a80      	ldr	r2, [pc, #512]	; (8001e9c <HAL_I2C_Init+0x278>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e006      	b.n	8001cb6 <HAL_I2C_Init+0x92>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <HAL_I2C_Init+0x27c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0e7      	b.n	8001e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <HAL_I2C_Init+0x280>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_I2C_Init+0xd4>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	e009      	b.n	8001d0c <HAL_I2C_Init+0xe8>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <HAL_I2C_Init+0x284>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	495c      	ldr	r1, [pc, #368]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d819      	bhi.n	8001d60 <HAL_I2C_Init+0x13c>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e59      	subs	r1, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3a:	1c59      	adds	r1, r3, #1
 8001d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d40:	400b      	ands	r3, r1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_I2C_Init+0x138>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e59      	subs	r1, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5a:	e051      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	e04f      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_I2C_Init+0x168>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e012      	b.n	8001db2 <HAL_I2C_Init+0x18e>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Init+0x196>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e022      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10e      	bne.n	8001de0 <HAL_I2C_Init+0x1bc>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e58      	subs	r0, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	440b      	add	r3, r1
 8001dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dde:	e00f      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	0099      	lsls	r1, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	6809      	ldr	r1, [r1, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6911      	ldr	r1, [r2, #16]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68d2      	ldr	r2, [r2, #12]
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	000186a0 	.word	0x000186a0
 8001e9c:	001e847f 	.word	0x001e847f
 8001ea0:	003d08ff 	.word	0x003d08ff
 8001ea4:	431bde83 	.word	0x431bde83
 8001ea8:	10624dd3 	.word	0x10624dd3

08001eac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d103      	bne.n	8001eca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	817b      	strh	r3, [r7, #10]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	813b      	strh	r3, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eee:	f7fe ffaf 	bl	8000e50 <HAL_GetTick>
 8001ef2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	f040 80d9 	bne.w	80020b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2319      	movs	r3, #25
 8001f08:	2201      	movs	r2, #1
 8001f0a:	496d      	ldr	r1, [pc, #436]	; (80020c0 <HAL_I2C_Mem_Write+0x1ec>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f002 f933 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e0cc      	b.n	80020b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_Mem_Write+0x56>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e0c5      	b.n	80020b6 <HAL_I2C_Mem_Write+0x1e2>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d007      	beq.n	8001f50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2221      	movs	r2, #33	; 0x21
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a3a      	ldr	r2, [r7, #32]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_I2C_Mem_Write+0x1f0>)
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f92:	88f8      	ldrh	r0, [r7, #6]
 8001f94:	893a      	ldrh	r2, [r7, #8]
 8001f96:	8979      	ldrh	r1, [r7, #10]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f001 fec2 	bl	8003d2c <I2C_RequestMemoryWrite>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d052      	beq.n	8002054 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e081      	b.n	80020b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f002 f9f8 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00d      	beq.n	8001fde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d107      	bne.n	8001fda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06b      	b.n	80020b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b04      	cmp	r3, #4
 800201a:	d11b      	bne.n	8002054 <HAL_I2C_Mem_Write+0x180>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	d017      	beq.n	8002054 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	781a      	ldrb	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1aa      	bne.n	8001fb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f002 f9eb 	bl	800443c <I2C_WaitOnBTFFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	2b04      	cmp	r3, #4
 8002072:	d107      	bne.n	8002084 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002082:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e016      	b.n	80020b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
  }
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	00100002 	.word	0x00100002
 80020c4:	ffff0000 	.word	0xffff0000

080020c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	460b      	mov	r3, r1
 80020dc:	813b      	strh	r3, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e6:	f7fe feb3 	bl	8000e50 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	f040 8244 	bne.w	8002582 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2319      	movs	r3, #25
 8002100:	2201      	movs	r2, #1
 8002102:	4982      	ldr	r1, [pc, #520]	; (800230c <HAL_I2C_Mem_Read+0x244>)
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f002 f837 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002110:	2302      	movs	r3, #2
 8002112:	e237      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Mem_Read+0x5a>
 800211e:	2302      	movs	r3, #2
 8002120:	e230      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d007      	beq.n	8002148 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2222      	movs	r2, #34	; 0x22
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a62      	ldr	r2, [pc, #392]	; (8002310 <HAL_I2C_Mem_Read+0x248>)
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800218a:	88f8      	ldrh	r0, [r7, #6]
 800218c:	893a      	ldrh	r2, [r7, #8]
 800218e:	8979      	ldrh	r1, [r7, #10]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4603      	mov	r3, r0
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f001 fe5c 	bl	8003e58 <I2C_RequestMemoryRead>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e1ec      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d113      	bne.n	80021da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e1c0      	b.n	800255c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d11e      	bne.n	8002220 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021f2:	b672      	cpsid	i
}
 80021f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800221c:	b662      	cpsie	i
}
 800221e:	e035      	b.n	800228c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b02      	cmp	r3, #2
 8002226:	d11e      	bne.n	8002266 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002236:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002262:	b662      	cpsie	i
}
 8002264:	e012      	b.n	800228c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002274:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800228c:	e166      	b.n	800255c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	2b03      	cmp	r3, #3
 8002294:	f200 811f 	bhi.w	80024d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	2b01      	cmp	r3, #1
 800229e:	d123      	bne.n	80022e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f002 f943 	bl	8004530 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e167      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022e6:	e139      	b.n	800255c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d152      	bne.n	8002396 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	2200      	movs	r2, #0
 80022f8:	4906      	ldr	r1, [pc, #24]	; (8002314 <HAL_I2C_Mem_Read+0x24c>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f001 ff3c 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e13c      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
 800230a:	bf00      	nop
 800230c:	00100002 	.word	0x00100002
 8002310:	ffff0000 	.word	0xffff0000
 8002314:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002318:	b672      	cpsid	i
}
 800231a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800235e:	b662      	cpsie	i
}
 8002360:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002394:	e0e2      	b.n	800255c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	2200      	movs	r2, #0
 800239e:	497b      	ldr	r1, [pc, #492]	; (800258c <HAL_I2C_Mem_Read+0x4c4>)
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f001 fee9 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0e9      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023f6:	4b66      	ldr	r3, [pc, #408]	; (8002590 <HAL_I2C_Mem_Read+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	08db      	lsrs	r3, r3, #3
 80023fc:	4a65      	ldr	r2, [pc, #404]	; (8002594 <HAL_I2C_Mem_Read+0x4cc>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0a1a      	lsrs	r2, r3, #8
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00da      	lsls	r2, r3, #3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	3b01      	subs	r3, #1
 8002414:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d118      	bne.n	800244e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f043 0220 	orr.w	r2, r3, #32
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800243e:	b662      	cpsie	i
}
 8002440:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e09a      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d1d9      	bne.n	8002410 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800249e:	b662      	cpsie	i
}
 80024a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d4:	e042      	b.n	800255c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f002 f828 	bl	8004530 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e04c      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d118      	bne.n	800255c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f ae94 	bne.w	800228e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	00010004 	.word	0x00010004
 8002590:	20000000 	.word	0x20000000
 8002594:	14f8b589 	.word	0x14f8b589

08002598 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d003      	beq.n	80025d0 <HAL_I2C_EV_IRQHandler+0x38>
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	f040 80b1 	bne.w	8002732 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_I2C_EV_IRQHandler+0x6e>
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80025f0:	d003      	beq.n	80025fa <HAL_I2C_EV_IRQHandler+0x62>
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_EV_IRQHandler+0x66>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_I2C_EV_IRQHandler+0x68>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b01      	cmp	r3, #1
 8002602:	f000 8114 	beq.w	800282e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_I2C_EV_IRQHandler+0x90>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f002 f813 	bl	8004646 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fd60 	bl	80030e6 <I2C_Master_SB>
 8002626:	e083      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_I2C_EV_IRQHandler+0xac>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fdd7 	bl	80031f0 <I2C_Master_ADD10>
 8002642:	e075      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0xc8>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fdf2 	bl	8003242 <I2C_Master_ADDR>
 800265e:	e067      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002678:	f000 80db 	beq.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9d4 	bl	8002a48 <I2C_MasterTransmit_TXE>
 80026a0:	e046      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80c2 	beq.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80bc 	beq.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80026ba:	7bbb      	ldrb	r3, [r7, #14]
 80026bc:	2b21      	cmp	r3, #33	; 0x21
 80026be:	d103      	bne.n	80026c8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa5d 	bl	8002b80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c6:	e0b4      	b.n	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	f040 80b1 	bne.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 facb 	bl	8002c6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d6:	e0ac      	b.n	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e6:	f000 80a4 	beq.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <HAL_I2C_EV_IRQHandler+0x178>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_I2C_EV_IRQHandler+0x178>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fb47 	bl	8002d9c <I2C_MasterReceive_RXNE>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 808b 	beq.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8085 	beq.w	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fbf2 	bl	8002f12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800272e:	e080      	b.n	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
 8002730:	e07f      	b.n	8002832 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e007      	b.n	8002754 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d011      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x1ea>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 ffb8 	bl	80036f0 <I2C_Slave_ADDR>
 8002780:	e05a      	b.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_I2C_EV_IRQHandler+0x206>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fff2 	bl	8003780 <I2C_Slave_STOPF>
 800279c:	e04c      	b.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	2b21      	cmp	r3, #33	; 0x21
 80027a2:	d002      	beq.n	80027aa <HAL_I2C_EV_IRQHandler+0x212>
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	2b29      	cmp	r3, #41	; 0x29
 80027a8:	d120      	bne.n	80027ec <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_I2C_EV_IRQHandler+0x238>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_I2C_EV_IRQHandler+0x238>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fed5 	bl	8003578 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ce:	e032      	b.n	8002836 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02d      	beq.n	8002836 <HAL_I2C_EV_IRQHandler+0x29e>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d028      	beq.n	8002836 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 ff04 	bl	80035f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ea:	e024      	b.n	8002836 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <HAL_I2C_EV_IRQHandler+0x27a>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_I2C_EV_IRQHandler+0x27a>
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 ff11 	bl	8003632 <I2C_SlaveReceive_RXNE>
 8002810:	e012      	b.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 ff41 	bl	80036ae <I2C_SlaveReceive_BTF>
 800282c:	e004      	b.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002836:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b08a      	sub	sp, #40	; 0x28
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002860:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_I2C_ER_IRQHandler+0x5a>
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002886:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_I2C_ER_IRQHandler+0x80>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80028bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03e      	beq.n	8002946 <HAL_I2C_ER_IRQHandler+0x108>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d039      	beq.n	8002946 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80028d2:	7efb      	ldrb	r3, [r7, #27]
 80028d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028ec:	7ebb      	ldrb	r3, [r7, #26]
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d112      	bne.n	8002918 <HAL_I2C_ER_IRQHandler+0xda>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <HAL_I2C_ER_IRQHandler+0xda>
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	2b21      	cmp	r3, #33	; 0x21
 80028fc:	d008      	beq.n	8002910 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b29      	cmp	r3, #41	; 0x29
 8002902:	d005      	beq.n	8002910 <HAL_I2C_ER_IRQHandler+0xd2>
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	2b28      	cmp	r3, #40	; 0x28
 8002908:	d106      	bne.n	8002918 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b21      	cmp	r3, #33	; 0x21
 800290e:	d103      	bne.n	8002918 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f001 f865 	bl	80039e0 <I2C_Slave_AF>
 8002916:	e016      	b.n	8002946 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002920:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800292a:	7efb      	ldrb	r3, [r7, #27]
 800292c:	2b10      	cmp	r3, #16
 800292e:	d002      	beq.n	8002936 <HAL_I2C_ER_IRQHandler+0xf8>
 8002930:	7efb      	ldrb	r3, [r7, #27]
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d107      	bne.n	8002946 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002944:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <HAL_I2C_ER_IRQHandler+0x12e>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800296a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f001 f8a2 	bl	8003ac8 <I2C_ITError>
  }
}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
 80029e0:	4613      	mov	r3, r2
 80029e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d150      	bne.n	8002b10 <I2C_MasterTransmit_TXE+0xc8>
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b21      	cmp	r3, #33	; 0x21
 8002a72:	d14d      	bne.n	8002b10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d01d      	beq.n	8002ab6 <I2C_MasterTransmit_TXE+0x6e>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d01a      	beq.n	8002ab6 <I2C_MasterTransmit_TXE+0x6e>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a86:	d016      	beq.n	8002ab6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2211      	movs	r2, #17
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff6c 	bl	800298c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ab4:	e060      	b.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ac4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d107      	bne.n	8002b00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff81 	bl	8002a00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002afe:	e03b      	b.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff3f 	bl	800298c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b0e:	e033      	b.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b21      	cmp	r3, #33	; 0x21
 8002b14:	d005      	beq.n	8002b22 <I2C_MasterTransmit_TXE+0xda>
 8002b16:	7bbb      	ldrb	r3, [r7, #14]
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d12d      	bne.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b22      	cmp	r3, #34	; 0x22
 8002b20:	d12a      	bne.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b3c:	e01c      	b.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d103      	bne.n	8002b52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f88e 	bl	8002c6c <I2C_MemoryTransmit_TXE_BTF>
}
 8002b50:	e012      	b.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b76:	e7ff      	b.n	8002b78 <I2C_MasterTransmit_TXE+0x130>
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b21      	cmp	r3, #33	; 0x21
 8002b98:	d164      	bne.n	8002c64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002bc8:	e04c      	b.n	8002c64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d01d      	beq.n	8002c0c <I2C_MasterTransmit_BTF+0x8c>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d01a      	beq.n	8002c0c <I2C_MasterTransmit_BTF+0x8c>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bdc:	d016      	beq.n	8002c0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2211      	movs	r2, #17
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff fec1 	bl	800298c <HAL_I2C_MasterTxCpltCallback>
}
 8002c0a:	e02b      	b.n	8002c64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d107      	bne.n	8002c56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fed6 	bl	8002a00 <HAL_I2C_MemTxCpltCallback>
}
 8002c54:	e006      	b.n	8002c64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fe94 	bl	800298c <HAL_I2C_MasterTxCpltCallback>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d11d      	bne.n	8002cc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10b      	bne.n	8002ca4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002ca2:	e077      	b.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	121b      	asrs	r3, r3, #8
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cbe:	e069      	b.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10b      	bne.n	8002ce0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cde:	e059      	b.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d152      	bne.n	8002d8e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b22      	cmp	r3, #34	; 0x22
 8002cec:	d10d      	bne.n	8002d0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d08:	e044      	b.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b21      	cmp	r3, #33	; 0x21
 8002d18:	d112      	bne.n	8002d40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d3e:	e029      	b.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d124      	bne.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b21      	cmp	r3, #33	; 0x21
 8002d4e:	d121      	bne.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fe3a 	bl	8002a00 <HAL_I2C_MemTxCpltCallback>
}
 8002d8c:	e002      	b.n	8002d94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff f88c 	bl	8001eac <I2C_Flush_DR>
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b22      	cmp	r3, #34	; 0x22
 8002dae:	f040 80ac 	bne.w	8002f0a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d921      	bls.n	8002e04 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	f040 808c 	bne.w	8002f0a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002e02:	e082      	b.n	8002f0a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d075      	beq.n	8002ef8 <I2C_MasterReceive_RXNE+0x15c>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <I2C_MasterReceive_RXNE+0x7c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d16f      	bne.n	8002ef8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f001 fb57 	bl	80044cc <I2C_WaitOnSTOPRequestThroughIT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d142      	bne.n	8002eaa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e32:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d10a      	bne.n	8002e94 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fdc0 	bl	8002a12 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e92:	e03a      	b.n	8002f0a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2212      	movs	r2, #18
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fd7b 	bl	800299e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ea8:	e02f      	b.n	8002f0a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eb8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fd97 	bl	8002a24 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ef6:	e008      	b.n	8002f0a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	605a      	str	r2, [r3, #4]
}
 8002f08:	e7ff      	b.n	8002f0a <I2C_MasterReceive_RXNE+0x16e>
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d11b      	bne.n	8002f62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f60:	e0bd      	b.n	80030de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d129      	bne.n	8002fc0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00a      	beq.n	8002f98 <I2C_MasterReceive_BTF+0x86>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d007      	beq.n	8002f98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fbe:	e08e      	b.n	80030de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d176      	bne.n	80030b8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d002      	beq.n	8002fd6 <I2C_MasterReceive_BTF+0xc4>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d108      	bne.n	8002fe8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e019      	b.n	800301c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d002      	beq.n	8002ff4 <I2C_MasterReceive_BTF+0xe2>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d108      	bne.n	8003006 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e00a      	b.n	800301c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b10      	cmp	r3, #16
 800300a:	d007      	beq.n	800301c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003076:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d10a      	bne.n	80030a2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fcb9 	bl	8002a12 <HAL_I2C_MemRxCpltCallback>
}
 80030a0:	e01d      	b.n	80030de <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2212      	movs	r2, #18
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fc74 	bl	800299e <HAL_I2C_MasterRxCpltCallback>
}
 80030b6:	e012      	b.n	80030de <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d117      	bne.n	800312a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003112:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003114:	e067      	b.n	80031e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	611a      	str	r2, [r3, #16]
}
 8003128:	e05d      	b.n	80031e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003132:	d133      	bne.n	800319c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b21      	cmp	r3, #33	; 0x21
 800313e:	d109      	bne.n	8003154 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003150:	611a      	str	r2, [r3, #16]
 8003152:	e008      	b.n	8003166 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <I2C_Master_SB+0x92>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	2b00      	cmp	r3, #0
 800317e:	d032      	beq.n	80031e6 <I2C_Master_SB+0x100>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02d      	beq.n	80031e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003198:	605a      	str	r2, [r3, #4]
}
 800319a:	e024      	b.n	80031e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10e      	bne.n	80031c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	11db      	asrs	r3, r3, #7
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 0306 	and.w	r3, r3, #6
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f063 030f 	orn	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]
}
 80031c0:	e011      	b.n	80031e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d10d      	bne.n	80031e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	11db      	asrs	r3, r3, #7
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f003 0306 	and.w	r3, r3, #6
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f063 030e 	orn	r3, r3, #14
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	611a      	str	r2, [r3, #16]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <I2C_Master_ADD10+0x26>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <I2C_Master_ADD10+0x48>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003236:	605a      	str	r2, [r3, #4]
  }
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003242:	b480      	push	{r7}
 8003244:	b091      	sub	sp, #68	; 0x44
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003250:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b22      	cmp	r3, #34	; 0x22
 800326a:	f040 8174 	bne.w	8003556 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <I2C_Master_ADDR+0x54>
 8003276:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d10b      	bne.n	8003296 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	e16b      	b.n	800356e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11d      	bne.n	80032da <I2C_Master_ADDR+0x98>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032a6:	d118      	bne.n	80032da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	651a      	str	r2, [r3, #80]	; 0x50
 80032d8:	e149      	b.n	800356e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d113      	bne.n	800330c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e4:	2300      	movs	r3, #0
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e120      	b.n	800354e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	f040 808a 	bne.w	800342c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800331e:	d137      	bne.n	8003390 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d113      	bne.n	8003368 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	e0f2      	b.n	800354e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e0de      	b.n	800354e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	2b08      	cmp	r3, #8
 8003394:	d02e      	beq.n	80033f4 <I2C_Master_ADDR+0x1b2>
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	2b20      	cmp	r3, #32
 800339a:	d02b      	beq.n	80033f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d102      	bne.n	80033a8 <I2C_Master_ADDR+0x166>
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d125      	bne.n	80033f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d00e      	beq.n	80033cc <I2C_Master_ADDR+0x18a>
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d00b      	beq.n	80033cc <I2C_Master_ADDR+0x18a>
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d008      	beq.n	80033cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e007      	b.n	80033dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	e0ac      	b.n	800354e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e090      	b.n	800354e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d158      	bne.n	80034e8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	2b04      	cmp	r3, #4
 800343a:	d021      	beq.n	8003480 <I2C_Master_ADDR+0x23e>
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	2b02      	cmp	r3, #2
 8003440:	d01e      	beq.n	8003480 <I2C_Master_ADDR+0x23e>
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	2b10      	cmp	r3, #16
 8003446:	d01b      	beq.n	8003480 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e012      	b.n	80034a6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800348e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d14b      	bne.n	800354e <I2C_Master_ADDR+0x30c>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034bc:	d00b      	beq.n	80034d6 <I2C_Master_ADDR+0x294>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d008      	beq.n	80034d6 <I2C_Master_ADDR+0x294>
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d005      	beq.n	80034d6 <I2C_Master_ADDR+0x294>
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d002      	beq.n	80034d6 <I2C_Master_ADDR+0x294>
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d13b      	bne.n	800354e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e032      	b.n	800354e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003506:	d117      	bne.n	8003538 <I2C_Master_ADDR+0x2f6>
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800350e:	d00b      	beq.n	8003528 <I2C_Master_ADDR+0x2e6>
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2b01      	cmp	r3, #1
 8003514:	d008      	beq.n	8003528 <I2C_Master_ADDR+0x2e6>
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2b08      	cmp	r3, #8
 800351a:	d005      	beq.n	8003528 <I2C_Master_ADDR+0x2e6>
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b10      	cmp	r3, #16
 8003520:	d002      	beq.n	8003528 <I2C_Master_ADDR+0x2e6>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b20      	cmp	r3, #32
 8003526:	d107      	bne.n	8003538 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003536:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003554:	e00b      	b.n	800356e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
}
 800356c:	e7ff      	b.n	800356e <I2C_Master_ADDR+0x32c>
 800356e:	bf00      	nop
 8003570:	3744      	adds	r7, #68	; 0x44
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02b      	beq.n	80035ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d114      	bne.n	80035ea <I2C_SlaveTransmit_TXE+0x72>
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	2b29      	cmp	r3, #41	; 0x29
 80035c4:	d111      	bne.n	80035ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2221      	movs	r2, #33	; 0x21
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2228      	movs	r2, #40	; 0x28
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff f9e3 	bl	80029b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d011      	beq.n	8003628 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d02c      	beq.n	80036a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d114      	bne.n	80036a6 <I2C_SlaveReceive_RXNE+0x74>
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b2a      	cmp	r3, #42	; 0x2a
 8003680:	d111      	bne.n	80036a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003690:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2222      	movs	r2, #34	; 0x22
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2228      	movs	r2, #40	; 0x28
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff f98e 	bl	80029c2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370a:	2b28      	cmp	r3, #40	; 0x28
 800370c:	d125      	bne.n	800375a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	81bb      	strh	r3, [r7, #12]
 800373c:	e002      	b.n	8003744 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800374c:	89ba      	ldrh	r2, [r7, #12]
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f93e 	bl	80029d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003758:	e00e      	b.n	8003778 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800379e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d172      	bne.n	80038c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b22      	cmp	r3, #34	; 0x22
 80037e2:	d002      	beq.n	80037ea <I2C_Slave_STOPF+0x6a>
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b2a      	cmp	r3, #42	; 0x2a
 80037e8:	d135      	bne.n	8003856 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe f80c 	bl	8001840 <HAL_DMA_GetState>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d049      	beq.n	80038c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <I2C_Slave_STOPF+0x258>)
 8003834:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fe82 	bl	8001544 <HAL_DMA_Abort_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d03d      	beq.n	80038c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003854:	e035      	b.n	80038c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0204 	orr.w	r2, r3, #4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003888:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd ffd6 	bl	8001840 <HAL_DMA_GetState>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d014      	beq.n	80038c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	4a4e      	ldr	r2, [pc, #312]	; (80039d8 <I2C_Slave_STOPF+0x258>)
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fe4c 	bl	8001544 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
 80038c0:	e000      	b.n	80038c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d03e      	beq.n	800394c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d112      	bne.n	8003902 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d112      	bne.n	8003936 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8b7 	bl	8003ac8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800395a:	e039      	b.n	80039d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b2a      	cmp	r3, #42	; 0x2a
 8003960:	d109      	bne.n	8003976 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2228      	movs	r2, #40	; 0x28
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff f826 	bl	80029c2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b28      	cmp	r3, #40	; 0x28
 8003980:	d111      	bne.n	80039a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <I2C_Slave_STOPF+0x25c>)
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff f825 	bl	80029ee <HAL_I2C_ListenCpltCallback>
}
 80039a4:	e014      	b.n	80039d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	d002      	beq.n	80039b4 <I2C_Slave_STOPF+0x234>
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b22      	cmp	r3, #34	; 0x22
 80039b2:	d10d      	bne.n	80039d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fe fff9 	bl	80029c2 <HAL_I2C_SlaveRxCpltCallback>
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08004029 	.word	0x08004029
 80039dc:	ffff0000 	.word	0xffff0000

080039e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d002      	beq.n	8003a02 <I2C_Slave_AF+0x22>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d129      	bne.n	8003a56 <I2C_Slave_AF+0x76>
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b28      	cmp	r3, #40	; 0x28
 8003a06:	d126      	bne.n	8003a56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <I2C_Slave_AF+0xe4>)
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe ffcd 	bl	80029ee <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a54:	e031      	b.n	8003aba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b21      	cmp	r3, #33	; 0x21
 8003a5a:	d129      	bne.n	8003ab0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <I2C_Slave_AF+0xe4>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe fa02 	bl	8001eac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fe ff81 	bl	80029b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003aae:	e004      	b.n	8003aba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab8:	615a      	str	r2, [r3, #20]
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	ffff0000 	.word	0xffff0000

08003ac8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ade:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d002      	beq.n	8003aec <I2C_ITError+0x24>
 8003ae6:	7bbb      	ldrb	r3, [r7, #14]
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d10a      	bne.n	8003b02 <I2C_ITError+0x3a>
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b22      	cmp	r3, #34	; 0x22
 8003af0:	d107      	bne.n	8003b02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b08:	2b28      	cmp	r3, #40	; 0x28
 8003b0a:	d107      	bne.n	8003b1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2228      	movs	r2, #40	; 0x28
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b1a:	e015      	b.n	8003b48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2a:	d00a      	beq.n	8003b42 <I2C_ITError+0x7a>
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b60      	cmp	r3, #96	; 0x60
 8003b30:	d007      	beq.n	8003b42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b56:	d162      	bne.n	8003c1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d020      	beq.n	8003bb8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	4a6a      	ldr	r2, [pc, #424]	; (8003d24 <I2C_ITError+0x25c>)
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fcde 	bl	8001544 <HAL_DMA_Abort_IT>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8089 	beq.w	8003ca2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4798      	blx	r3
 8003bb6:	e074      	b.n	8003ca2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	4a59      	ldr	r2, [pc, #356]	; (8003d24 <I2C_ITError+0x25c>)
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd fcbd 	bl	8001544 <HAL_DMA_Abort_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d068      	beq.n	8003ca2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d10b      	bne.n	8003bf6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
 8003c1c:	e041      	b.n	8003ca2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b60      	cmp	r3, #96	; 0x60
 8003c28:	d125      	bne.n	8003c76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d10b      	bne.n	8003c5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe fee1 	bl	8002a36 <HAL_I2C_AbortCpltCallback>
 8003c74:	e015      	b.n	8003ca2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d10b      	bne.n	8003c9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fe fec1 	bl	8002a24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d113      	bne.n	8003d1c <I2C_ITError+0x254>
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b28      	cmp	r3, #40	; 0x28
 8003cf8:	d110      	bne.n	8003d1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <I2C_ITError+0x260>)
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fe fe69 	bl	80029ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08004029 	.word	0x08004029
 8003d28:	ffff0000 	.word	0xffff0000

08003d2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	813b      	strh	r3, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fa08 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d103      	bne.n	8003d86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e05f      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	492d      	ldr	r1, [pc, #180]	; (8003e54 <I2C_RequestMemoryWrite+0x128>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa63 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e04c      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 faee 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02b      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	e021      	b.n	8003e48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fac8 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e005      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3e:	893b      	ldrh	r3, [r7, #8]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	00010002 	.word	0x00010002

08003e58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f96a 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d103      	bne.n	8003ec2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0aa      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	4952      	ldr	r1, [pc, #328]	; (8004024 <I2C_RequestMemoryRead+0x1cc>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f9c5 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e097      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa50 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e076      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	e021      	b.n	8003f84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fa2a 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e050      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fa0f 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d107      	bne.n	8003fac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e035      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f8d3 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe6:	d103      	bne.n	8003ff0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e013      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	4906      	ldr	r1, [pc, #24]	; (8004024 <I2C_RequestMemoryRead+0x1cc>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f92e 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	00010002 	.word	0x00010002

08004028 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004042:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <I2C_DMAAbort+0x148>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	4a4a      	ldr	r2, [pc, #296]	; (8004174 <I2C_DMAAbort+0x14c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a1a      	lsrs	r2, r3, #8
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00da      	lsls	r2, r3, #3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800406e:	e00a      	b.n	8004086 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3b01      	subs	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004084:	d0ea      	beq.n	800405c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	2200      	movs	r2, #0
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	2200      	movs	r2, #0
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	2200      	movs	r2, #0
 80040da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b60      	cmp	r3, #96	; 0x60
 80040f6:	d10e      	bne.n	8004116 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7fe fc91 	bl	8002a36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004114:	e027      	b.n	8004166 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800411c:	2b28      	cmp	r3, #40	; 0x28
 800411e:	d117      	bne.n	8004150 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2228      	movs	r2, #40	; 0x28
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800414e:	e007      	b.n	8004160 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7fe fc5f 	bl	8002a24 <HAL_I2C_ErrorCallback>
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000
 8004174:	14f8b589 	.word	0x14f8b589

08004178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004188:	e048      	b.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d044      	beq.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fc fe5d 	bl	8000e50 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d139      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10d      	bne.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	e00c      	b.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	43da      	mvns	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d116      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e023      	b.n	8004264 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10d      	bne.n	8004242 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	43da      	mvns	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	e00c      	b.n	800425c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	43da      	mvns	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	429a      	cmp	r2, r3
 8004260:	d093      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800427a:	e071      	b.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428a:	d123      	bne.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e067      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d041      	beq.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fc fdb8 	bl	8000e50 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d136      	bne.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10c      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e00b      	b.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e021      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10c      	bne.n	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	43da      	mvns	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e00b      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f af6d 	bne.w	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	e034      	b.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f915 	bl	80045ea <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e034      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d028      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fc fd3d 	bl	8000e50 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11d      	bne.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	d016      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d1c3      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004448:	e034      	b.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f8cd 	bl	80045ea <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e034      	b.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d028      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fc fcf5 	bl	8000e50 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11d      	bne.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d016      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d1c3      	bne.n	800444a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	4a13      	ldr	r2, [pc, #76]	; (800452c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0a1a      	lsrs	r2, r3, #8
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e008      	b.n	800451c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	d0e9      	beq.n	80044ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000000 	.word	0x20000000
 800452c:	14f8b589 	.word	0x14f8b589

08004530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800453c:	e049      	b.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d119      	bne.n	8004580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e030      	b.n	80045e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fc fc66 	bl	8000e50 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11d      	bne.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d016      	beq.n	80045d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e007      	b.n	80045e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d1ae      	bne.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d11b      	bne.n	800463a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004656:	d103      	bne.n	8004660 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800465e:	e007      	b.n	8004670 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004668:	d102      	bne.n	8004670 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2208      	movs	r2, #8
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
	...

0800467c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e272      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8087 	beq.w	80047aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800469c:	4b92      	ldr	r3, [pc, #584]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d00c      	beq.n	80046c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046a8:	4b8f      	ldr	r3, [pc, #572]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d112      	bne.n	80046da <HAL_RCC_OscConfig+0x5e>
 80046b4:	4b8c      	ldr	r3, [pc, #560]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c0:	d10b      	bne.n	80046da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c2:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d06c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x12c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d168      	bne.n	80047a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e24c      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x76>
 80046e4:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7f      	ldr	r2, [pc, #508]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80046ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e02e      	b.n	8004750 <HAL_RCC_OscConfig+0xd4>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x98>
 80046fa:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7a      	ldr	r2, [pc, #488]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b78      	ldr	r3, [pc, #480]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a77      	ldr	r2, [pc, #476]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800470c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e01d      	b.n	8004750 <HAL_RCC_OscConfig+0xd4>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0xbc>
 800471e:	4b72      	ldr	r3, [pc, #456]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a71      	ldr	r2, [pc, #452]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6e      	ldr	r2, [pc, #440]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0xd4>
 8004738:	4b6b      	ldr	r3, [pc, #428]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800473e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b68      	ldr	r3, [pc, #416]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a67      	ldr	r2, [pc, #412]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800474a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fc fb7a 	bl	8000e50 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fc fb76 	bl	8000e50 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e200      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b5d      	ldr	r3, [pc, #372]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0xe4>
 800477e:	e014      	b.n	80047aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fc fb66 	bl	8000e50 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fc fb62 	bl	8000e50 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1ec      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	4b53      	ldr	r3, [pc, #332]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x10c>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047b6:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047c2:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11c      	bne.n	8004808 <HAL_RCC_OscConfig+0x18c>
 80047ce:	4b46      	ldr	r3, [pc, #280]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d116      	bne.n	8004808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047da:	4b43      	ldr	r3, [pc, #268]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x176>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1c0      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4939      	ldr	r1, [pc, #228]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	e03a      	b.n	800487e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004810:	4b36      	ldr	r3, [pc, #216]	; (80048ec <HAL_RCC_OscConfig+0x270>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fc fb1b 	bl	8000e50 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481e:	f7fc fb17 	bl	8000e50 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1a1      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4927      	ldr	r1, [pc, #156]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <HAL_RCC_OscConfig+0x270>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fc fafa 	bl	8000e50 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fc faf6 	bl	8000e50 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e180      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03a      	beq.n	8004900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d019      	beq.n	80048c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <HAL_RCC_OscConfig+0x274>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004898:	f7fc fada 	bl	8000e50 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fc fad6 	bl	8000e50 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e160      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_RCC_OscConfig+0x26c>)
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048be:	2001      	movs	r0, #1
 80048c0:	f000 fb00 	bl	8004ec4 <RCC_Delay>
 80048c4:	e01c      	b.n	8004900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c6:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048cc:	f7fc fac0 	bl	8000e50 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d2:	e00f      	b.n	80048f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fc fabc 	bl	8000e50 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d908      	bls.n	80048f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e146      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	42420000 	.word	0x42420000
 80048f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f4:	4b92      	ldr	r3, [pc, #584]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e9      	bne.n	80048d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80a6 	beq.w	8004a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004912:	4b8b      	ldr	r3, [pc, #556]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	4b88      	ldr	r3, [pc, #544]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4a87      	ldr	r2, [pc, #540]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004928:	61d3      	str	r3, [r2, #28]
 800492a:	4b85      	ldr	r3, [pc, #532]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493a:	4b82      	ldr	r3, [pc, #520]	; (8004b44 <HAL_RCC_OscConfig+0x4c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d118      	bne.n	8004978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004946:	4b7f      	ldr	r3, [pc, #508]	; (8004b44 <HAL_RCC_OscConfig+0x4c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a7e      	ldr	r2, [pc, #504]	; (8004b44 <HAL_RCC_OscConfig+0x4c8>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004952:	f7fc fa7d 	bl	8000e50 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fc fa79 	bl	8000e50 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	; 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e103      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4b75      	ldr	r3, [pc, #468]	; (8004b44 <HAL_RCC_OscConfig+0x4c8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x312>
 8004980:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4a6e      	ldr	r2, [pc, #440]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6213      	str	r3, [r2, #32]
 800498c:	e02d      	b.n	80049ea <HAL_RCC_OscConfig+0x36e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x334>
 8004996:	4b6a      	ldr	r3, [pc, #424]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a69      	ldr	r2, [pc, #420]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	6213      	str	r3, [r2, #32]
 80049a2:	4b67      	ldr	r3, [pc, #412]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4a66      	ldr	r2, [pc, #408]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	6213      	str	r3, [r2, #32]
 80049ae:	e01c      	b.n	80049ea <HAL_RCC_OscConfig+0x36e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCC_OscConfig+0x356>
 80049b8:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4a60      	ldr	r2, [pc, #384]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049be:	f043 0304 	orr.w	r3, r3, #4
 80049c2:	6213      	str	r3, [r2, #32]
 80049c4:	4b5e      	ldr	r3, [pc, #376]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4a5d      	ldr	r2, [pc, #372]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6213      	str	r3, [r2, #32]
 80049d0:	e00b      	b.n	80049ea <HAL_RCC_OscConfig+0x36e>
 80049d2:	4b5b      	ldr	r3, [pc, #364]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a5a      	ldr	r2, [pc, #360]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6213      	str	r3, [r2, #32]
 80049de:	4b58      	ldr	r3, [pc, #352]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a57      	ldr	r2, [pc, #348]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d015      	beq.n	8004a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f2:	f7fc fa2d 	bl	8000e50 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fc fa29 	bl	8000e50 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e0b1      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ee      	beq.n	80049fa <HAL_RCC_OscConfig+0x37e>
 8004a1c:	e014      	b.n	8004a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fc fa17 	bl	8000e50 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fc fa13 	bl	8000e50 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e09b      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3c:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ee      	bne.n	8004a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4e:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4a3b      	ldr	r2, [pc, #236]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8087 	beq.w	8004b72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d061      	beq.n	8004b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d146      	bne.n	8004b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a78:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <HAL_RCC_OscConfig+0x4cc>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7e:	f7fc f9e7 	bl	8000e50 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a86:	f7fc f9e3 	bl	8000e50 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e06d      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f0      	bne.n	8004a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d108      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	4921      	ldr	r1, [pc, #132]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac0:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a19      	ldr	r1, [r3, #32]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	491b      	ldr	r1, [pc, #108]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x4cc>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fc f9b7 	bl	8000e50 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fc f9b3 	bl	8000e50 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e03d      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x46a>
 8004b04:	e035      	b.n	8004b72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <HAL_RCC_OscConfig+0x4cc>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fc f9a0 	bl	8000e50 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fc f99c 	bl	8000e50 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e026      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x498>
 8004b32:	e01e      	b.n	8004b72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e019      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40007000 	.word	0x40007000
 8004b48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_OscConfig+0x500>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000

08004b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0d0      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d910      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b67      	ldr	r3, [pc, #412]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 0207 	bic.w	r2, r3, #7
 8004baa:	4965      	ldr	r1, [pc, #404]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b63      	ldr	r3, [pc, #396]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0b8      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bdc:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf4:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4a52      	ldr	r2, [pc, #328]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c00:	4b50      	ldr	r3, [pc, #320]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	494d      	ldr	r1, [pc, #308]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d040      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d115      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4b41      	ldr	r3, [pc, #260]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e073      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e06b      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5e:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4936      	ldr	r1, [pc, #216]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fc f8ee 	bl	8000e50 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c78:	f7fc f8ea 	bl	8000e50 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e053      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 020c 	and.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1eb      	bne.n	8004c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d210      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 0207 	bic.w	r2, r3, #7
 8004cb6:	4922      	ldr	r1, [pc, #136]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e032      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4916      	ldr	r1, [pc, #88]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	490e      	ldr	r1, [pc, #56]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d0e:	f000 f821 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	490a      	ldr	r1, [pc, #40]	; (8004d48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	5ccb      	ldrb	r3, [r1, r3]
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1cc>)
 8004d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1d0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fb fdd6 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40022000 	.word	0x40022000
 8004d44:	40021000 	.word	0x40021000
 8004d48:	08009d54 	.word	0x08009d54
 8004d4c:	20000000 	.word	0x20000000
 8004d50:	20000004 	.word	0x20000004

08004d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x30>
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x36>
 8004d82:	e027      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d84:	4b19      	ldr	r3, [pc, #100]	; (8004dec <HAL_RCC_GetSysClockFreq+0x98>)
 8004d86:	613b      	str	r3, [r7, #16]
      break;
 8004d88:	e027      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	0c9b      	lsrs	r3, r3, #18
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d94:	5cd3      	ldrb	r3, [r2, r3]
 8004d96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d010      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004da2:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	0c5b      	lsrs	r3, r3, #17
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dae:	5cd3      	ldrb	r3, [r2, r3]
 8004db0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <HAL_RCC_GetSysClockFreq+0x98>)
 8004db6:	fb03 f202 	mul.w	r2, r3, r2
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e004      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0c      	ldr	r2, [pc, #48]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	613b      	str	r3, [r7, #16]
      break;
 8004dd2:	e002      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xa8>)
 8004dd6:	613b      	str	r3, [r7, #16]
      break;
 8004dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dda:	693b      	ldr	r3, [r7, #16]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	08009d6c 	.word	0x08009d6c
 8004df4:	08009d7c 	.word	0x08009d7c
 8004df8:	003d0900 	.word	0x003d0900
 8004dfc:	007a1200 	.word	0x007a1200

08004e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e04:	4b02      	ldr	r3, [pc, #8]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	20000000 	.word	0x20000000

08004e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e18:	f7ff fff2 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	08009d64 	.word	0x08009d64

08004e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e40:	f7ff ffde 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	0adb      	lsrs	r3, r3, #11
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4903      	ldr	r1, [pc, #12]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	08009d64 	.word	0x08009d64

08004e64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	220f      	movs	r2, #15
 8004e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_RCC_GetClockConfig+0x58>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 0203 	and.w	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <HAL_RCC_GetClockConfig+0x58>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_GetClockConfig+0x58>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_RCC_GetClockConfig+0x58>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	08db      	lsrs	r3, r3, #3
 8004e9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0207 	and.w	r2, r3, #7
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40022000 	.word	0x40022000

08004ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <RCC_Delay+0x34>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <RCC_Delay+0x38>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0a5b      	lsrs	r3, r3, #9
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ee0:	bf00      	nop
  }
  while (Delay --);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1e5a      	subs	r2, r3, #1
 8004ee6:	60fa      	str	r2, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f9      	bne.n	8004ee0 <RCC_Delay+0x1c>
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	10624dd3 	.word	0x10624dd3

08004f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d07d      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f20:	4b4f      	ldr	r3, [pc, #316]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b4c      	ldr	r3, [pc, #304]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4a4b      	ldr	r2, [pc, #300]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	61d3      	str	r3, [r2, #28]
 8004f38:	4b49      	ldr	r3, [pc, #292]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	4b46      	ldr	r3, [pc, #280]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d118      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f54:	4b43      	ldr	r3, [pc, #268]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a42      	ldr	r2, [pc, #264]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f60:	f7fb ff76 	bl	8000e50 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f66:	e008      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f68:	f7fb ff72 	bl	8000e50 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e06d      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	4b3a      	ldr	r3, [pc, #232]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d02e      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d027      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fae:	4b2e      	ldr	r3, [pc, #184]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fba:	4a29      	ldr	r2, [pc, #164]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d014      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fb ff41 	bl	8000e50 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fb ff3d 	bl	8000e50 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e036      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0ee      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4917      	ldr	r1, [pc, #92]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005002:	4313      	orrs	r3, r2
 8005004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d105      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	490b      	ldr	r1, [pc, #44]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4904      	ldr	r1, [pc, #16]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	40007000 	.word	0x40007000
 8005068:	42420440 	.word	0x42420440

0800506c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e041      	b.n	8005102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fb fdf4 	bl	8000c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f000 fa74 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d001      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e03a      	b.n	800519a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <HAL_TIM_Base_Start_IT+0x98>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x58>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d009      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x58>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x58>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a13      	ldr	r2, [pc, #76]	; (80051ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d111      	bne.n	8005188 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d010      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	e007      	b.n	8005198 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800

080051b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d122      	bne.n	800520c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d11b      	bne.n	800520c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0202 	mvn.w	r2, #2
 80051dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f9b4 	bl	8005560 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e005      	b.n	8005206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f9a7 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f9b6 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b04      	cmp	r3, #4
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0204 	mvn.w	r2, #4
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f98a 	bl	8005560 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f97d 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f98c 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b08      	cmp	r3, #8
 800526c:	d122      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d11b      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0208 	mvn.w	r2, #8
 8005284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2204      	movs	r2, #4
 800528a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f960 	bl	8005560 <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f953 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f962 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d122      	bne.n	8005308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d11b      	bne.n	8005308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0210 	mvn.w	r2, #16
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2208      	movs	r2, #8
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f936 	bl	8005560 <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f929 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f938 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b01      	cmp	r3, #1
 8005314:	d10e      	bne.n	8005334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b01      	cmp	r3, #1
 8005322:	d107      	bne.n	8005334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0201 	mvn.w	r2, #1
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fb fa7a 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	2b80      	cmp	r3, #128	; 0x80
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa7b 	bl	8005856 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b40      	cmp	r3, #64	; 0x40
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8fc 	bl	8005584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b20      	cmp	r3, #32
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0220 	mvn.w	r2, #32
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa46 	bl	8005844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_ConfigClockSource+0x1c>
 80053d8:	2302      	movs	r3, #2
 80053da:	e0b4      	b.n	8005546 <HAL_TIM_ConfigClockSource+0x186>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005414:	d03e      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0xd4>
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	f200 8087 	bhi.w	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	f000 8086 	beq.w	8005532 <HAL_TIM_ConfigClockSource+0x172>
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	d87f      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d01a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0xa6>
 8005430:	2b70      	cmp	r3, #112	; 0x70
 8005432:	d87b      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d050      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x11a>
 8005438:	2b60      	cmp	r3, #96	; 0x60
 800543a:	d877      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b50      	cmp	r3, #80	; 0x50
 800543e:	d03c      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0xfa>
 8005440:	2b50      	cmp	r3, #80	; 0x50
 8005442:	d873      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d058      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x13a>
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d86f      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d064      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005450:	2b30      	cmp	r3, #48	; 0x30
 8005452:	d86b      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d060      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d867      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05c      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d05a      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005464:	e062      	b.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005476:	f000 f968 	bl	800574a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	609a      	str	r2, [r3, #8]
      break;
 8005492:	e04f      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a4:	f000 f951 	bl	800574a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b6:	609a      	str	r2, [r3, #8]
      break;
 80054b8:	e03c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 f8c8 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2150      	movs	r1, #80	; 0x50
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f91f 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e02c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 f8e6 	bl	80056b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2160      	movs	r1, #96	; 0x60
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f90f 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 80054f8:	e01c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005506:	461a      	mov	r2, r3
 8005508:	f000 f8a8 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2140      	movs	r1, #64	; 0x40
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f8ff 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005518:	e00c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 f8f6 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 800552a:	e003      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e000      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr
	...

08005598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a29      	ldr	r2, [pc, #164]	; (8005650 <TIM_Base_SetConfig+0xb8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0x30>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x30>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a26      	ldr	r2, [pc, #152]	; (8005654 <TIM_Base_SetConfig+0xbc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x30>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a25      	ldr	r2, [pc, #148]	; (8005658 <TIM_Base_SetConfig+0xc0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <TIM_Base_SetConfig+0xb8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0x62>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0x62>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a19      	ldr	r2, [pc, #100]	; (8005654 <TIM_Base_SetConfig+0xbc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0x62>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <TIM_Base_SetConfig+0xc0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a07      	ldr	r2, [pc, #28]	; (8005650 <TIM_Base_SetConfig+0xb8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d103      	bne.n	8005640 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	615a      	str	r2, [r3, #20]
}
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 030a 	bic.w	r3, r3, #10
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0210 	bic.w	r2, r3, #16
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	031b      	lsls	r3, r3, #12
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	621a      	str	r2, [r3, #32]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	f043 0307 	orr.w	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800574a:	b480      	push	{r7}
 800574c:	b087      	sub	sp, #28
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	431a      	orrs	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4313      	orrs	r3, r2
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	609a      	str	r2, [r3, #8]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e046      	b.n	800582e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a16      	ldr	r2, [pc, #88]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ec:	d009      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a12      	ldr	r2, [pc, #72]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a10      	ldr	r2, [pc, #64]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10c      	bne.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800

08005844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e042      	b.n	8005900 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fb fa46 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f91d 	bl	8005aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b20      	cmp	r3, #32
 8005926:	d16d      	bne.n	8005a04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_Transmit+0x2c>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e066      	b.n	8005a06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fb fa83 	bl	8000e50 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005960:	d108      	bne.n	8005974 <HAL_UART_Transmit+0x6c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e003      	b.n	800597c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800597c:	e02a      	b.n	80059d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f840 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e036      	b.n	8005a06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3302      	adds	r3, #2
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e007      	b.n	80059c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1cf      	bne.n	800597e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2140      	movs	r1, #64	; 0x40
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f810 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e000      	b.n	8005a06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b090      	sub	sp, #64	; 0x40
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	e050      	b.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d04c      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2e:	f7fb fa0f 	bl	8000e50 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d241      	bcs.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	330c      	adds	r3, #12
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a5e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3314      	adds	r3, #20
 8005a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	613b      	str	r3, [r7, #16]
   return(result);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3314      	adds	r3, #20
 8005a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a92:	623a      	str	r2, [r7, #32]
 8005a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	69f9      	ldr	r1, [r7, #28]
 8005a98:	6a3a      	ldr	r2, [r7, #32]
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e00f      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2301      	moveq	r3, #1
 8005ad4:	2300      	movne	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d09f      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3740      	adds	r7, #64	; 0x40
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b26:	f023 030c 	bic.w	r3, r3, #12
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <UART_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d103      	bne.n	8005b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7ff f972 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	e002      	b.n	8005b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f7ff f95a 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8005b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009a      	lsls	r2, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <UART_SetConfig+0x118>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	0119      	lsls	r1, r3, #4
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009a      	lsls	r2, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b98:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <UART_SetConfig+0x118>)
 8005b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2064      	movs	r0, #100	; 0x64
 8005ba2:	fb00 f303 	mul.w	r3, r0, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	3332      	adds	r3, #50	; 0x32
 8005bac:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <UART_SetConfig+0x118>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb8:	4419      	add	r1, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009a      	lsls	r2, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <UART_SetConfig+0x118>)
 8005bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2064      	movs	r0, #100	; 0x64
 8005bda:	fb00 f303 	mul.w	r3, r0, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	; 0x32
 8005be4:	4a07      	ldr	r2, [pc, #28]	; (8005c04 <UART_SetConfig+0x118>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40013800 	.word	0x40013800
 8005c04:	51eb851f 	.word	0x51eb851f

08005c08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c1a:	2b84      	cmp	r3, #132	; 0x84
 8005c1c:	d005      	beq.n	8005c2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	3303      	adds	r3, #3
 8005c28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c3a:	f000 fad1 	bl	80061e0 <vTaskStartScheduler>
  
  return osOK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	b089      	sub	sp, #36	; 0x24
 8005c48:	af04      	add	r7, sp, #16
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d020      	beq.n	8005c98 <osThreadCreate+0x54>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01c      	beq.n	8005c98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685c      	ldr	r4, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691e      	ldr	r6, [r3, #16]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ffc9 	bl	8005c08 <makeFreeRtosPriority>
 8005c76:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c80:	9202      	str	r2, [sp, #8]
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	9100      	str	r1, [sp, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	4632      	mov	r2, r6
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f8e8 	bl	8005e62 <xTaskCreateStatic>
 8005c92:	4603      	mov	r3, r0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e01c      	b.n	8005cd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685c      	ldr	r4, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff ffab 	bl	8005c08 <makeFreeRtosPriority>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	f107 030c 	add.w	r3, r7, #12
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	9200      	str	r2, [sp, #0]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4632      	mov	r2, r6
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 f929 	bl	8005f1a <xTaskCreate>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d001      	beq.n	8005cd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e000      	b.n	8005cd4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cdc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <osDelay+0x16>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	e000      	b.n	8005cf4 <osDelay+0x18>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fa3f 	bl	8006178 <vTaskDelay>
  
  return osOK;
 8005cfa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f103 0208 	add.w	r2, r3, #8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f103 0208 	add.w	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db6:	d103      	bne.n	8005dc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e00c      	b.n	8005dda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e002      	b.n	8005dce <vListInsert+0x2e>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d2f6      	bcs.n	8005dc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6892      	ldr	r2, [r2, #8]
 8005e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6852      	ldr	r2, [r2, #4]
 8005e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d103      	bne.n	8005e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	1e5a      	subs	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08e      	sub	sp, #56	; 0x38
 8005e66:	af04      	add	r7, sp, #16
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	61fb      	str	r3, [r7, #28]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ea8:	2354      	movs	r3, #84	; 0x54
 8005eaa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b54      	cmp	r3, #84	; 0x54
 8005eb0:	d00a      	beq.n	8005ec8 <xTaskCreateStatic+0x66>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	61bb      	str	r3, [r7, #24]
}
 8005ec4:	bf00      	nop
 8005ec6:	e7fe      	b.n	8005ec6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01e      	beq.n	8005f0c <xTaskCreateStatic+0xaa>
 8005ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f850 	bl	8005fa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f06:	f000 f8cd 	bl	80060a4 <prvAddNewTaskToReadyList>
 8005f0a:	e001      	b.n	8005f10 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f10:	697b      	ldr	r3, [r7, #20]
	}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3728      	adds	r7, #40	; 0x28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b08c      	sub	sp, #48	; 0x30
 8005f1e:	af04      	add	r7, sp, #16
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fe6e 	bl	8006c10 <pvPortMalloc>
 8005f34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f3c:	2054      	movs	r0, #84	; 0x54
 8005f3e:	f000 fe67 	bl	8006c10 <pvPortMalloc>
 8005f42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f50:	e005      	b.n	8005f5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f000 ff20 	bl	8006d98 <vPortFree>
 8005f58:	e001      	b.n	8005f5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d017      	beq.n	8005f94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9303      	str	r3, [sp, #12]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	9302      	str	r3, [sp, #8]
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f80e 	bl	8005fa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f88:	69f8      	ldr	r0, [r7, #28]
 8005f8a:	f000 f88b 	bl	80060a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	e002      	b.n	8005f9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	617b      	str	r3, [r7, #20]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	e012      	b.n	8006018 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	7819      	ldrb	r1, [r3, #0]
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	3334      	adds	r3, #52	; 0x34
 8006002:	460a      	mov	r2, r1
 8006004:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d006      	beq.n	8006020 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3301      	adds	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d9e9      	bls.n	8005ff2 <prvInitialiseNewTask+0x4e>
 800601e:	e000      	b.n	8006022 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006020:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	2b06      	cmp	r3, #6
 800602e:	d901      	bls.n	8006034 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006030:	2306      	movs	r3, #6
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fe79 	bl	8005d42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	3318      	adds	r3, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fe74 	bl	8005d42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f1c3 0207 	rsb	r2, r3, #7
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	68f9      	ldr	r1, [r7, #12]
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f000 fc0e 	bl	80068a4 <pxPortInitialiseStack>
 8006088:	4602      	mov	r2, r0
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060ac:	f000 fcee 	bl	8006a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <prvAddNewTaskToReadyList+0xb8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a29      	ldr	r2, [pc, #164]	; (800615c <prvAddNewTaskToReadyList+0xb8>)
 80060b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <prvAddNewTaskToReadyList+0xbc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060c2:	4a27      	ldr	r2, [pc, #156]	; (8006160 <prvAddNewTaskToReadyList+0xbc>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060c8:	4b24      	ldr	r3, [pc, #144]	; (800615c <prvAddNewTaskToReadyList+0xb8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d110      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060d0:	f000 fac0 	bl	8006654 <prvInitialiseTaskLists>
 80060d4:	e00d      	b.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <prvAddNewTaskToReadyList+0xc0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060de:	4b20      	ldr	r3, [pc, #128]	; (8006160 <prvAddNewTaskToReadyList+0xbc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d802      	bhi.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <prvAddNewTaskToReadyList+0xbc>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060f2:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	2201      	movs	r2, #1
 8006102:	409a      	lsls	r2, r3
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4313      	orrs	r3, r2
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4a15      	ldr	r2, [pc, #84]	; (8006170 <prvAddNewTaskToReadyList+0xcc>)
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f7ff fe18 	bl	8005d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800612a:	f000 fcdf 	bl	8006aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <prvAddNewTaskToReadyList+0xc0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006136:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <prvAddNewTaskToReadyList+0xbc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	429a      	cmp	r2, r3
 8006142:	d207      	bcs.n	8006154 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006144:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200005dc 	.word	0x200005dc
 8006160:	200004dc 	.word	0x200004dc
 8006164:	200005e8 	.word	0x200005e8
 8006168:	200005f8 	.word	0x200005f8
 800616c:	200005e4 	.word	0x200005e4
 8006170:	200004e0 	.word	0x200004e0
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d017      	beq.n	80061ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800618a:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <vTaskDelay+0x60>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <vTaskDelay+0x30>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061a8:	f000 f87a 	bl	80062a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061ac:	2100      	movs	r1, #0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fb12 	bl	80067d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061b4:	f000 f882 	bl	80062bc <xTaskResumeAll>
 80061b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d107      	bne.n	80061d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <vTaskDelay+0x64>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000604 	.word	0x20000604
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061ee:	463a      	mov	r2, r7
 80061f0:	1d39      	adds	r1, r7, #4
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa f84a 	bl	8000290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	9202      	str	r2, [sp, #8]
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	2300      	movs	r3, #0
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	460a      	mov	r2, r1
 800620e:	491e      	ldr	r1, [pc, #120]	; (8006288 <vTaskStartScheduler+0xa8>)
 8006210:	481e      	ldr	r0, [pc, #120]	; (800628c <vTaskStartScheduler+0xac>)
 8006212:	f7ff fe26 	bl	8005e62 <xTaskCreateStatic>
 8006216:	4603      	mov	r3, r0
 8006218:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <vTaskStartScheduler+0xb0>)
 800621a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <vTaskStartScheduler+0xb0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006224:	2301      	movs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e001      	b.n	800622e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d116      	bne.n	8006262 <vTaskStartScheduler+0x82>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	613b      	str	r3, [r7, #16]
}
 8006246:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <vTaskStartScheduler+0xb4>)
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <vTaskStartScheduler+0xb8>)
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <vTaskStartScheduler+0xbc>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800625c:	f000 fba4 	bl	80069a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006260:	e00e      	b.n	8006280 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d10a      	bne.n	8006280 <vTaskStartScheduler+0xa0>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60fb      	str	r3, [r7, #12]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <vTaskStartScheduler+0x9e>
}
 8006280:	bf00      	nop
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08009c80 	.word	0x08009c80
 800628c:	08006625 	.word	0x08006625
 8006290:	20000600 	.word	0x20000600
 8006294:	200005fc 	.word	0x200005fc
 8006298:	200005e8 	.word	0x200005e8
 800629c:	200005e0 	.word	0x200005e0

080062a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <vTaskSuspendAll+0x18>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	4a03      	ldr	r2, [pc, #12]	; (80062b8 <vTaskSuspendAll+0x18>)
 80062ac:	6013      	str	r3, [r2, #0]
}
 80062ae:	bf00      	nop
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000604 	.word	0x20000604

080062bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <xTaskResumeAll+0x114>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	603b      	str	r3, [r7, #0]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062e8:	f000 fbd0 	bl	8006a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <xTaskResumeAll+0x114>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	4a37      	ldr	r2, [pc, #220]	; (80063d0 <xTaskResumeAll+0x114>)
 80062f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f6:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <xTaskResumeAll+0x114>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d161      	bne.n	80063c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062fe:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <xTaskResumeAll+0x118>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d05d      	beq.n	80063c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006306:	e02e      	b.n	8006366 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006308:	4b33      	ldr	r3, [pc, #204]	; (80063d8 <xTaskResumeAll+0x11c>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3318      	adds	r3, #24
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fd7b 	bl	8005e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3304      	adds	r3, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fd76 	bl	8005e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	2201      	movs	r2, #1
 800632a:	409a      	lsls	r2, r3
 800632c:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <xTaskResumeAll+0x120>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4313      	orrs	r3, r2
 8006332:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <xTaskResumeAll+0x120>)
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4a27      	ldr	r2, [pc, #156]	; (80063e0 <xTaskResumeAll+0x124>)
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7ff fd04 	bl	8005d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <xTaskResumeAll+0x128>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <xTaskResumeAll+0x12c>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006366:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <xTaskResumeAll+0x11c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1cc      	bne.n	8006308 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006374:	f000 fa0c 	bl	8006790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006378:	4b1c      	ldr	r3, [pc, #112]	; (80063ec <xTaskResumeAll+0x130>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d010      	beq.n	80063a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006384:	f000 f836 	bl	80063f4 <xTaskIncrementTick>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800638e:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <xTaskResumeAll+0x12c>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3b01      	subs	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f1      	bne.n	8006384 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80063a0:	4b12      	ldr	r3, [pc, #72]	; (80063ec <xTaskResumeAll+0x130>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <xTaskResumeAll+0x12c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063b2:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <xTaskResumeAll+0x134>)
 80063b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063c2:	f000 fb93 	bl	8006aec <vPortExitCritical>

	return xAlreadyYielded;
 80063c6:	68bb      	ldr	r3, [r7, #8]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000604 	.word	0x20000604
 80063d4:	200005dc 	.word	0x200005dc
 80063d8:	2000059c 	.word	0x2000059c
 80063dc:	200005e4 	.word	0x200005e4
 80063e0:	200004e0 	.word	0x200004e0
 80063e4:	200004dc 	.word	0x200004dc
 80063e8:	200005f0 	.word	0x200005f0
 80063ec:	200005ec 	.word	0x200005ec
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fe:	4b51      	ldr	r3, [pc, #324]	; (8006544 <xTaskIncrementTick+0x150>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 808d 	bne.w	8006522 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006408:	4b4f      	ldr	r3, [pc, #316]	; (8006548 <xTaskIncrementTick+0x154>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006410:	4a4d      	ldr	r2, [pc, #308]	; (8006548 <xTaskIncrementTick+0x154>)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d120      	bne.n	800645e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800641c:	4b4b      	ldr	r3, [pc, #300]	; (800654c <xTaskIncrementTick+0x158>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <xTaskIncrementTick+0x48>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	603b      	str	r3, [r7, #0]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xTaskIncrementTick+0x46>
 800643c:	4b43      	ldr	r3, [pc, #268]	; (800654c <xTaskIncrementTick+0x158>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	4b43      	ldr	r3, [pc, #268]	; (8006550 <xTaskIncrementTick+0x15c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a41      	ldr	r2, [pc, #260]	; (800654c <xTaskIncrementTick+0x158>)
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4a41      	ldr	r2, [pc, #260]	; (8006550 <xTaskIncrementTick+0x15c>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	4b40      	ldr	r3, [pc, #256]	; (8006554 <xTaskIncrementTick+0x160>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	4a3f      	ldr	r2, [pc, #252]	; (8006554 <xTaskIncrementTick+0x160>)
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	f000 f999 	bl	8006790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800645e:	4b3e      	ldr	r3, [pc, #248]	; (8006558 <xTaskIncrementTick+0x164>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	429a      	cmp	r2, r3
 8006466:	d34d      	bcc.n	8006504 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006468:	4b38      	ldr	r3, [pc, #224]	; (800654c <xTaskIncrementTick+0x158>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <xTaskIncrementTick+0x82>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <xTaskIncrementTick+0x84>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647c:	4b36      	ldr	r3, [pc, #216]	; (8006558 <xTaskIncrementTick+0x164>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	601a      	str	r2, [r3, #0]
					break;
 8006484:	e03e      	b.n	8006504 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <xTaskIncrementTick+0x158>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d203      	bcs.n	80064a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <xTaskIncrementTick+0x164>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6013      	str	r3, [r2, #0]
						break;
 80064a4:	e02e      	b.n	8006504 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fcb0 	bl	8005e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	3318      	adds	r3, #24
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fca7 	bl	8005e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	2201      	movs	r2, #1
 80064c8:	409a      	lsls	r2, r3
 80064ca:	4b24      	ldr	r3, [pc, #144]	; (800655c <xTaskIncrementTick+0x168>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	4a22      	ldr	r2, [pc, #136]	; (800655c <xTaskIncrementTick+0x168>)
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <xTaskIncrementTick+0x16c>)
 80064e2:	441a      	add	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7ff fc35 	bl	8005d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4b1b      	ldr	r3, [pc, #108]	; (8006564 <xTaskIncrementTick+0x170>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d3b4      	bcc.n	8006468 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064fe:	2301      	movs	r3, #1
 8006500:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006502:	e7b1      	b.n	8006468 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <xTaskIncrementTick+0x170>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4915      	ldr	r1, [pc, #84]	; (8006560 <xTaskIncrementTick+0x16c>)
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d907      	bls.n	800652c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e004      	b.n	800652c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <xTaskIncrementTick+0x174>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	4a0f      	ldr	r2, [pc, #60]	; (8006568 <xTaskIncrementTick+0x174>)
 800652a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <xTaskIncrementTick+0x178>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006534:	2301      	movs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006538:	697b      	ldr	r3, [r7, #20]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000604 	.word	0x20000604
 8006548:	200005e0 	.word	0x200005e0
 800654c:	20000594 	.word	0x20000594
 8006550:	20000598 	.word	0x20000598
 8006554:	200005f4 	.word	0x200005f4
 8006558:	200005fc 	.word	0x200005fc
 800655c:	200005e4 	.word	0x200005e4
 8006560:	200004e0 	.word	0x200004e0
 8006564:	200004dc 	.word	0x200004dc
 8006568:	200005ec 	.word	0x200005ec
 800656c:	200005f0 	.word	0x200005f0

08006570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006576:	4b26      	ldr	r3, [pc, #152]	; (8006610 <vTaskSwitchContext+0xa0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <vTaskSwitchContext+0xa4>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006584:	e03f      	b.n	8006606 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006586:	4b23      	ldr	r3, [pc, #140]	; (8006614 <vTaskSwitchContext+0xa4>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800658c:	4b22      	ldr	r3, [pc, #136]	; (8006618 <vTaskSwitchContext+0xa8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	fab3 f383 	clz	r3, r3
 8006598:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	f1c3 031f 	rsb	r3, r3, #31
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	491e      	ldr	r1, [pc, #120]	; (800661c <vTaskSwitchContext+0xac>)
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	607b      	str	r3, [r7, #4]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <vTaskSwitchContext+0x5a>
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a11      	ldr	r2, [pc, #68]	; (800661c <vTaskSwitchContext+0xac>)
 80065d8:	4413      	add	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3308      	adds	r3, #8
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d104      	bne.n	80065fc <vTaskSwitchContext+0x8c>
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4a07      	ldr	r2, [pc, #28]	; (8006620 <vTaskSwitchContext+0xb0>)
 8006604:	6013      	str	r3, [r2, #0]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr
 8006610:	20000604 	.word	0x20000604
 8006614:	200005f0 	.word	0x200005f0
 8006618:	200005e4 	.word	0x200005e4
 800661c:	200004e0 	.word	0x200004e0
 8006620:	200004dc 	.word	0x200004dc

08006624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800662c:	f000 f852 	bl	80066d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <prvIdleTask+0x28>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d9f9      	bls.n	800662c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <prvIdleTask+0x2c>)
 800663a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006648:	e7f0      	b.n	800662c <prvIdleTask+0x8>
 800664a:	bf00      	nop
 800664c:	200004e0 	.word	0x200004e0
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
 800665e:	e00c      	b.n	800667a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <prvInitialiseTaskLists+0x60>)
 800666c:	4413      	add	r3, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fb48 	bl	8005d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3301      	adds	r3, #1
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b06      	cmp	r3, #6
 800667e:	d9ef      	bls.n	8006660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006680:	480d      	ldr	r0, [pc, #52]	; (80066b8 <prvInitialiseTaskLists+0x64>)
 8006682:	f7ff fb3f 	bl	8005d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006686:	480d      	ldr	r0, [pc, #52]	; (80066bc <prvInitialiseTaskLists+0x68>)
 8006688:	f7ff fb3c 	bl	8005d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800668c:	480c      	ldr	r0, [pc, #48]	; (80066c0 <prvInitialiseTaskLists+0x6c>)
 800668e:	f7ff fb39 	bl	8005d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006692:	480c      	ldr	r0, [pc, #48]	; (80066c4 <prvInitialiseTaskLists+0x70>)
 8006694:	f7ff fb36 	bl	8005d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006698:	480b      	ldr	r0, [pc, #44]	; (80066c8 <prvInitialiseTaskLists+0x74>)
 800669a:	f7ff fb33 	bl	8005d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <prvInitialiseTaskLists+0x78>)
 80066a0:	4a05      	ldr	r2, [pc, #20]	; (80066b8 <prvInitialiseTaskLists+0x64>)
 80066a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <prvInitialiseTaskLists+0x7c>)
 80066a6:	4a05      	ldr	r2, [pc, #20]	; (80066bc <prvInitialiseTaskLists+0x68>)
 80066a8:	601a      	str	r2, [r3, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200004e0 	.word	0x200004e0
 80066b8:	2000056c 	.word	0x2000056c
 80066bc:	20000580 	.word	0x20000580
 80066c0:	2000059c 	.word	0x2000059c
 80066c4:	200005b0 	.word	0x200005b0
 80066c8:	200005c8 	.word	0x200005c8
 80066cc:	20000594 	.word	0x20000594
 80066d0:	20000598 	.word	0x20000598

080066d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066da:	e019      	b.n	8006710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066dc:	f000 f9d6 	bl	8006a8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066e0:	4b10      	ldr	r3, [pc, #64]	; (8006724 <prvCheckTasksWaitingTermination+0x50>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fb8f 	bl	8005e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066f2:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <prvCheckTasksWaitingTermination+0x54>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <prvCheckTasksWaitingTermination+0x54>)
 80066fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <prvCheckTasksWaitingTermination+0x58>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	4a0a      	ldr	r2, [pc, #40]	; (800672c <prvCheckTasksWaitingTermination+0x58>)
 8006704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006706:	f000 f9f1 	bl	8006aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f810 	bl	8006730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <prvCheckTasksWaitingTermination+0x58>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e1      	bne.n	80066dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200005b0 	.word	0x200005b0
 8006728:	200005dc 	.word	0x200005dc
 800672c:	200005c4 	.word	0x200005c4

08006730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800673e:	2b00      	cmp	r3, #0
 8006740:	d108      	bne.n	8006754 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fb26 	bl	8006d98 <vPortFree>
				vPortFree( pxTCB );
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fb23 	bl	8006d98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006752:	e018      	b.n	8006786 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800675a:	2b01      	cmp	r3, #1
 800675c:	d103      	bne.n	8006766 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fb1a 	bl	8006d98 <vPortFree>
	}
 8006764:	e00f      	b.n	8006786 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800676c:	2b02      	cmp	r3, #2
 800676e:	d00a      	beq.n	8006786 <prvDeleteTCB+0x56>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <prvDeleteTCB+0x54>
	}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006796:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <prvResetNextTaskUnblockTime+0x40>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <prvResetNextTaskUnblockTime+0x14>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <prvResetNextTaskUnblockTime+0x16>
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <prvResetNextTaskUnblockTime+0x44>)
 80067ac:	f04f 32ff 	mov.w	r2, #4294967295
 80067b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067b2:	e008      	b.n	80067c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <prvResetNextTaskUnblockTime+0x40>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <prvResetNextTaskUnblockTime+0x44>)
 80067c4:	6013      	str	r3, [r2, #0]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	20000594 	.word	0x20000594
 80067d4:	200005fc 	.word	0x200005fc

080067d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067e8:	4b28      	ldr	r3, [pc, #160]	; (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fb0e 	bl	8005e10 <uxListRemove>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80067fa:	4b24      	ldr	r3, [pc, #144]	; (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43da      	mvns	r2, r3
 8006808:	4b21      	ldr	r3, [pc, #132]	; (8006890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4013      	ands	r3, r2
 800680e:	4a20      	ldr	r2, [pc, #128]	; (8006890 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006810:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d10a      	bne.n	8006830 <prvAddCurrentTaskToDelayedList+0x58>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006820:	4b1a      	ldr	r3, [pc, #104]	; (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	481a      	ldr	r0, [pc, #104]	; (8006894 <prvAddCurrentTaskToDelayedList+0xbc>)
 800682a:	f7ff fa96 	bl	8005d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800682e:	e026      	b.n	800687e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d209      	bcs.n	800685c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <prvAddCurrentTaskToDelayedList+0xc0>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7ff faa3 	bl	8005da0 <vListInsert>
}
 800685a:	e010      	b.n	800687e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <prvAddCurrentTaskToDelayedList+0xc4>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7ff fa99 	bl	8005da0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800686e:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	d202      	bcs.n	800687e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006878:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6013      	str	r3, [r2, #0]
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	200005e0 	.word	0x200005e0
 800688c:	200004dc 	.word	0x200004dc
 8006890:	200005e4 	.word	0x200005e4
 8006894:	200005c8 	.word	0x200005c8
 8006898:	20000598 	.word	0x20000598
 800689c:	20000594 	.word	0x20000594
 80068a0:	200005fc 	.word	0x200005fc

080068a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3b04      	subs	r3, #4
 80068c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3b04      	subs	r3, #4
 80068d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <pxPortInitialiseStack+0x54>)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b14      	subs	r3, #20
 80068de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3b20      	subs	r3, #32
 80068ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ec:	68fb      	ldr	r3, [r7, #12]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr
 80068f8:	080068fd 	.word	0x080068fd

080068fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006906:	4b12      	ldr	r3, [pc, #72]	; (8006950 <prvTaskExitError+0x54>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d00a      	beq.n	8006926 <prvTaskExitError+0x2a>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <prvTaskExitError+0x28>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60bb      	str	r3, [r7, #8]
}
 8006938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800693a:	bf00      	nop
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0fc      	beq.n	800693c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000000c 	.word	0x2000000c
	...

08006960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <pxCurrentTCBConst2>)
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	6808      	ldr	r0, [r1, #0]
 8006966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800696a:	f380 8809 	msr	PSP, r0
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8811 	msr	BASEPRI, r0
 800697a:	f04e 0e0d 	orr.w	lr, lr, #13
 800697e:	4770      	bx	lr

08006980 <pxCurrentTCBConst2>:
 8006980:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006988:	4806      	ldr	r0, [pc, #24]	; (80069a4 <prvPortStartFirstTask+0x1c>)
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	f380 8808 	msr	MSP, r0
 8006992:	b662      	cpsie	i
 8006994:	b661      	cpsie	f
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	df00      	svc	0
 80069a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069a2:	bf00      	nop
 80069a4:	e000ed08 	.word	0xe000ed08

080069a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ae:	4b32      	ldr	r3, [pc, #200]	; (8006a78 <xPortStartScheduler+0xd0>)
 80069b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	22ff      	movs	r2, #255	; 0xff
 80069be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	4b2a      	ldr	r3, [pc, #168]	; (8006a7c <xPortStartScheduler+0xd4>)
 80069d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069d6:	4b2a      	ldr	r3, [pc, #168]	; (8006a80 <xPortStartScheduler+0xd8>)
 80069d8:	2207      	movs	r2, #7
 80069da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069dc:	e009      	b.n	80069f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069de:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <xPortStartScheduler+0xd8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <xPortStartScheduler+0xd8>)
 80069e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d0ef      	beq.n	80069de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069fe:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <xPortStartScheduler+0xd8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1c3 0307 	rsb	r3, r3, #7
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d00a      	beq.n	8006a20 <xPortStartScheduler+0x78>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60bb      	str	r3, [r7, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <xPortStartScheduler+0xd8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <xPortStartScheduler+0xd8>)
 8006a28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <xPortStartScheduler+0xd8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a32:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <xPortStartScheduler+0xd8>)
 8006a34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a3e:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <xPortStartScheduler+0xdc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a10      	ldr	r2, [pc, #64]	; (8006a84 <xPortStartScheduler+0xdc>)
 8006a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <xPortStartScheduler+0xdc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <xPortStartScheduler+0xdc>)
 8006a50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a56:	f000 f8b9 	bl	8006bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <xPortStartScheduler+0xe0>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a60:	f7ff ff92 	bl	8006988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a64:	f7ff fd84 	bl	8006570 <vTaskSwitchContext>
	prvTaskExitError();
 8006a68:	f7ff ff48 	bl	80068fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	e000e400 	.word	0xe000e400
 8006a7c:	20000608 	.word	0x20000608
 8006a80:	2000060c 	.word	0x2000060c
 8006a84:	e000ed20 	.word	0xe000ed20
 8006a88:	2000000c 	.word	0x2000000c

08006a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	607b      	str	r3, [r7, #4]
}
 8006aa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <vPortEnterCritical+0x58>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	4a0d      	ldr	r2, [pc, #52]	; (8006ae4 <vPortEnterCritical+0x58>)
 8006aae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <vPortEnterCritical+0x58>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10f      	bne.n	8006ad8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <vPortEnterCritical+0x5c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	603b      	str	r3, [r7, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <vPortEnterCritical+0x4a>
	}
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <vPortExitCritical+0x4c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <vPortExitCritical+0x24>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	607b      	str	r3, [r7, #4]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <vPortExitCritical+0x4c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <vPortExitCritical+0x4c>)
 8006b18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b1a:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <vPortExitCritical+0x4c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <vPortExitCritical+0x42>
 8006b22:	2300      	movs	r3, #0
 8006b24:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	2000000c 	.word	0x2000000c
 8006b3c:	00000000 	.word	0x00000000

08006b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b40:	f3ef 8009 	mrs	r0, PSP
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <pxCurrentTCBConst>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b50:	6010      	str	r0, [r2, #0]
 8006b52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b5a:	f380 8811 	msr	BASEPRI, r0
 8006b5e:	f7ff fd07 	bl	8006570 <vTaskSwitchContext>
 8006b62:	f04f 0000 	mov.w	r0, #0
 8006b66:	f380 8811 	msr	BASEPRI, r0
 8006b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b76:	f380 8809 	msr	PSP, r0
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	4770      	bx	lr

08006b80 <pxCurrentTCBConst>:
 8006b80:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
}
 8006ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ba2:	f7ff fc27 	bl	80063f4 <xTaskIncrementTick>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <SysTick_Handler+0x40>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <vPortSetupTimerInterrupt+0x30>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bdc:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <vPortSetupTimerInterrupt+0x38>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <vPortSetupTimerInterrupt+0x3c>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <vPortSetupTimerInterrupt+0x40>)
 8006bea:	3b01      	subs	r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bee:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <vPortSetupTimerInterrupt+0x30>)
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr
 8006bfc:	e000e010 	.word	0xe000e010
 8006c00:	e000e018 	.word	0xe000e018
 8006c04:	20000000 	.word	0x20000000
 8006c08:	10624dd3 	.word	0x10624dd3
 8006c0c:	e000e014 	.word	0xe000e014

08006c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c1c:	f7ff fb40 	bl	80062a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c20:	4b58      	ldr	r3, [pc, #352]	; (8006d84 <pvPortMalloc+0x174>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c28:	f000 f910 	bl	8006e4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c2c:	4b56      	ldr	r3, [pc, #344]	; (8006d88 <pvPortMalloc+0x178>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f040 808e 	bne.w	8006d56 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01d      	beq.n	8006c7c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c40:	2208      	movs	r2, #8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4413      	add	r3, r2
 8006c46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	3308      	adds	r3, #8
 8006c5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <pvPortMalloc+0x6c>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	617b      	str	r3, [r7, #20]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d069      	beq.n	8006d56 <pvPortMalloc+0x146>
 8006c82:	4b42      	ldr	r3, [pc, #264]	; (8006d8c <pvPortMalloc+0x17c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d864      	bhi.n	8006d56 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c8c:	4b40      	ldr	r3, [pc, #256]	; (8006d90 <pvPortMalloc+0x180>)
 8006c8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c90:	4b3f      	ldr	r3, [pc, #252]	; (8006d90 <pvPortMalloc+0x180>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c96:	e004      	b.n	8006ca2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d903      	bls.n	8006cb4 <pvPortMalloc+0xa4>
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f1      	bne.n	8006c98 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cb4:	4b33      	ldr	r3, [pc, #204]	; (8006d84 <pvPortMalloc+0x174>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d04b      	beq.n	8006d56 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	4413      	add	r3, r2
 8006cc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	2308      	movs	r3, #8
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d91f      	bls.n	8006d20 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <pvPortMalloc+0xf8>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	613b      	str	r3, [r7, #16]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d1a:	69b8      	ldr	r0, [r7, #24]
 8006d1c:	f000 f8f8 	bl	8006f10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d20:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <pvPortMalloc+0x17c>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	4a18      	ldr	r2, [pc, #96]	; (8006d8c <pvPortMalloc+0x17c>)
 8006d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d2e:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <pvPortMalloc+0x17c>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <pvPortMalloc+0x184>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d203      	bcs.n	8006d42 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <pvPortMalloc+0x17c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <pvPortMalloc+0x184>)
 8006d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <pvPortMalloc+0x178>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d56:	f7ff fab1 	bl	80062bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <pvPortMalloc+0x16a>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	60fb      	str	r3, [r7, #12]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <pvPortMalloc+0x168>
	return pvReturn;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200019a0 	.word	0x200019a0
 8006d88:	200019ac 	.word	0x200019ac
 8006d8c:	200019a4 	.word	0x200019a4
 8006d90:	20001998 	.word	0x20001998
 8006d94:	200019a8 	.word	0x200019a8

08006d98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d048      	beq.n	8006e3c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006daa:	2308      	movs	r3, #8
 8006dac:	425b      	negs	r3, r3
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <vPortFree+0xac>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <vPortFree+0x44>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <vPortFree+0x62>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60bb      	str	r3, [r7, #8]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <vPortFree+0xac>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d019      	beq.n	8006e3c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d115      	bne.n	8006e3c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <vPortFree+0xac>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	401a      	ands	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e20:	f7ff fa3e 	bl	80062a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <vPortFree+0xb0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4a06      	ldr	r2, [pc, #24]	; (8006e48 <vPortFree+0xb0>)
 8006e30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e32:	6938      	ldr	r0, [r7, #16]
 8006e34:	f000 f86c 	bl	8006f10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e38:	f7ff fa40 	bl	80062bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200019ac 	.word	0x200019ac
 8006e48:	200019a4 	.word	0x200019a4

08006e4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e52:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e58:	4b27      	ldr	r3, [pc, #156]	; (8006ef8 <prvHeapInit+0xac>)
 8006e5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3307      	adds	r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0307 	bic.w	r3, r3, #7
 8006e72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	4a1f      	ldr	r2, [pc, #124]	; (8006ef8 <prvHeapInit+0xac>)
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <prvHeapInit+0xb0>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e8a:	4b1c      	ldr	r3, [pc, #112]	; (8006efc <prvHeapInit+0xb0>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	4413      	add	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e98:	2208      	movs	r2, #8
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a15      	ldr	r2, [pc, #84]	; (8006f00 <prvHeapInit+0xb4>)
 8006eac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006eae:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <prvHeapInit+0xb4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <prvHeapInit+0xb4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <prvHeapInit+0xb4>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4a0a      	ldr	r2, [pc, #40]	; (8006f04 <prvHeapInit+0xb8>)
 8006eda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4a09      	ldr	r2, [pc, #36]	; (8006f08 <prvHeapInit+0xbc>)
 8006ee2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ee4:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <prvHeapInit+0xc0>)
 8006ee6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eea:	601a      	str	r2, [r3, #0]
}
 8006eec:	bf00      	nop
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000610 	.word	0x20000610
 8006efc:	20001998 	.word	0x20001998
 8006f00:	200019a0 	.word	0x200019a0
 8006f04:	200019a8 	.word	0x200019a8
 8006f08:	200019a4 	.word	0x200019a4
 8006f0c:	200019ac 	.word	0x200019ac

08006f10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f18:	4b27      	ldr	r3, [pc, #156]	; (8006fb8 <prvInsertBlockIntoFreeList+0xa8>)
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e002      	b.n	8006f24 <prvInsertBlockIntoFreeList+0x14>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d8f7      	bhi.n	8006f1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	4413      	add	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d108      	bne.n	8006f52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	441a      	add	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	441a      	add	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d118      	bne.n	8006f98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <prvInsertBlockIntoFreeList+0xac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d00d      	beq.n	8006f8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	441a      	add	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e008      	b.n	8006fa0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <prvInsertBlockIntoFreeList+0xac>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e003      	b.n	8006fa0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d002      	beq.n	8006fae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr
 8006fb8:	20001998 	.word	0x20001998
 8006fbc:	200019a0 	.word	0x200019a0

08006fc0 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg>:
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif
uint8_t fusb_read_byte(uint8_t addr);
bool fusb_write_byte(uint8_t addr, uint8_t byte);
void FUSB302::fusb_send_message(const pd_msg *msg) const {
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	static const uint8_t eop_seq[4] = { FUSB_FIFO_TX_JAM_CRC, FUSB_FIFO_TX_EOP,
	FUSB_FIFO_TX_TXOFF, FUSB_FIFO_TX_TXON };

	/* Get the length of the message: a two-octet header plus NUMOBJ four-octet
	 * data objects */
	uint8_t msg_len = 2 + 4 * PD_NUMOBJ_GET(msg);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	885b      	ldrh	r3, [r3, #2]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	131b      	asrs	r3, r3, #12
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3302      	adds	r3, #2
 8006fe0:	73fb      	strb	r3, [r7, #15]

	/* Set the number of bytes to be transmitted in the packet */
	sop_seq[4] = FUSB_FIFO_TX_PACKSYM | msg_len;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x74>)
 8006fec:	711a      	strb	r2, [r3, #4]

	/* Write all three parts of the message to the TX FIFO */
	bool result = I2CWrite(DeviceAddress, FUSB_FIFOS, 5, sop_seq);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689c      	ldr	r4, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7818      	ldrb	r0, [r3, #0]
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x74>)
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	2143      	movs	r1, #67	; 0x43
 8006ffc:	47a0      	blx	r4
 8006ffe:	4603      	mov	r3, r0
 8007000:	73bb      	strb	r3, [r7, #14]
	if (!result) {
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 1\r\n");
#endif
	}
	result = I2CWrite(DeviceAddress, FUSB_FIFOS, msg_len,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689c      	ldr	r4, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7818      	ldrb	r0, [r3, #0]
			(uint8_t*) msg->bytes);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	3302      	adds	r3, #2
	result = I2CWrite(DeviceAddress, FUSB_FIFOS, msg_len,
 800700e:	7bfa      	ldrb	r2, [r7, #15]
 8007010:	2143      	movs	r1, #67	; 0x43
 8007012:	47a0      	blx	r4
 8007014:	4603      	mov	r3, r0
 8007016:	73bb      	strb	r3, [r7, #14]
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 2\r\n");
#endif
	}

	result = I2CWrite(DeviceAddress, FUSB_FIFOS, 4, (uint8_t*) eop_seq);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689c      	ldr	r4, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7818      	ldrb	r0, [r3, #0]
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x78>)
 8007022:	2204      	movs	r2, #4
 8007024:	2143      	movs	r1, #67	; 0x43
 8007026:	47a0      	blx	r4
 8007028:	4603      	mov	r3, r0
 800702a:	73bb      	strb	r3, [r7, #14]
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 3\r\n");
#endif
	}

}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	bd90      	pop	{r4, r7, pc}
 8007034:	20000010 	.word	0x20000010
 8007038:	08009d80 	.word	0x08009d80

0800703c <_ZNK7FUSB30215fusb_rx_pendingEv>:

bool FUSB302::fusb_rx_pending() const {
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	return (fusb_read_byte(FUSB_STATUS1) & FUSB_STATUS1_RX_EMPTY)
 8007044:	2141      	movs	r1, #65	; 0x41
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9dd 	bl	8007406 <_ZNK7FUSB30214fusb_read_byteEh>
 800704c:	4603      	mov	r3, r0
 800704e:	f003 0320 	and.w	r3, r3, #32
			!= FUSB_STATUS1_RX_EMPTY;
 8007052:	2b20      	cmp	r3, #32
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg>:

uint8_t FUSB302::fusb_read_message(pd_msg *msg) const {
 8007064:	b590      	push	{r4, r7, lr}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]

	// Read the header. If its not a SOP we dont actually want it at all
	// But on some revisions of the fusb if you dont both pick them up and read
	// them out of the fifo, it gets stuck
	// TODO this might need a tad more testing about how many bites we throw out, but believe it is correct
	uint8_t returnValue = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
	if ((fusb_read_byte(FUSB_FIFOS) & FUSB_FIFO_RX_TOKEN_BITS)
 8007072:	2143      	movs	r1, #67	; 0x43
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9c6 	bl	8007406 <_ZNK7FUSB30214fusb_read_byteEh>
 800707a:	4603      	mov	r3, r0
 800707c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
			!= FUSB_FIFO_RX_SOP) {
 8007080:	2be0      	cmp	r3, #224	; 0xe0
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2db      	uxtb	r3, r3
	if ((fusb_read_byte(FUSB_FIFOS) & FUSB_FIFO_RX_TOKEN_BITS)
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x2e>
		returnValue = 1;
 800708e:	2301      	movs	r3, #1
 8007090:	73fb      	strb	r3, [r7, #15]
	}

	/* Read the message header into msg */
	I2CRead(DeviceAddress, FUSB_FIFOS, 2, msg->bytes);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685c      	ldr	r4, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7818      	ldrb	r0, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	3302      	adds	r3, #2
 800709e:	2202      	movs	r2, #2
 80070a0:	2143      	movs	r1, #67	; 0x43
 80070a2:	47a0      	blx	r4
	/* Get the number of data objects */
	numobj = PD_NUMOBJ_GET(msg);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	885b      	ldrh	r3, [r3, #2]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	131b      	asrs	r3, r3, #12
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	73bb      	strb	r3, [r7, #14]
	/* If there is at least one data object, read the data objects */
	if (numobj > 0) {
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x6e>
		I2CRead(DeviceAddress, FUSB_FIFOS, numobj * 4, msg->bytes + 2);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685c      	ldr	r4, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7818      	ldrb	r0, [r3, #0]
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	3302      	adds	r3, #2
 80070cc:	3302      	adds	r3, #2
 80070ce:	2143      	movs	r1, #67	; 0x43
 80070d0:	47a0      	blx	r4
	}
	/* Throw the CRC32 in the garbage, since the PHY already checked it. */
	I2CRead(DeviceAddress, FUSB_FIFOS, 4, garbage);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685c      	ldr	r4, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7818      	ldrb	r0, [r3, #0]
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x88>)
 80070dc:	2204      	movs	r2, #4
 80070de:	2143      	movs	r1, #67	; 0x43
 80070e0:	47a0      	blx	r4

	return returnValue;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}
 80070ec:	200019b0 	.word	0x200019b0

080070f0 <_ZNK7FUSB30210fusb_setupEv>:

	/* Send a hard reset */
	fusb_write_byte(FUSB_CONTROL3, 0x07 | FUSB_CONTROL3_SEND_HARD_RESET);
}

bool FUSB302::fusb_setup() const {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	/* Fully reset the FUSB302B */
	if (!fusb_write_byte(FUSB_RESET, FUSB_RESET_SW_RES)) {
 80070f8:	2201      	movs	r2, #1
 80070fa:	210c      	movs	r1, #12
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f99e 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007102:	4603      	mov	r3, r0
 8007104:	f083 0301 	eor.w	r3, r3, #1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <_ZNK7FUSB30210fusb_setupEv+0x22>
		return false;
 800710e:	2300      	movs	r3, #0
 8007110:	e09a      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	osDelay(10);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	200a      	movs	r0, #10
 8007118:	4798      	blx	r3
	uint8_t tries = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
	while (!fusb_read_id()) {
 800711e:	e00b      	b.n	8007138 <_ZNK7FUSB30210fusb_setupEv+0x48>
		osDelay(10);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	200a      	movs	r0, #10
 8007126:	4798      	blx	r3
		tries++;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	3301      	adds	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
		if (tries > 5) {
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b05      	cmp	r3, #5
 8007132:	d901      	bls.n	8007138 <_ZNK7FUSB30210fusb_setupEv+0x48>
			return false; // Welp :(
 8007134:	2300      	movs	r3, #0
 8007136:	e087      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	while (!fusb_read_id()) {
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f93e 	bl	80073ba <_ZNK7FUSB30212fusb_read_idEv>
 800713e:	4603      	mov	r3, r0
 8007140:	f083 0301 	eor.w	r3, r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1ea      	bne.n	8007120 <_ZNK7FUSB30210fusb_setupEv+0x30>
		}
	}

	/* Turn on all power */
	if (!fusb_write_byte(FUSB_POWER, 0x0F)) {
 800714a:	220f      	movs	r2, #15
 800714c:	210b      	movs	r1, #11
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f975 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007154:	4603      	mov	r3, r0
 8007156:	f083 0301 	eor.w	r3, r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <_ZNK7FUSB30210fusb_setupEv+0x74>
		return false;
 8007160:	2300      	movs	r3, #0
 8007162:	e071      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	/* Set interrupt masks */
	// Setting to 0 so interrupts are allowed
	if (!fusb_write_byte(FUSB_MASK1, 0x00)) {
 8007164:	2200      	movs	r2, #0
 8007166:	210a      	movs	r1, #10
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f968 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 800716e:	4603      	mov	r3, r0
 8007170:	f083 0301 	eor.w	r3, r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <_ZNK7FUSB30210fusb_setupEv+0x8e>
		return false;
 800717a:	2300      	movs	r3, #0
 800717c:	e064      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_write_byte(FUSB_MASKA, 0x00)) {
 800717e:	2200      	movs	r2, #0
 8007180:	210e      	movs	r1, #14
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f95b 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007188:	4603      	mov	r3, r0
 800718a:	f083 0301 	eor.w	r3, r3, #1
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <_ZNK7FUSB30210fusb_setupEv+0xa8>
		return false;
 8007194:	2300      	movs	r3, #0
 8007196:	e057      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_write_byte(FUSB_MASKB, 0x00)) {
 8007198:	2200      	movs	r2, #0
 800719a:	210f      	movs	r1, #15
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f94e 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f083 0301 	eor.w	r3, r3, #1
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <_ZNK7FUSB30210fusb_setupEv+0xc2>
		return false;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e04a      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_write_byte(FUSB_CONTROL0, 0b11 << 2)) {
 80071b2:	220c      	movs	r2, #12
 80071b4:	2106      	movs	r1, #6
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f941 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80071bc:	4603      	mov	r3, r0
 80071be:	f083 0301 	eor.w	r3, r3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <_ZNK7FUSB30210fusb_setupEv+0xdc>
		return false;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e03d      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	/* Enable automatic retransmission */
	if (!fusb_write_byte(FUSB_CONTROL3, 0x07)) {
 80071cc:	2207      	movs	r2, #7
 80071ce:	2109      	movs	r1, #9
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f934 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f083 0301 	eor.w	r3, r3, #1
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <_ZNK7FUSB30210fusb_setupEv+0xf6>
		return false;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e030      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	// set defaults
	if (!fusb_write_byte(FUSB_CONTROL2, 0x00)) {
 80071e6:	2200      	movs	r2, #0
 80071e8:	2108      	movs	r1, #8
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f927 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f083 0301 	eor.w	r3, r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <_ZNK7FUSB30210fusb_setupEv+0x110>
		return false;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e023      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	/* Flush the RX buffer */
	if (!fusb_write_byte(FUSB_CONTROL1, FUSB_CONTROL1_RX_FLUSH)) {
 8007200:	2204      	movs	r2, #4
 8007202:	2107      	movs	r1, #7
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f91a 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 800720a:	4603      	mov	r3, r0
 800720c:	f083 0301 	eor.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <_ZNK7FUSB30210fusb_setupEv+0x12a>
		return false;
 8007216:	2300      	movs	r3, #0
 8007218:	e016      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	if (!runCCLineSelection()) {
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f818 	bl	8007250 <_ZNK7FUSB30218runCCLineSelectionEv>
 8007220:	4603      	mov	r3, r0
 8007222:	f083 0301 	eor.w	r3, r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <_ZNK7FUSB30210fusb_setupEv+0x140>
		return false;
 800722c:	2300      	movs	r3, #0
 800722e:	e00b      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_reset()) {
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f892 	bl	800735a <_ZNK7FUSB30210fusb_resetEv>
 8007236:	4603      	mov	r3, r0
 8007238:	f083 0301 	eor.w	r3, r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <_ZNK7FUSB30210fusb_setupEv+0x156>
		return false;
 8007242:	2300      	movs	r3, #0
 8007244:	e000      	b.n	8007248 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	return true;
 8007246:	2301      	movs	r3, #1
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNK7FUSB30218runCCLineSelectionEv>:

bool FUSB302::runCCLineSelection() const {
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

	/* Measure CC1 */
	if (!fusb_write_byte(FUSB_SWITCHES0, 0x07)) {
 8007258:	2207      	movs	r2, #7
 800725a:	2102      	movs	r1, #2
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f8ee 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007262:	4603      	mov	r3, r0
 8007264:	f083 0301 	eor.w	r3, r3, #1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <_ZNK7FUSB30218runCCLineSelectionEv+0x22>
		return false;
 800726e:	2300      	movs	r3, #0
 8007270:	e05d      	b.n	800732e <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
	}
	osDelay(10);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	200a      	movs	r0, #10
 8007278:	4798      	blx	r3
	uint8_t cc1 = fusb_read_byte(FUSB_STATUS0) & FUSB_STATUS0_BC_LVL;
 800727a:	2140      	movs	r1, #64	; 0x40
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8c2 	bl	8007406 <_ZNK7FUSB30214fusb_read_byteEh>
 8007282:	4603      	mov	r3, r0
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	73fb      	strb	r3, [r7, #15]

	/* Measure CC2 */
	if (!fusb_write_byte(FUSB_SWITCHES0, 0x0B)) {
 800728a:	220b      	movs	r2, #11
 800728c:	2102      	movs	r1, #2
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8d5 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007294:	4603      	mov	r3, r0
 8007296:	f083 0301 	eor.w	r3, r3, #1
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <_ZNK7FUSB30218runCCLineSelectionEv+0x54>
		return false;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e044      	b.n	800732e <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
	}
	osDelay(10);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	200a      	movs	r0, #10
 80072aa:	4798      	blx	r3
	uint8_t cc2 = fusb_read_byte(FUSB_STATUS0) & FUSB_STATUS0_BC_LVL;
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f8a9 	bl	8007406 <_ZNK7FUSB30214fusb_read_byteEh>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	73bb      	strb	r3, [r7, #14]

	/* Select the correct CC line for BMC signaling; also enable AUTO_CRC */
	if (cc1 > cc2) {
 80072bc:	7bfa      	ldrb	r2, [r7, #15]
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d919      	bls.n	80072f8 <_ZNK7FUSB30218runCCLineSelectionEv+0xa8>
		// TX_CC1|AUTO_CRC|SPECREV0
		if (!fusb_write_byte(FUSB_SWITCHES1, 0x25)) {
 80072c4:	2225      	movs	r2, #37	; 0x25
 80072c6:	2103      	movs	r1, #3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f8b8 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f083 0301 	eor.w	r3, r3, #1
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <_ZNK7FUSB30218runCCLineSelectionEv+0x8e>
			return false;
 80072da:	2300      	movs	r3, #0
 80072dc:	e027      	b.n	800732e <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
		// PWDN1|PWDN2|MEAS_CC1
		if (!fusb_write_byte(FUSB_SWITCHES0, 0x07)) {
 80072de:	2207      	movs	r2, #7
 80072e0:	2102      	movs	r1, #2
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8ab 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f083 0301 	eor.w	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01b      	beq.n	800732c <_ZNK7FUSB30218runCCLineSelectionEv+0xdc>
			return false;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e01a      	b.n	800732e <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
	} else {
		// TX_CC2|AUTO_CRC|SPECREV0
		if (!fusb_write_byte(FUSB_SWITCHES1, 0x26)) {
 80072f8:	2226      	movs	r2, #38	; 0x26
 80072fa:	2103      	movs	r1, #3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f89e 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007302:	4603      	mov	r3, r0
 8007304:	f083 0301 	eor.w	r3, r3, #1
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <_ZNK7FUSB30218runCCLineSelectionEv+0xc2>
			return false;
 800730e:	2300      	movs	r3, #0
 8007310:	e00d      	b.n	800732e <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
		// PWDN1|PWDN2|MEAS_CC2
		if (!fusb_write_byte(FUSB_SWITCHES0, 0x0B)) {
 8007312:	220b      	movs	r2, #11
 8007314:	2102      	movs	r1, #2
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f891 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 800731c:	4603      	mov	r3, r0
 800731e:	f083 0301 	eor.w	r3, r3, #1
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <_ZNK7FUSB30218runCCLineSelectionEv+0xdc>
			return false;
 8007328:	2300      	movs	r3, #0
 800732a:	e000      	b.n	800732e <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
	}
	return true;
 800732c:	2301      	movs	r3, #1
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <_ZNK7FUSB30215fusb_get_statusEP11fusb_status>:
bool FUSB302::fusb_get_status(fusb_status *status) const {
 8007336:	b590      	push	{r4, r7, lr}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]

	/* Read the interrupt and status flags into status */
	return I2CRead(DeviceAddress, FUSB_STATUS0A, 7, status->bytes);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685c      	ldr	r4, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7818      	ldrb	r0, [r3, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2207      	movs	r2, #7
 800734c:	213c      	movs	r1, #60	; 0x3c
 800734e:	47a0      	blx	r4
 8007350:	4603      	mov	r3, r0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bd90      	pop	{r4, r7, pc}

0800735a <_ZNK7FUSB30210fusb_resetEv>:
	FUSB_STATUS0) & FUSB_STATUS0_BC_LVL);

	return bc_lvl;
}

bool FUSB302::fusb_reset() const {
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]

	/* Flush the TX buffer */
	if (!fusb_write_byte(FUSB_CONTROL0, 0x44)) {
 8007362:	2244      	movs	r2, #68	; 0x44
 8007364:	2106      	movs	r1, #6
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f869 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 800736c:	4603      	mov	r3, r0
 800736e:	f083 0301 	eor.w	r3, r3, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <_ZNK7FUSB30210fusb_resetEv+0x22>
		return false;
 8007378:	2300      	movs	r3, #0
 800737a:	e01a      	b.n	80073b2 <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	/* Flush the RX buffer */
	if (!fusb_write_byte(FUSB_CONTROL1, FUSB_CONTROL1_RX_FLUSH)) {
 800737c:	2204      	movs	r2, #4
 800737e:	2107      	movs	r1, #7
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f85c 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 8007386:	4603      	mov	r3, r0
 8007388:	f083 0301 	eor.w	r3, r3, #1
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <_ZNK7FUSB30210fusb_resetEv+0x3c>
		return false;
 8007392:	2300      	movs	r3, #0
 8007394:	e00d      	b.n	80073b2 <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	/* Reset the PD logic */
	if (!fusb_write_byte(FUSB_RESET, FUSB_RESET_PD_RESET)) {
 8007396:	2202      	movs	r2, #2
 8007398:	210c      	movs	r1, #12
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f84f 	bl	800743e <_ZNK7FUSB30215fusb_write_byteEhh>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f083 0301 	eor.w	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <_ZNK7FUSB30210fusb_resetEv+0x56>
		return false;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e000      	b.n	80073b2 <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	return true;
 80073b0:	2301      	movs	r3, #1
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <_ZNK7FUSB30212fusb_read_idEv>:

bool FUSB302::fusb_read_id() const {
 80073ba:	b590      	push	{r4, r7, lr}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
// Return true if read of the revision ID is sane
	uint8_t version = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73bb      	strb	r3, [r7, #14]

	bool res = I2CRead(DeviceAddress, FUSB_DEVICE_ID, 1, &version);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685c      	ldr	r4, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7818      	ldrb	r0, [r3, #0]
 80073ce:	f107 030e 	add.w	r3, r7, #14
 80073d2:	2201      	movs	r2, #1
 80073d4:	2101      	movs	r1, #1
 80073d6:	47a0      	blx	r4
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
	if (!res)
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	f083 0301 	eor.w	r3, r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <_ZNK7FUSB30212fusb_read_idEv+0x32>
		return res;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	e008      	b.n	80073fe <_ZNK7FUSB30212fusb_read_idEv+0x44>
	if (version == 0 || version == 0xFF)
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <_ZNK7FUSB30212fusb_read_idEv+0x3e>
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2bff      	cmp	r3, #255	; 0xff
 80073f6:	d101      	bne.n	80073fc <_ZNK7FUSB30212fusb_read_idEv+0x42>
		return false;
 80073f8:	2300      	movs	r3, #0
 80073fa:	e000      	b.n	80073fe <_ZNK7FUSB30212fusb_read_idEv+0x44>
	return true;
 80073fc:	2301      	movs	r3, #1
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}

08007406 <_ZNK7FUSB30214fusb_read_byteEh>:
 * cfg: The FUSB302B to communicate with
 * addr: The memory address from which to read
 *
 * Returns the value read from addr.
 */
uint8_t FUSB302::fusb_read_byte(const uint8_t addr) const {
 8007406:	b590      	push	{r4, r7, lr}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	if (!I2CRead(DeviceAddress, addr, 1, (uint8_t*) data)) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685c      	ldr	r4, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7818      	ldrb	r0, [r3, #0]
 800741a:	f107 030c 	add.w	r3, r7, #12
 800741e:	78f9      	ldrb	r1, [r7, #3]
 8007420:	2201      	movs	r2, #1
 8007422:	47a0      	blx	r4
 8007424:	4603      	mov	r3, r0
 8007426:	f083 0301 	eor.w	r3, r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <_ZNK7FUSB30214fusb_read_byteEh+0x2e>
		return 0;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <_ZNK7FUSB30214fusb_read_byteEh+0x30>
	}
	return data[0];
 8007434:	7b3b      	ldrb	r3, [r7, #12]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	bd90      	pop	{r4, r7, pc}

0800743e <_ZNK7FUSB30215fusb_write_byteEhh>:
 *
 * cfg: The FUSB302B to communicate with
 * addr: The memory address to which we will write
 * byte: The value to write
 */
bool FUSB302::fusb_write_byte(const uint8_t addr, const uint8_t byte) const {
 800743e:	b590      	push	{r4, r7, lr}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
 800744a:	4613      	mov	r3, r2
 800744c:	70bb      	strb	r3, [r7, #2]
	return I2CWrite(DeviceAddress, addr, 1, (uint8_t*) &byte);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689c      	ldr	r4, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7818      	ldrb	r0, [r3, #0]
 8007456:	1cbb      	adds	r3, r7, #2
 8007458:	78f9      	ldrb	r1, [r7, #3]
 800745a:	2201      	movs	r2, #1
 800745c:	47a0      	blx	r4
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bd90      	pop	{r4, r7, pc}

08007468 <_ZN12PolicyEngine18readPendingMessageEv>:
 */

#include "policy_engine.h"
#include <pd.h>
#include <string.h>
void PolicyEngine::readPendingMessage() {
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  while (fusb.fusb_rx_pending()) {
 8007470:	e03a      	b.n	80074e8 <_ZN12PolicyEngine18readPendingMessageEv+0x80>
    /* Read the message */
    if (fusb.fusb_read_message(&irqMessage) == 0) {
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	33f0      	adds	r3, #240	; 0xf0
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f7ff fdf2 	bl	8007064 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf0c      	ite	eq
 8007486:	2301      	moveq	r3, #1
 8007488:	2300      	movne	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d026      	beq.n	80074de <_ZN12PolicyEngine18readPendingMessageEv+0x76>
      /* If it's a Soft_Reset, go to the soft reset state */
      if (PD_MSGTYPE_GET(&irqMessage) == PD_MSGTYPE_SOFT_RESET && PD_NUMOBJ_GET(&irqMessage) == 0) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	2b0d      	cmp	r3, #13
 800749c:	d10c      	bne.n	80074b8 <_ZN12PolicyEngine18readPendingMessageEv+0x50>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80074a4:	131b      	asrs	r3, r3, #12
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <_ZN12PolicyEngine18readPendingMessageEv+0x50>
        /* PE transitions to its reset state */
        notify(Notifications::RESET);
 80074ae:	2101      	movs	r1, #1
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f8aa 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
 80074b6:	e017      	b.n	80074e8 <_ZN12PolicyEngine18readPendingMessageEv+0x80>
      } else {
        /* Tell PolicyEngine to discard the message being transmitted */
        notify(Notifications::DISCARD);
 80074b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8a4 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
        /* Pass the message to the policy engine. */
        incomingMessages.push(&irqMessage);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	33f0      	adds	r3, #240	; 0xf0
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f000 f85c 	bl	800758c <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_>

        notify(PolicyEngine::Notifications::MSG_RX);
 80074d4:	2102      	movs	r1, #2
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f897 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
 80074dc:	e004      	b.n	80074e8 <_ZN12PolicyEngine18readPendingMessageEv+0x80>
      }
    } else {
      // Invalid message or SOP', still discard tx message
      /* Tell PolicyEngine to discard the message being transmitted */
      notify(Notifications::DISCARD);
 80074de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f891 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
  while (fusb.fusb_rx_pending()) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fda6 	bl	800703c <_ZNK7FUSB30215fusb_rx_pendingEv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1bd      	bne.n	8007472 <_ZN12PolicyEngine18readPendingMessageEv+0xa>
    }
  }
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZN12PolicyEngine10IRQOccuredEv>:

bool PolicyEngine::IRQOccured() {
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  fusb_status status;
  bool        returnValue = false;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  /* Read the FUSB302B status and interrupt registers */
  if (fusb.fusb_get_status(&status)) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f107 0208 	add.w	r2, r7, #8
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ff0e 	bl	8007336 <_ZNK7FUSB30215fusb_get_statusEP11fusb_status>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d030      	beq.n	8007582 <_ZN12PolicyEngine10IRQOccuredEv+0x82>

    /* If the I_GCRCSENT flag is set, tell the Protocol RX thread */
    // This means a message was received with a good CRC
    if (status.interruptb & FUSB_INTERRUPTB_I_GCRCSENT) {
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <_ZN12PolicyEngine10IRQOccuredEv+0x34>
      readPendingMessage();
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff ff9c 	bl	8007468 <_ZN12PolicyEngine18readPendingMessageEv>
      returnValue = true;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
    }

    /* If the I_TXSENT or I_RETRYFAIL flag is set, tell the Protocol TX
     * thread */
    if (status.interrupta & FUSB_INTERRUPTA_I_TXSENT) {
 8007534:	7abb      	ldrb	r3, [r7, #10]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d006      	beq.n	800754c <_ZN12PolicyEngine10IRQOccuredEv+0x4c>
      notify(Notifications::I_TXSENT);
 800753e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f861 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
    }
    if (status.interrupta & FUSB_INTERRUPTA_I_RETRYFAIL) {
 800754c:	7abb      	ldrb	r3, [r7, #10]
 800754e:	f003 0310 	and.w	r3, r3, #16
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <_ZN12PolicyEngine10IRQOccuredEv+0x64>
      notify(Notifications::I_RETRYFAIL);
 8007556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f855 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
    }

    /* If the I_OCP_TEMP and OVRTEMP flags are set, tell the Policy
     * Engine thread */
    if ((status.interrupta & FUSB_INTERRUPTA_I_OCP_TEMP) && (status.status1 & FUSB_STATUS1_OVRTEMP)) {
 8007564:	7abb      	ldrb	r3, [r7, #10]
 8007566:	b25b      	sxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	da0a      	bge.n	8007582 <_ZN12PolicyEngine10IRQOccuredEv+0x82>
 800756c:	7b7b      	ldrb	r3, [r7, #13]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <_ZN12PolicyEngine10IRQOccuredEv+0x82>
      notify(Notifications::I_OVRTEMP);
 8007576:	2120      	movs	r1, #32
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f846 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
    }
  }
  return returnValue;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_>:
 */
template <typename T, size_t size> class ringbuffer {
public:
  explicit ringbuffer() : begin(0), end(0), wrap(false) {}

  void push(const T *data) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]

    memcpy(buffer + end, data, sizeof(T));
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759e:	015b      	lsls	r3, r3, #5
 80075a0:	4413      	add	r3, r2
 80075a2:	2220      	movs	r2, #32
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fe03 	bl	80091b2 <memcpy>
    // If going to wrap, push start along to maintain order
    if (begin == end && wrap) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d10d      	bne.n	80075d8 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x4c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x4c>
      begin = (begin + 1) % size;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075cc:	3301      	adds	r3, #1
 80075ce:	f003 0203 	and.w	r2, r3, #3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
    end = (end + 1) % size;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075de:	3301      	adds	r3, #1
 80075e0:	f003 0203 	and.w	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (begin == end) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d103      	bne.n	8007602 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x76>
      wrap = true;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }
  }
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>:
#include <pd.h>
#include <stdbool.h>
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif
void PolicyEngine::notify(PolicyEngine::Notifications notification) {
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
	uint32_t val = (uint32_t) notification;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	60fb      	str	r3, [r7, #12]
	currentEvents |= val;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
#ifdef PD_DEBUG_OUTPUT
	printf("Notification received  %04X\r\n", (int) notification);
#endif

}
 8007624:	bf00      	nop
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <_ZN12PolicyEngine14printStateNameEv>:
void PolicyEngine::printStateName() {
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
			"PESinkSendSoftResetResp", "PESinkSendNotSupported",
			"PESinkChunkReceived", "PESinkNotSupportedReceived",
			"PESinkSourceUnresponsive", };
	printf("Current state - %s\r\n", names[(int) state]);
#endif
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <_ZN12PolicyEngine6threadEv>:
bool PolicyEngine::thread() {
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	switch (state) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800764e:	2b18      	cmp	r3, #24
 8007650:	f200 8117 	bhi.w	8007882 <_ZN12PolicyEngine6threadEv+0x242>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <_ZN12PolicyEngine6threadEv+0x1c>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	0800784d 	.word	0x0800784d
 8007660:	0800785f 	.word	0x0800785f
 8007664:	08007871 	.word	0x08007871
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076d3 	.word	0x080076d3
 8007670:	080076e5 	.word	0x080076e5
 8007674:	080076f7 	.word	0x080076f7
 8007678:	08007709 	.word	0x08007709
 800767c:	0800771b 	.word	0x0800771b
 8007680:	0800772d 	.word	0x0800772d
 8007684:	0800773f 	.word	0x0800773f
 8007688:	08007751 	.word	0x08007751
 800768c:	08007763 	.word	0x08007763
 8007690:	08007775 	.word	0x08007775
 8007694:	08007787 	.word	0x08007787
 8007698:	08007799 	.word	0x08007799
 800769c:	080077ab 	.word	0x080077ab
 80076a0:	080077bd 	.word	0x080077bd
 80076a4:	080077cf 	.word	0x080077cf
 80076a8:	080077e1 	.word	0x080077e1
 80076ac:	080077f3 	.word	0x080077f3
 80076b0:	08007805 	.word	0x08007805
 80076b4:	08007817 	.word	0x08007817
 80076b8:	0800783b 	.word	0x0800783b
 80076bc:	08007829 	.word	0x08007829

	case PESinkStartup:
		state = pe_sink_startup();
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9ea 	bl	8007a9a <_ZN12PolicyEngine15pe_sink_startupEv>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80076d0:	e0dc      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkDiscovery:
		state = pe_sink_discovery();
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9f6 	bl	8007ac4 <_ZN12PolicyEngine17pe_sink_discoveryEv>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80076e2:	e0d3      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSetupWaitCap:
		state = pe_sink_setup_wait_cap();
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f9f7 	bl	8007ad8 <_ZN12PolicyEngine22pe_sink_setup_wait_capEv>
 80076ea:	4603      	mov	r3, r0
 80076ec:	461a      	mov	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80076f4:	e0ca      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkWaitCap:
		state = pe_sink_wait_cap();
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f9fe 	bl	8007af8 <_ZN12PolicyEngine16pe_sink_wait_capEv>
 80076fc:	4603      	mov	r3, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007706:	e0c1      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkEvalCap:
		state = pe_sink_eval_cap();
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa5e 	bl	8007bca <_ZN12PolicyEngine16pe_sink_eval_capEv>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007718:	e0b8      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSelectCapTx:
		state = pe_sink_select_cap_tx();
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 facd 	bl	8007cba <_ZN12PolicyEngine21pe_sink_select_cap_txEv>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800772a:	e0af      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSelectCap:
		state = pe_sink_select_cap();
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fada 	bl	8007ce6 <_ZN12PolicyEngine18pe_sink_select_capEv>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800773c:	e0a6      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkWaitCapResp:
		state = pe_sink_wait_cap_resp();
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fae7 	bl	8007d12 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800774e:	e09d      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkTransitionSink:
		state = pe_sink_transition_sink();
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb5f 	bl	8007e14 <_ZN12PolicyEngine23pe_sink_transition_sinkEv>
 8007756:	4603      	mov	r3, r0
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007760:	e094      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkReady:
		state = pe_sink_ready();
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb90 	bl	8007e88 <_ZN12PolicyEngine13pe_sink_readyEv>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007772:	e08b      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkGetSourceCap:
		state = pe_sink_get_source_cap();
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fcde 	bl	8008136 <_ZN12PolicyEngine22pe_sink_get_source_capEv>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007784:	e082      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkGiveSinkCap:
		state = pe_sink_give_sink_cap();
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fcee 	bl	8008168 <_ZN12PolicyEngine21pe_sink_give_sink_capEv>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007796:	e079      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkHardReset:
		state = pe_sink_hard_reset();
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fd05 	bl	80081a8 <_ZN12PolicyEngine18pe_sink_hard_resetEv>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80077a8:	e070      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkTransitionDefault:
		state = pe_sink_transition_default();
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fd17 	bl	80081de <_ZN12PolicyEngine26pe_sink_transition_defaultEv>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80077ba:	e067      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkHandleSoftReset:
		state = pe_sink_soft_reset();
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fd1c 	bl	80081fa <_ZN12PolicyEngine18pe_sink_soft_resetEv>
 80077c2:	4603      	mov	r3, r0
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80077cc:	e05e      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftReset:
		state = pe_sink_send_soft_reset();
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fd29 	bl	8008226 <_ZN12PolicyEngine23pe_sink_send_soft_resetEv>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80077de:	e055      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftResetTxOK:
		state = pe_sink_send_soft_reset_tx_ok();
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fd39 	bl	8008258 <_ZN12PolicyEngine29pe_sink_send_soft_reset_tx_okEv>
 80077e6:	4603      	mov	r3, r0
 80077e8:	461a      	mov	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80077f0:	e04c      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftResetResp:
		state = pe_sink_send_soft_reset_resp();
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fd41 	bl	800827a <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv>
 80077f8:	4603      	mov	r3, r0
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007802:	e043      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendNotSupported:
		state = pe_sink_send_not_supported();
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fd80 	bl	800830a <_ZN12PolicyEngine26pe_sink_send_not_supportedEv>
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007814:	e03a      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkChunkReceived:
		state = pe_sink_chunk_received();
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fda4 	bl	8008364 <_ZN12PolicyEngine22pe_sink_chunk_receivedEv>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007826:	e031      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSourceUnresponsive:
		state = pe_sink_source_unresponsive();
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fdba 	bl	80083a2 <_ZN12PolicyEngine27pe_sink_source_unresponsiveEv>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007838:	e028      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkNotSupportedReceived:
		state = pe_sink_not_supported_received();
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fda0 	bl	8008380 <_ZN12PolicyEngine30pe_sink_not_supported_receivedEv>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800784a:	e01f      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingEvent:
		state = pe_sink_wait_event();
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fdb6 	bl	80083be <_ZN12PolicyEngine18pe_sink_wait_eventEv>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800785c:	e016      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingMessageTx:
		state = pe_sink_wait_send_done();
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fe50 	bl	8008504 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv>
 8007864:	4603      	mov	r3, r0
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800786e:	e00d      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingMessageGoodCRC:
		state = pe_sink_wait_good_crc();
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fdeb 	bl	800844c <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>
 8007876:	4603      	mov	r3, r0
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8007880:	e004      	b.n	800788c <_ZN12PolicyEngine6threadEv+0x24c>
	default:
		state = PESinkStartup;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2203      	movs	r2, #3
 8007886:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800788a:	bf00      	nop
	}
	if (state != PEWaitingEvent) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <_ZN12PolicyEngine6threadEv+0x25c>
		printStateName();
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fec9 	bl	800762e <_ZN12PolicyEngine14printStateNameEv>
	}
	return state != PEWaitingEvent;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bf14      	ite	ne
 80078a6:	2301      	movne	r3, #1
 80078a8:	2300      	moveq	r3, #0
 80078aa:	b2db      	uxtb	r3, r3
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <_ZN12PolicyEngine7isPD3_0Ev>:

bool PolicyEngine::isPD3_0() {
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	return (hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	bf0c      	ite	eq
 80078c8:	2301      	moveq	r3, #1
 80078ca:	2300      	movne	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>:
		}
	}
}
PolicyEngine::policy_engine_state PolicyEngine::pe_start_message_tx(
		PolicyEngine::policy_engine_state postTxState,
		PolicyEngine::policy_engine_state txFailState, pd_msg *msg) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	72fb      	strb	r3, [r7, #11]
 80078e6:	4613      	mov	r3, r2
 80078e8:	72bb      	strb	r3, [r7, #10]
#ifdef PD_DEBUG_OUTPUT
	printf("Starting message Tx - %02X\r\n", PD_MSGTYPE_GET(msg));
#endif
	if (PD_MSGTYPE_GET(msg) == PD_MSGTYPE_SOFT_RESET
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f003 031f 	and.w	r3, r3, #31
 80078f4:	2b0d      	cmp	r3, #13
 80078f6:	d10d      	bne.n	8007914 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0x3c>
			&& PD_NUMOBJ_GET(msg) == 0) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	131b      	asrs	r3, r3, #12
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0x3c>
		/* Clear MessageIDCounter */
		_tx_messageidcounter = 0;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		return postTxState; // Message is "done"
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	e032      	b.n	800797a <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0xa2>
	}
	postSendFailedState = txFailState;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	7aba      	ldrb	r2, [r7, #10]
 8007918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	postSendState = postTxState;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7afa      	ldrb	r2, [r7, #11]
 8007920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	msg->hdr &= ~PD_HDR_MESSAGEID;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	885b      	ldrh	r3, [r3, #2]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800792e:	b29a      	uxth	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	805a      	strh	r2, [r3, #2]
	msg->hdr |= (_tx_messageidcounter % 8) << PD_HDR_MESSAGEID_SHIFT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	885b      	ldrh	r3, [r3, #2]
 8007938:	b29b      	uxth	r3, r3
 800793a:	b21a      	sxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007942:	025b      	lsls	r3, r3, #9
 8007944:	b21b      	sxth	r3, r3
 8007946:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800794a:	b21b      	sxth	r3, r3
 800794c:	4313      	orrs	r3, r2
 800794e:	b21b      	sxth	r3, r3
 8007950:	b29a      	uxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	805a      	strh	r2, [r3, #2]

	/* PD 3.0 collision avoidance */
	if (PolicyEngine::isPD3_0()) {
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ffac 	bl	80078b4 <_ZN12PolicyEngine7isPD3_0Ev>
		//    while (fusb_get_typec_current() != fusb_sink_tx_ok) {
		//      vTaskDelay(TICKS_10MS);
		//    }
	}
	/* Send the message to the PHY */
	fusb.fusb_send_message(msg);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fb2d 	bl	8006fc0 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg>
#ifdef PD_DEBUG_OUTPUT
	printf("Message queued to send\r\n");
#endif

	// Setup waiting for notification
	return waitForEvent(PEWaitingMessageTx,
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
 800796a:	f640 6201 	movw	r2, #3585	; 0xe01
 800796e:	2101      	movs	r1, #1
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 f817 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007976:	4603      	mov	r3, r0
			(uint32_t) Notifications::RESET | (uint32_t) Notifications::DISCARD
					| (uint32_t) Notifications::I_TXSENT
					| (uint32_t) Notifications::I_RETRYFAIL, 0xFFFFFFFF);
 8007978:	bf00      	nop
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <_ZN12PolicyEngine11clearEventsEm>:

void PolicyEngine::clearEvents(uint32_t notification) {
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
	currentEvents &= ~notification;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	43db      	mvns	r3, r3
 8007994:	401a      	ands	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	641a      	str	r2, [r3, #64]	; 0x40
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	bc80      	pop	{r7}
 80079a2:	4770      	bx	lr

080079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>:

PolicyEngine::policy_engine_state PolicyEngine::waitForEvent(
		PolicyEngine::policy_engine_state evalState, uint32_t notification,
		uint32_t timeout) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	460b      	mov	r3, r1
 80079b2:	72fb      	strb	r3, [r7, #11]
	// Record the new state, and the desired notifications mask, then schedule the waiter state
	waitingEventsMask = notification;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef PD_DEBUG_OUTPUT
	printf("Waiting for events %04X\r\n", (int) notification);
#endif

	// If notification is already present, we can continue straight to eval state
	if (currentEvents & waitingEventsMask) {
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x28>
		return evalState;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	e030      	b.n	8007a2e <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x8a>
	}
	//If waiting for message rx, but one is in the buffer, jump to eval
	if ((waitingEventsMask & (uint32_t) Notifications::MSG_RX)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d014      	beq.n	8007a02 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x5e>
			== (uint32_t) Notifications::MSG_RX) {
		if (incomingMessages.getOccupied() > 0) {
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3364      	adds	r3, #100	; 0x64
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f82a 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bf14      	ite	ne
 80079e8:	2301      	movne	r3, #1
 80079ea:	2300      	moveq	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x5e>
			currentEvents|=(uint32_t) Notifications::MSG_RX;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
			return evalState;
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	e015      	b.n	8007a2e <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x8a>
		}
	}
	postNotifcationEvalState = evalState;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	7afa      	ldrb	r2, [r7, #11]
 8007a06:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	if (timeout == 0xFFFFFFFF) {
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d104      	bne.n	8007a1c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x78>
		waitingEventsTimeout = 0xFFFFFFFF;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a1a:	e007      	b.n	8007a2c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x88>
	} else {
		waitingEventsTimeout = getTimeStamp() + timeout;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	4798      	blx	r3
 8007a22:	4602      	mov	r2, r0
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	441a      	add	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	return policy_engine_state::PEWaitingEvent;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>:
    if (wrap && (begin == 0)) {
      wrap = false;
    }
  }
  // Returns number of objects queued in the buffer
  size_t getOccupied() const {
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
    if (end == begin) {
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d108      	bne.n	8007a60 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x2a>
      return wrap ? size : 0;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x26>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	e019      	b.n	8007a90 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e017      	b.n	8007a90 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
    } else if (end > begin) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d907      	bls.n	8007a80 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x4a>
      return end - begin;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	e007      	b.n	8007a90 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
    } else {
      return size + end - begin;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	3304      	adds	r3, #4
    }
  }
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <_ZN12PolicyEngine15pe_sink_startupEv>:
#include <stdbool.h>
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_startup() {
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
	/* We don't have an explicit contract currently */
	_explicit_contract = false;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	PPSTimerEnabled = false;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	currentEvents = 0;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40
	 * state: startup and exiting hard reset.  On startup, the protocol layer
	 * is reset by the startup procedure.  When exiting hard reset, the
	 * protocol layer is reset by the hard reset state machine.  Since it's
	 * already done somewhere else, there's no need to do it again here. */

	return PESinkDiscovery;
 8007ab8:	2304      	movs	r3, #4
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr

08007ac4 <_ZN12PolicyEngine17pe_sink_discoveryEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_discovery() {
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

	fusb.runCCLineSelection();

	*/

	return PESinkSetupWaitCap;
 8007acc:	2305      	movs	r3, #5
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr

08007ad8 <_ZN12PolicyEngine22pe_sink_setup_wait_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_setup_wait_cap() { //
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

	return waitForEvent(policy_engine_state::PESinkWaitCap,
 8007ae0:	f242 7310 	movw	r3, #10000	; 0x2710
 8007ae4:	2223      	movs	r2, #35	; 0x23
 8007ae6:	2106      	movs	r1, #6
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff ff5b 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007aee:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX
					| (uint32_t) Notifications::I_OVRTEMP
					| (uint32_t) Notifications::RESET,
			// Wait for cap timeout
			PD_T_TYPEC_SINK_WAIT_CAP);
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <_ZN12PolicyEngine16pe_sink_wait_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_cap() {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	/* Fetch a message from the protocol layer */
	uint32_t evt = currentEvents;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	60fb      	str	r3, [r7, #12]
	clearEvents();
 8007b06:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff ff39 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>
#ifdef PD_DEBUG_OUTPUT
	printf("Wait Cap Event %04X\r\n", (int) evt);
#endif

	/* If we're too hot, we shouldn't negotiate power yet */
	if (evt & (uint32_t) Notifications::I_OVRTEMP) {
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <_ZN12PolicyEngine16pe_sink_wait_capEv+0x26>
		return PESinkSetupWaitCap;
 8007b1a:	2305      	movs	r3, #5
 8007b1c:	e051      	b.n	8007bc2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xca>
	}

	/* If we got a message */
	if (incomingMessages.getOccupied() > 0) {
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3364      	adds	r3, #100	; 0x64
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff ff87 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	2301      	movne	r3, #1
 8007b30:	2300      	moveq	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d043      	beq.n	8007bc0 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc8>
		/* Get the message */
		while (incomingMessages.getOccupied()) {
 8007b38:	e035      	b.n	8007ba6 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xae>
			incomingMessages.pop(&tempMessage);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3344      	adds	r3, #68	; 0x44
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f000 fd40 	bl	80085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>
			/* If we got a Source_Capabilities message, read it. */
			if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOURCE_CAPABILITIES
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d125      	bne.n	8007ba6 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xae>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b60:	131b      	asrs	r3, r3, #12
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd1d      	ble.n	8007ba6 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xae>
#ifdef PD_DEBUG_OUTPUT
				printf("Source Capabilities message RX\r\n");
#endif

				/* First, determine what PD revision we're using */
				if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_1_0) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d115      	bne.n	8007ba2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xaa>
					/* If the other end is using at least version 3.0, we'll
					 * use version 3.0. */
					if ((tempMessage.hdr & PD_HDR_SPECREV) >= PD_SPECREV_3_0) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b80:	2b7f      	cmp	r3, #127	; 0x7f
 8007b82:	dd07      	ble.n	8007b94 <_ZN12PolicyEngine16pe_sink_wait_capEv+0x9c>
						hdr_template |= PD_SPECREV_3_0;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007b92:	e006      	b.n	8007ba2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xaa>
						/* Otherwise, use 2.0.  Don't worry about the 1.0 case
						 * because we don't have hardware for PD 1.0 signaling. */
					} else {
						hdr_template |= PD_SPECREV_2_0;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	85da      	strh	r2, [r3, #46]	; 0x2e
					}
				}
				return PESinkEvalCap;
 8007ba2:	2307      	movs	r3, #7
 8007ba4:	e00d      	b.n	8007bc2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xca>
		while (incomingMessages.getOccupied()) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3364      	adds	r3, #100	; 0x64
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff ff43 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bf14      	ite	ne
 8007bb6:	2301      	movne	r3, #1
 8007bb8:	2300      	moveq	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1bc      	bne.n	8007b3a <_ZN12PolicyEngine16pe_sink_wait_capEv+0x42>
			}
		}
	}

	/* If we failed to get a message, wait longer */
	return PESinkSetupWaitCap;
 8007bc0:	2305      	movs	r3, #5
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <_ZN12PolicyEngine16pe_sink_eval_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_eval_cap() {
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
	/* If we have a Source_Capabilities message, remember the index of the
	 * first PPS APDO so we can check if the request is for a PPS APDO in
	 * PE_SNK_Select_Cap. */
	/* Start by assuming we won't find a PPS APDO (set the index greater
	 * than the maximum possible) */
	_pps_index = 0xFF;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	22ff      	movs	r2, #255	; 0xff
 8007bd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	/* New capabilities also means we can't be making a request from the
	 * same PPS APDO */
	/* Search for the first PPS APDO */
	for (int i = 0; i < PD_NUMOBJ_GET(&tempMessage); i++) {
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e01f      	b.n	8007c20 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x56>
		if ((tempMessage.obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_AUGMENTED
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3310      	adds	r3, #16
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007bf0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007bf4:	d111      	bne.n	8007c1a <_ZN12PolicyEngine16pe_sink_eval_capEv+0x50>
				&& (tempMessage.obj[i] & PD_APDO_TYPE) == PD_APDO_TYPE_PPS) {
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <_ZN12PolicyEngine16pe_sink_eval_capEv+0x50>
			_pps_index = i + 1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8007c18:	e00b      	b.n	8007c32 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x68>
	for (int i = 0; i < PD_NUMOBJ_GET(&tempMessage); i++) {
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c26:	131b      	asrs	r3, r3, #12
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	dbd6      	blt.n	8007be0 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x16>
		}
	}
	_unconstrained_power = tempMessage.obj[0] & PD_PDO_SRC_FIXED_UNCONSTRAINED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Ask the DPM what to request */
	if (pdbs_dpm_evaluate_capability(&tempMessage, &_last_dpm_request)) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	f102 0044 	add.w	r0, r2, #68	; 0x44
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4798      	blx	r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d025      	beq.n	8007cb0 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe6>
		_last_dpm_request.hdr |= hdr_template;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
		/* If we're using PD 3.0 */
		if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d113      	bne.n	8007cac <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe2>
			/* If the request was for a PPS APDO, start time callbacks if not started
			 */
			if (PD_RDO_OBJPOS_GET(&_last_dpm_request) >= _pps_index) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007c8a:	0f1b      	lsrs	r3, r3, #28
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d304      	bcc.n	8007ca4 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xda>
				PPSTimerEnabled = true;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 8007ca2:	e003      	b.n	8007cac <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe2>
			} else {
				PPSTimerEnabled = false;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
			}
		}
		return PESinkSelectCapTx;
 8007cac:	2308      	movs	r3, #8
 8007cae:	e000      	b.n	8007cb2 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe8>
	}

	return PESinkWaitCap;
 8007cb0:	2306      	movs	r3, #6
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <_ZN12PolicyEngine21pe_sink_select_cap_txEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_select_cap_tx() {
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]

	/* Transmit the request */
	clearEvents(); // clear all pending incase of an rx while prepping
 8007cc2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff fe5b 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>

#ifdef PD_DEBUG_OUTPUT
	printf("Sending desired capability\r\n");
#endif
	return pe_start_message_tx(policy_engine_state::PESinkSelectCap,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007cd2:	220f      	movs	r2, #15
 8007cd4:	2109      	movs	r1, #9
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fdfe 	bl	80078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8007cdc:	4603      	mov	r3, r0
			PESinkHardReset, &_last_dpm_request);
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <_ZN12PolicyEngine18pe_sink_select_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_select_cap() {
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
	// Have transmitted the selected cap, transition to waiting for the response
	clearEvents();
 8007cee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff fe45 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>
	// wait for a response
	return waitForEvent(PESinkWaitCapResp,
 8007cf8:	f640 238c 	movw	r3, #2700	; 0xa8c
 8007cfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d00:	210a      	movs	r1, #10
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fe4e 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007d08:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX | (uint32_t) Notifications::RESET
					| (uint32_t) Notifications::TIMEOUT, PD_T_SENDER_RESPONSE);
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_cap_resp() {
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
	/* Wait for a response */
	clearEvents();
 8007d1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fe2f 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>

	/* Get the response message */
	while (incomingMessages.getOccupied()) {
 8007d24:	e05b      	b.n	8007dde <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xcc>
		incomingMessages.pop(&tempMessage);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3344      	adds	r3, #68	; 0x44
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f000 fc4a 	bl	80085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>
		/* If the source accepted our request, wait for the new power message*/
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_ACCEPT
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d110      	bne.n	8007d68 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x56>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d4c:	131b      	asrs	r3, r3, #12
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d108      	bne.n	8007d68 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x56>
			return waitForEvent(PESinkTransitionSink,
 8007d56:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	210b      	movs	r1, #11
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fe20 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007d64:	4603      	mov	r3, r0
					(uint32_t) Notifications::MSG_RX
							| (uint32_t) Notifications::RESET,
					PD_T_PS_TRANSITION);
 8007d66:	e051      	b.n	8007e0c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xfa>
			/* If the message was a Soft_Reset, do the soft reset procedure */
		} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b0d      	cmp	r3, #13
 8007d74:	d109      	bne.n	8007d8a <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x78>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d7c:	131b      	asrs	r3, r3, #12
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x78>
			return PESinkHandleSoftReset;
 8007d86:	2311      	movs	r3, #17
 8007d88:	e040      	b.n	8007e0c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xfa>
			/* If the message was Wait or Reject */
		} else if ((PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_REJECT
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d006      	beq.n	8007da6 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x94>
				|| PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_WAIT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	2b0c      	cmp	r3, #12
 8007da4:	d11b      	bne.n	8007dde <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xcc>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dac:	131b      	asrs	r3, r3, #12
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d113      	bne.n	8007dde <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xcc>
#ifdef PD_DEBUG_OUTPUT
			printf("Requested Capabilities Rejected\r\n");
#endif
			/* If we don't have an explicit contract, wait for capabilities */
			if (!_explicit_contract) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dbc:	f083 0301 	eor.w	r3, r3, #1
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xb8>
				return PESinkSetupWaitCap;
 8007dc6:	2305      	movs	r3, #5
 8007dc8:	e020      	b.n	8007e0c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xfa>
				/* If we do have an explicit contract, go to the ready state */
			} else {
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL,
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295
 8007dce:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007dd2:	210c      	movs	r1, #12
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff fde5 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007dda:	4603      	mov	r3, r0
						0xFFFFFFFF);
 8007ddc:	e016      	b.n	8007e0c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xfa>
	while (incomingMessages.getOccupied()) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3364      	adds	r3, #100	; 0x64
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff fe27 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d196      	bne.n	8007d26 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x14>
			}
		}
	}
	return waitForEvent(PESinkWaitCapResp,
 8007df8:	f640 238c 	movw	r3, #2700	; 0xa8c
 8007dfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e00:	210a      	movs	r1, #10
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fdce 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007e08:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX | (uint32_t) Notifications::RESET
					| (uint32_t) Notifications::TIMEOUT, PD_T_SENDER_RESPONSE);
 8007e0a:	bf00      	nop
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <_ZN12PolicyEngine23pe_sink_transition_sinkEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_transition_sink() {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	/* Wait for the PS_RDY message */
	clearEvents();
 8007e1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fdae 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>
	/* If we received a message, read it */
	while (incomingMessages.getOccupied()) {
 8007e26:	e01d      	b.n	8007e64 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x50>

		incomingMessages.pop(&tempMessage);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3344      	adds	r3, #68	; 0x44
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f000 fbc9 	bl	80085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* If we got a PS_RDY, handle it */
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PS_RDY
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	2b06      	cmp	r3, #6
 8007e46:	d10d      	bne.n	8007e64 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x50>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e4e:	131b      	asrs	r3, r3, #12
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d105      	bne.n	8007e64 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x50>
			/* We just finished negotiating an explicit contract */
			_explicit_contract = true;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

			/* Negotiation finished */
			return PESinkReady;
 8007e60:	230c      	movs	r3, #12
 8007e62:	e00d      	b.n	8007e80 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x6c>
	while (incomingMessages.getOccupied()) {
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3364      	adds	r3, #100	; 0x64
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff fde4 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1d4      	bne.n	8007e28 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x14>
			/* If there was a protocol error, send a hard reset */
		}
	}
	// Timeout
	return PESinkSendSoftReset;
 8007e7e:	2312      	movs	r3, #18
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <_ZN12PolicyEngine13pe_sink_readyEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_ready() {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	uint32_t evt = currentEvents;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	60fb      	str	r3, [r7, #12]
	clearEvents();
 8007e96:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff fd71 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>
	/* If SinkPPSPeriodicTimer ran out, send a new request */
	if (evt & (uint32_t) Notifications::PPS_REQUEST) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <_ZN12PolicyEngine13pe_sink_readyEv+0x26>
		return PESinkSelectCap;
 8007eaa:	2309      	movs	r3, #9
 8007eac:	e13f      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}

	/* If we overheated, send a hard reset */
	if (evt & (uint32_t) Notifications::I_OVRTEMP) {
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <_ZN12PolicyEngine13pe_sink_readyEv+0x34>
		return PESinkHardReset;
 8007eb8:	230f      	movs	r3, #15
 8007eba:	e138      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}
	/* If the DPM wants us to, send a Get_Source_Cap message */
	if (evt & (uint32_t) Notifications::GET_SOURCE_CAP) {
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <_ZN12PolicyEngine13pe_sink_readyEv+0x42>
		return PESinkGetSourceCap;
 8007ec6:	230d      	movs	r3, #13
 8007ec8:	e131      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}
	/* If the DPM wants new power, let it figure out what power it wants
	 * exactly.  This isn't exactly the transition from the spec (that would be
	 * SelectCap, not EvalCap), but this works better with the particular
	 * design of this firmware. */
	if (evt & (uint32_t) Notifications::NEW_POWER) {
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <_ZN12PolicyEngine13pe_sink_readyEv+0x50>
		/* Tell the protocol layer we're starting an AMS */
		return PESinkEvalCap;
 8007ed4:	2307      	movs	r3, #7
 8007ed6:	e12a      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}

	/* If we received a message */
	if (evt & (uint32_t) Notifications::MSG_RX) {
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 811b 	beq.w	800811a <_ZN12PolicyEngine13pe_sink_readyEv+0x292>
		if (incomingMessages.getOccupied()) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3364      	adds	r3, #100	; 0x64
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fda4 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bf14      	ite	ne
 8007ef4:	2301      	movne	r3, #1
 8007ef6:	2300      	moveq	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 810d 	beq.w	800811a <_ZN12PolicyEngine13pe_sink_readyEv+0x292>

			incomingMessages.pop(&tempMessage);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3344      	adds	r3, #68	; 0x44
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f000 fb5d 	bl	80085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

			/* Ignore vendor-defined messages */
			if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_VENDOR_DEFINED
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	2b0f      	cmp	r3, #15
 8007f1e:	d111      	bne.n	8007f44 <_ZN12PolicyEngine13pe_sink_readyEv+0xbc>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f26:	131b      	asrs	r3, r3, #12
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd09      	ble.n	8007f44 <_ZN12PolicyEngine13pe_sink_readyEv+0xbc>
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL);
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007f38:	210c      	movs	r1, #12
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fd32 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e0f4      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Ignore Ping messages */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PING
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d111      	bne.n	8007f76 <_ZN12PolicyEngine13pe_sink_readyEv+0xee>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f58:	131b      	asrs	r3, r3, #12
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <_ZN12PolicyEngine13pe_sink_readyEv+0xee>
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL);
 8007f62:	f04f 33ff 	mov.w	r3, #4294967295
 8007f66:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007f6a:	210c      	movs	r1, #12
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fd19 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8007f72:	4603      	mov	r3, r0
 8007f74:	e0db      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* DR_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_DR_SWAP
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	2b09      	cmp	r3, #9
 8007f82:	d109      	bne.n	8007f98 <_ZN12PolicyEngine13pe_sink_readyEv+0x110>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f8a:	131b      	asrs	r3, r3, #12
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <_ZN12PolicyEngine13pe_sink_readyEv+0x110>
				return PESinkSendNotSupported;
 8007f94:	2315      	movs	r3, #21
 8007f96:	e0ca      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Get_Source_Cap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GET_SOURCE_CAP
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	2b07      	cmp	r3, #7
 8007fa4:	d109      	bne.n	8007fba <_ZN12PolicyEngine13pe_sink_readyEv+0x132>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fac:	131b      	asrs	r3, r3, #12
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <_ZN12PolicyEngine13pe_sink_readyEv+0x132>
				return PESinkSendNotSupported;
 8007fb6:	2315      	movs	r3, #21
 8007fb8:	e0b9      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* PR_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PR_SWAP
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fc0:	f003 031f 	and.w	r3, r3, #31
 8007fc4:	2b0a      	cmp	r3, #10
 8007fc6:	d109      	bne.n	8007fdc <_ZN12PolicyEngine13pe_sink_readyEv+0x154>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fce:	131b      	asrs	r3, r3, #12
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <_ZN12PolicyEngine13pe_sink_readyEv+0x154>
				return PESinkSendNotSupported;
 8007fd8:	2315      	movs	r3, #21
 8007fda:	e0a8      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* VCONN_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_VCONN_SWAP
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2b0b      	cmp	r3, #11
 8007fe8:	d109      	bne.n	8007ffe <_ZN12PolicyEngine13pe_sink_readyEv+0x176>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ff0:	131b      	asrs	r3, r3, #12
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <_ZN12PolicyEngine13pe_sink_readyEv+0x176>
				return PESinkSendNotSupported;
 8007ffa:	2315      	movs	r3, #21
 8007ffc:	e097      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Request messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_REQUEST
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008004:	f003 031f 	and.w	r3, r3, #31
 8008008:	2b02      	cmp	r3, #2
 800800a:	d109      	bne.n	8008020 <_ZN12PolicyEngine13pe_sink_readyEv+0x198>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008012:	131b      	asrs	r3, r3, #12
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	2b00      	cmp	r3, #0
 800801a:	dd01      	ble.n	8008020 <_ZN12PolicyEngine13pe_sink_readyEv+0x198>
				return PESinkSendNotSupported;
 800801c:	2315      	movs	r3, #21
 800801e:	e086      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Sink_Capabilities messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b04      	cmp	r3, #4
 800802c:	d109      	bne.n	8008042 <_ZN12PolicyEngine13pe_sink_readyEv+0x1ba>
					== PD_MSGTYPE_SINK_CAPABILITIES
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008034:	131b      	asrs	r3, r3, #12
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	dd01      	ble.n	8008042 <_ZN12PolicyEngine13pe_sink_readyEv+0x1ba>
				return PESinkSendNotSupported;
 800803e:	2315      	movs	r3, #21
 8008040:	e075      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Handle GotoMin messages */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GOTOMIN
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2b02      	cmp	r3, #2
 800804e:	d109      	bne.n	8008064 <_ZN12PolicyEngine13pe_sink_readyEv+0x1dc>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008056:	131b      	asrs	r3, r3, #12
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <_ZN12PolicyEngine13pe_sink_readyEv+0x1dc>
				return PESinkSendNotSupported;
 8008060:	2315      	movs	r3, #21
 8008062:	e064      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Evaluate new Source_Capabilities */
			} else if (PD_MSGTYPE_GET(&tempMessage)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	2b01      	cmp	r3, #1
 8008070:	d109      	bne.n	8008086 <_ZN12PolicyEngine13pe_sink_readyEv+0x1fe>
					== PD_MSGTYPE_SOURCE_CAPABILITIES
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008078:	131b      	asrs	r3, r3, #12
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	2b00      	cmp	r3, #0
 8008080:	dd01      	ble.n	8008086 <_ZN12PolicyEngine13pe_sink_readyEv+0x1fe>
				return PESinkEvalCap;
 8008082:	2307      	movs	r3, #7
 8008084:	e053      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Give sink capabilities when asked */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GET_SINK_CAP
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	2b08      	cmp	r3, #8
 8008092:	d109      	bne.n	80080a8 <_ZN12PolicyEngine13pe_sink_readyEv+0x220>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800809a:	131b      	asrs	r3, r3, #12
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <_ZN12PolicyEngine13pe_sink_readyEv+0x220>
				return PESinkGiveSinkCap;
 80080a4:	230e      	movs	r3, #14
 80080a6:	e042      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* If the message was a Soft_Reset, do the soft reset procedure */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	2b0d      	cmp	r3, #13
 80080b4:	d109      	bne.n	80080ca <_ZN12PolicyEngine13pe_sink_readyEv+0x242>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080bc:	131b      	asrs	r3, r3, #12
 80080be:	f003 0307 	and.w	r3, r3, #7
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <_ZN12PolicyEngine13pe_sink_readyEv+0x242>
				return PESinkHandleSoftReset;
 80080c6:	2311      	movs	r3, #17
 80080c8:	e031      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* PD 3.0 messges */
			} else if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d121      	bne.n	800811a <_ZN12PolicyEngine13pe_sink_readyEv+0x292>
				/* If the message is a multi-chunk extended message, let it
				 * time out. */
				if ((tempMessage.hdr & PD_HDR_EXT)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080dc:	b21b      	sxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	da08      	bge.n	80080f4 <_ZN12PolicyEngine13pe_sink_readyEv+0x26c>
						&& (PD_DATA_SIZE_GET(&tempMessage)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80080e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ec:	2b1a      	cmp	r3, #26
 80080ee:	dd01      	ble.n	80080f4 <_ZN12PolicyEngine13pe_sink_readyEv+0x26c>
								> PD_MAX_EXT_MSG_LEGACY_LEN)) {

					return PESinkChunkReceived;
 80080f0:	2316      	movs	r3, #22
 80080f2:	e01c      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
					/* Tell the DPM a message we sent got a response of
					 * Not_Supported. */
				} else if (PD_MSGTYPE_GET(&tempMessage)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d109      	bne.n	8008116 <_ZN12PolicyEngine13pe_sink_readyEv+0x28e>
						== PD_MSGTYPE_NOT_SUPPORTED
						&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008108:	131b      	asrs	r3, r3, #12
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <_ZN12PolicyEngine13pe_sink_readyEv+0x28e>

					return PESinkNotSupportedReceived;
 8008112:	2317      	movs	r3, #23
 8008114:	e00b      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
					/* If we got an unknown message, send a soft reset */
				} else {

					return PESinkSendSoftReset;
 8008116:	2312      	movs	r3, #18
 8008118:	e009      	b.n	800812e <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				}
			}
		}
	}

	return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL, 0xFFFFFFFF);
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8008122:	210c      	movs	r1, #12
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff fc3d 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 800812a:	4603      	mov	r3, r0
 800812c:	bf00      	nop
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <_ZN12PolicyEngine22pe_sink_get_source_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_get_source_cap() {
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
	/* Get a message object */
	pd_msg *get_source_cap = &tempMessage;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3344      	adds	r3, #68	; 0x44
 8008142:	60fb      	str	r3, [r7, #12]
	/* Make a Get_Source_Cap message */
	get_source_cap->hdr = hdr_template | PD_MSGTYPE_GET_SOURCE_CAP
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008148:	f043 0307 	orr.w	r3, r3, #7
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	805a      	strh	r2, [r3, #2]
			| PD_NUMOBJ(0);
	/* Transmit the Get_Source_Cap */
	// On fail -> hard reset, on send -> Sink Ready
	return pe_start_message_tx(PESinkReady, PESinkHardReset, get_source_cap);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	220f      	movs	r2, #15
 8008156:	210c      	movs	r1, #12
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff fbbd 	bl	80078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 800815e:	4603      	mov	r3, r0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <_ZN12PolicyEngine21pe_sink_give_sink_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_give_sink_cap() {
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	/* Get a message object */
	pd_msg *snk_cap = &tempMessage;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3344      	adds	r3, #68	; 0x44
 8008174:	60fb      	str	r3, [r7, #12]
	/* Get our capabilities from the DPM */
	pdbs_dpm_get_sink_capability(snk_cap,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
			((hdr_template & PD_HDR_SPECREV) >= PD_SPECREV_3_0));
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800817e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
	pdbs_dpm_get_sink_capability(snk_cap,
 8008182:	2a7f      	cmp	r2, #127	; 0x7f
 8008184:	bfcc      	ite	gt
 8008186:	2201      	movgt	r2, #1
 8008188:	2200      	movle	r2, #0
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	4611      	mov	r1, r2
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	4798      	blx	r3
	/* Transmit our capabilities */
	return pe_start_message_tx(PESinkReady, PESinkHardReset, snk_cap);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	220f      	movs	r2, #15
 8008196:	210c      	movs	r1, #12
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fb9d 	bl	80078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <_ZN12PolicyEngine18pe_sink_hard_resetEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_hard_reset() {
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	 * source is unresponsive. */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending hard reset\r\n");
#endif
	if (_hard_reset_counter > PD_N_HARD_RESET_COUNT) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	dd01      	ble.n	80081be <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x16>
		return PESinkSourceUnresponsive;
 80081ba:	2318      	movs	r3, #24
 80081bc:	e00a      	b.n	80081d4 <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x2c>
	}
	// So, we could send a hardreset here; however that will cause a power cycle
	// on the PSU end.. Which will then reset this MCU So therefore we went get
	// anywhere :)
	/* Increment HardResetCounter */
	_hard_reset_counter++;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	3301      	adds	r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	b25a      	sxtb	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	return PESinkTransitionDefault;
 80081d2:	2310      	movs	r3, #16
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <_ZN12PolicyEngine26pe_sink_transition_defaultEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_transition_default() {
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
	_explicit_contract = false;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* There is no local hardware to reset. */
	/* Since we never change our data role from UFP, there is no reason to set
	 * it here. */

	return PESinkStartup;
 80081ee:	2303      	movs	r3, #3
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <_ZN12PolicyEngine18pe_sink_soft_resetEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_soft_reset() {
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b08a      	sub	sp, #40	; 0x28
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
	 * when a Soft_Reset message is received. */

	/* Get a message object */
	pd_msg accept;
	/* Make an soft reset message */
	accept.hdr = hdr_template | PD_MSGTYPE_SOFT_RESET | PD_NUMOBJ(0);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008206:	f043 030d 	orr.w	r3, r3, #13
 800820a:	b29b      	uxth	r3, r3
 800820c:	817b      	strh	r3, [r7, #10]
	/* Transmit the Accept */
	return pe_start_message_tx(PESinkSetupWaitCap, PESinkHardReset, &accept);
 800820e:	f107 0308 	add.w	r3, r7, #8
 8008212:	220f      	movs	r2, #15
 8008214:	2105      	movs	r1, #5
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fb5e 	bl	80078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3728      	adds	r7, #40	; 0x28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <_ZN12PolicyEngine23pe_sink_send_soft_resetEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset() {
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]

#ifdef PD_DEBUG_OUTPUT
	printf("Sending soft reset\r\n");
#endif
	/* Get a message object */
	pd_msg *softrst = &tempMessage;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3344      	adds	r3, #68	; 0x44
 8008232:	60fb      	str	r3, [r7, #12]
	/* Make a Soft_Reset message */
	softrst->hdr = hdr_template | PD_MSGTYPE_SOFT_RESET | PD_NUMOBJ(0);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008238:	f043 030d 	orr.w	r3, r3, #13
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	805a      	strh	r2, [r3, #2]
	/* Transmit the soft reset */
	return pe_start_message_tx(PESinkSendSoftResetTxOK, PESinkHardReset,
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	220f      	movs	r2, #15
 8008246:	2113      	movs	r1, #19
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fb45 	bl	80078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 800824e:	4603      	mov	r3, r0
			softrst);
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <_ZN12PolicyEngine29pe_sink_send_soft_reset_tx_okEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset_tx_ok() {
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	// Transmit is good, wait for response event
	return waitForEvent(PESinkSendSoftResetResp,
 8008260:	f640 238c 	movw	r3, #2700	; 0xa8c
 8008264:	f241 0203 	movw	r2, #4099	; 0x1003
 8008268:	2114      	movs	r1, #20
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fb9a 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8008270:	4603      	mov	r3, r0
			(uint32_t) Notifications::TIMEOUT | (uint32_t) Notifications::MSG_RX
					| (uint32_t) Notifications::RESET, PD_T_SENDER_RESPONSE);
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset_resp() {
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]

	/* Wait for a response */
	clearEvents();
 8008282:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff fb7b 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>

	/* Get the response message */
	if (incomingMessages.getOccupied()) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3364      	adds	r3, #100	; 0x64
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fbd0 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	bf14      	ite	ne
 800829c:	2301      	movne	r3, #1
 800829e:	2300      	moveq	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d02c      	beq.n	8008300 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x86>

		incomingMessages.pop(&tempMessage);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3344      	adds	r3, #68	; 0x44
 80082b0:	4619      	mov	r1, r3
 80082b2:	4610      	mov	r0, r2
 80082b4:	f000 f98a 	bl	80085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* If the source accepted our soft reset, wait for capabilities. */
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_ACCEPT
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082be:	f003 031f 	and.w	r3, r3, #31
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d109      	bne.n	80082da <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x60>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082cc:	131b      	asrs	r3, r3, #12
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x60>

			return PESinkSetupWaitCap;
 80082d6:	2305      	movs	r3, #5
 80082d8:	e013      	b.n	8008302 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
			/* If the message was a Soft_Reset, do the soft reset procedure */
		} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	2b0d      	cmp	r3, #13
 80082e6:	d109      	bne.n	80082fc <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x82>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082ee:	131b      	asrs	r3, r3, #12
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x82>
			return PESinkHandleSoftReset;
 80082f8:	2311      	movs	r3, #17
 80082fa:	e002      	b.n	8008302 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
			/* Otherwise, send a hard reset */
		} else {
			return PESinkHardReset;
 80082fc:	230f      	movs	r3, #15
 80082fe:	e000      	b.n	8008302 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
		}
	}
	return PESinkHardReset;
 8008300:	230f      	movs	r3, #15
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_ZN12PolicyEngine26pe_sink_send_not_supportedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_not_supported() {
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
	/* Get a message object */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending not supported\r\n");
#endif
	if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_2_0) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	d108      	bne.n	8008330 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x26>
		/* Make a Reject message */
		tempMessage.hdr = hdr_template | PD_MSGTYPE_REJECT | PD_NUMOBJ(0);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008322:	f043 0304 	orr.w	r3, r3, #4
 8008326:	b29a      	uxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800832e:	e00d      	b.n	800834c <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x42>
	} else if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008334:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008338:	2b80      	cmp	r3, #128	; 0x80
 800833a:	d107      	bne.n	800834c <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x42>
		/* Make a Not_Supported message */
		tempMessage.hdr =
				hdr_template | PD_MSGTYPE_NOT_SUPPORTED | PD_NUMOBJ(0);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008340:	f043 0310 	orr.w	r3, r3, #16
 8008344:	b29a      	uxth	r2, r3
		tempMessage.hdr =
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	}

	/* Transmit the message */
	return pe_start_message_tx(PESinkReady, PESinkSendSoftReset, &tempMessage);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3344      	adds	r3, #68	; 0x44
 8008350:	2212      	movs	r2, #18
 8008352:	210c      	movs	r1, #12
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fabf 	bl	80078d8 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 800835a:	4603      	mov	r3, r0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ZN12PolicyEngine22pe_sink_chunk_receivedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_chunk_received() {
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

	/* Wait for tChunkingNotSupported */
	osDelay(PD_T_CHUNKING_NOT_SUPPORTED);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008374:	4798      	blx	r3

	return PESinkSendNotSupported;
 8008376:	2315      	movs	r3, #21
}
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <_ZN12PolicyEngine30pe_sink_not_supported_receivedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_not_supported_received() {
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	/* Inform the Device Policy Manager that we received a Not_Supported
	 * message. */

	return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL, 0xFFFFFFFF);
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8008390:	210c      	movs	r1, #12
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fb06 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8008398:	4603      	mov	r3, r0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <_ZN12PolicyEngine27pe_sink_source_unresponsiveEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_source_unresponsive() {
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
	// Sit and chill, as PD is not working
	osDelay(PD_T_PD_DEBOUNCE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80083b2:	4798      	blx	r3

	return PESinkSourceUnresponsive;
 80083b4:	2318      	movs	r3, #24
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <_ZN12PolicyEngine18pe_sink_wait_eventEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_event() {
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
	// Check timeout
	if (getTimeStamp() > waitingEventsTimeout) {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	4798      	blx	r3
 80083cc:	4602      	mov	r2, r0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	bf8c      	ite	hi
 80083d6:	2301      	movhi	r3, #1
 80083d8:	2300      	movls	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x2c>
		notify(Notifications::TIMEOUT);
 80083e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff f910 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	}
	if (currentEvents & (uint32_t) Notifications::TIMEOUT) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d012      	beq.n	800841c <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5e>
		clearEvents();
 80083f6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff fac1 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>
		if (postNotifcationEvalState>=PESinkHandleSoftReset && postNotifcationEvalState<=PESinkSendSoftResetResp){
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008406:	2b10      	cmp	r3, #16
 8008408:	d906      	bls.n	8008418 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008410:	2b14      	cmp	r3, #20
 8008412:	d801      	bhi.n	8008418 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5a>
			//Timeout in soft reset, so reset state machine
			return PESinkStartup;
 8008414:	2303      	movs	r3, #3
 8008416:	e015      	b.n	8008444 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
		}
		return PESinkSendSoftReset;
 8008418:	2312      	movs	r3, #18
 800841a:	e013      	b.n	8008444 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}
	if (currentEvents & (uint32_t) Notifications::RESET) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x6e>
		return PESinkTransitionDefault;
 8008428:	2310      	movs	r3, #16
 800842a:	e00b      	b.n	8008444 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}

	if (currentEvents & waitingEventsMask) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x84>
		return postNotifcationEvalState;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008440:	e000      	b.n	8008444 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}
	return policy_engine_state::PEWaitingEvent;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_good_crc() {
 800844c:	b580      	push	{r7, lr}
 800844e:	b08a      	sub	sp, #40	; 0x28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	clearEvents();
 8008454:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff fa92 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>

	if (incomingMessages.getOccupied()) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3364      	adds	r3, #100	; 0x64
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fae7 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	bf14      	ite	ne
 800846e:	2301      	movne	r3, #1
 8008470:	2300      	moveq	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d03a      	beq.n	80084ee <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xa2>
		// Wait for the Good CRC
		pd_msg goodcrc;
		/* Read the GoodCRC */
		incomingMessages.pop(&goodcrc);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3364      	adds	r3, #100	; 0x64
 800847c:	f107 0208 	add.w	r2, r7, #8
 8008480:	4611      	mov	r1, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f8a2 	bl	80085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* Check that the message is correct */
		if (PD_MSGTYPE_GET(&goodcrc) == PD_MSGTYPE_GOODCRC
 8008488:	897b      	ldrh	r3, [r7, #10]
 800848a:	f003 031f 	and.w	r3, r3, #31
 800848e:	2b01      	cmp	r3, #1
 8008490:	d125      	bne.n	80084de <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
				&& PD_NUMOBJ_GET(&goodcrc) == 0
 8008492:	897b      	ldrh	r3, [r7, #10]
 8008494:	131b      	asrs	r3, r3, #12
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d11f      	bne.n	80084de <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
				&& PD_MESSAGEID_GET(&goodcrc) == _tx_messageidcounter) {
 800849e:	897b      	ldrh	r3, [r7, #10]
 80084a0:	125b      	asrs	r3, r3, #9
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d116      	bne.n	80084de <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
			/* Increment MessageIDCounter */
			_tx_messageidcounter = (_tx_messageidcounter + 1) % 8;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084b6:	3301      	adds	r3, #1
 80084b8:	425a      	negs	r2, r3
 80084ba:	f003 0307 	and.w	r3, r3, #7
 80084be:	f002 0207 	and.w	r2, r2, #7
 80084c2:	bf58      	it	pl
 80084c4:	4253      	negpl	r3, r2
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			notify(Notifications::TX_DONE);
 80084ce:	2104      	movs	r1, #4
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff f89a 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
			return postSendState;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084dc:	e00e      	b.n	80084fc <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xb0>
		} else {
			notify(Notifications::TX_ERR);
 80084de:	2108      	movs	r1, #8
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff f892 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
			return postSendFailedState;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084ec:	e006      	b.n	80084fc <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xb0>
		}
	}
	notify(Notifications::TX_ERR);
 80084ee:	2108      	movs	r1, #8
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff f88a 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	return postSendFailedState;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3728      	adds	r7, #40	; 0x28
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_send_done() {
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]

	/* Waiting for response*/
	uint32_t evt = currentEvents;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	60fb      	str	r3, [r7, #12]
	clearEvents();
 8008512:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff fa33 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>

	if ((uint32_t) evt & (uint32_t) Notifications::DISCARD) {
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008522:	2b00      	cmp	r3, #0
 8008524:	d016      	beq.n	8008554 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x50>
		// increment the counter
		_tx_messageidcounter = (_tx_messageidcounter + 1) % 8;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800852c:	3301      	adds	r3, #1
 800852e:	425a      	negs	r2, r3
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	f002 0207 	and.w	r2, r2, #7
 8008538:	bf58      	it	pl
 800853a:	4253      	negpl	r3, r2
 800853c:	b2da      	uxtb	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		notify(Notifications::TX_ERR);
 8008544:	2108      	movs	r1, #8
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff f85f 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
		return postSendFailedState;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008552:	e037      	b.n	80085c4 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
	}

	/* If the message was sent successfully */
	if ((uint32_t) evt & (uint32_t) Notifications::I_TXSENT) {
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01e      	beq.n	800859c <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x98>

		clearEvents();
 800855e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fa0d 	bl	8007982 <_ZN12PolicyEngine11clearEventsEm>
		if (incomingMessages.getOccupied()) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3364      	adds	r3, #100	; 0x64
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fa62 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	bf14      	ite	ne
 8008578:	2301      	movne	r3, #1
 800857a:	2300      	moveq	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x88>
			return pe_sink_wait_good_crc();
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff ff62 	bl	800844c <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>
 8008588:	4603      	mov	r3, r0
 800858a:	e01b      	b.n	80085c4 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
		} else {
			// No Good CRC has arrived, these should _normally_ come really fast, but users implementation may be lagging
			// Setup a callback for this state
			return waitForEvent(PEWaitingMessageGoodCRC,
 800858c:	2364      	movs	r3, #100	; 0x64
 800858e:	2202      	movs	r2, #2
 8008590:	2102      	movs	r1, #2
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fa06 	bl	80079a4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8008598:	4603      	mov	r3, r0
					(uint32_t) Notifications::MSG_RX, 100);
 800859a:	e013      	b.n	80085c4 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
		}
	}
	/* If the message failed to be sent */
	if ((uint32_t) evt & (uint32_t) Notifications::I_RETRYFAIL) {
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xb2>
		notify(Notifications::TX_ERR);
 80085a6:	2108      	movs	r1, #8
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff f82e 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
		return postSendFailedState;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085b4:	e006      	b.n	80085c4 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
	}

	/* Silence the compiler warning */
	notify(Notifications::TX_ERR);
 80085b6:	2108      	movs	r1, #8
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff f826 	bl	800760a <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	return postSendFailedState;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>:
  void pop(T *dest) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
    if (getOccupied() == 0) {
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fa2d 	bl	8007a36 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d125      	bne.n	8008638 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6c>
    if (dest) {
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x3c>
      memcpy(dest, buffer + begin, sizeof(T));
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fa:	015b      	lsls	r3, r3, #5
 80085fc:	4413      	add	r3, r2
 80085fe:	2220      	movs	r2, #32
 8008600:	4619      	mov	r1, r3
 8008602:	6838      	ldr	r0, [r7, #0]
 8008604:	f000 fdd5 	bl	80091b2 <memcpy>
    begin = (begin + 1) % size;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800860e:	3301      	adds	r3, #1
 8008610:	f003 0203 	and.w	r2, r3, #3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (wrap && (begin == 0)) {
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
      wrap = false;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8008636:	e000      	b.n	800863a <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
      return;
 8008638:	bf00      	nop
  }
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <_ZN7FUSB302C1EhPFbhhhPhES2_PFvmE>:
class FUSB302 {
public:
  typedef bool (*I2CFunc)(const uint8_t deviceAddr, const uint8_t registerAdd, const uint8_t size, uint8_t *buf);
  typedef void (*DelayFunc)(uint32_t milliseconds);

  FUSB302(uint8_t address, I2CFunc read, I2CFunc write, DelayFunc delay) : DeviceAddress(address), I2CRead(read), I2CWrite(write), osDelay(delay){};
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	460b      	mov	r3, r1
 800864e:	72fb      	strb	r3, [r7, #11]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	7afa      	ldrb	r2, [r7, #11]
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	605a      	str	r2, [r3, #4]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	609a      	str	r2, [r3, #8]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	60da      	str	r2, [r3, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr

08008674 <_ZN12PolicyEngineC1E7FUSB302PFmvEPFvmEPFvP6pd_msgbEPFbPKS5_S6_E>:
   * Create a Sink_Capabilities message for our current capabilities.
   */
  typedef void (*SinkCapabilityFunc)(pd_msg *cap, const bool isPD3);
  typedef uint32_t (*TimestampFunc)();
  typedef void (*DelayFunc)(uint32_t milliseconds);
  PolicyEngine(FUSB302 fusbStruct, TimestampFunc getTimestampF, DelayFunc delayFuncF, SinkCapabilityFunc sinkCapabilities, EvaluateCapabilityFunc evalFunc)
 8008674:	b084      	sub	sp, #16
 8008676:	b590      	push	{r4, r7, lr}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	f107 001c 	add.w	r0, r7, #28
 8008682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : fusb(fusbStruct),                               //
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	461c      	mov	r4, r3
 800868a:	f107 031c 	add.w	r3, r7, #28
 800868e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        getTimeStamp(getTimestampF),                    //
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008698:	611a      	str	r2, [r3, #16]
        pdbs_dpm_get_sink_capability(sinkCapabilities), //
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800869e:	615a      	str	r2, [r3, #20]
        pdbs_dpm_evaluate_capability(evalFunc),         //
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a4:	619a      	str	r2, [r3, #24]
        osDelay(delayFuncF)                             //
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086aa:	61da      	str	r2, [r3, #28]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3344      	adds	r3, #68	; 0x44
 80086bc:	2220      	movs	r2, #32
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fcfb 	bl	80090bc <memset>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3364      	adds	r3, #100	; 0x64
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fa98 	bl	8008c00 <_ZN10ringbufferI6pd_msgLj4EEC1Ev>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	33f0      	adds	r3, #240	; 0xf0
 80086d4:	2220      	movs	r2, #32
 80086d6:	2100      	movs	r1, #0
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fcef 	bl	80090bc <memset>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80086e4:	2220      	movs	r2, #32
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fce7 	bl	80090bc <memset>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2203      	movs	r2, #3
 80086f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  {
    hdr_template = PD_DATAROLE_UFP | PD_POWERROLE_SINK;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    _pps_index   = 0xFF;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	22ff      	movs	r2, #255	; 0xff
 8008700:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  };
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008710:	b004      	add	sp, #16
 8008712:	4770      	bx	lr

08008714 <_Z9irc_writehhhPh>:
#include <cstdio>
void pdbs_dpm_get_sink_capability(pd_msg *cap, const bool isPD3);
bool pdbs_dpm_evaluate_capability(const pd_msg *capabilities, pd_msg *request);

bool irc_write(const uint8_t deviceAddr, const uint8_t registerAdd,
		const uint8_t size, uint8_t *buf) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af04      	add	r7, sp, #16
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4603      	mov	r3, r0
 800871e:	71fb      	strb	r3, [r7, #7]
 8008720:	460b      	mov	r3, r1
 8008722:	71bb      	strb	r3, [r7, #6]
 8008724:	4613      	mov	r3, r2
 8008726:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, deviceAddr, registerAdd,
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	b299      	uxth	r1, r3
 800872c:	79bb      	ldrb	r3, [r7, #6]
 800872e:	b29a      	uxth	r2, r3
 8008730:	797b      	ldrb	r3, [r7, #5]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008738:	9002      	str	r0, [sp, #8]
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2301      	movs	r3, #1
 8008742:	4806      	ldr	r0, [pc, #24]	; (800875c <_Z9irc_writehhhPh+0x48>)
 8008744:	f7f9 fbc6 	bl	8001ed4 <HAL_I2C_Mem_Write>
 8008748:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, buf, size, 500) == HAL_OK;
 800874a:	2b00      	cmp	r3, #0
 800874c:	bf0c      	ite	eq
 800874e:	2301      	moveq	r3, #1
 8008750:	2300      	movne	r3, #0
 8008752:	b2db      	uxtb	r3, r3
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000318 	.word	0x20000318

08008760 <_Z8irc_readhhhPh>:
bool irc_read(const uint8_t deviceAddr, const uint8_t registerAdd,
		const uint8_t size, uint8_t *buf) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af04      	add	r7, sp, #16
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	4603      	mov	r3, r0
 800876a:	71fb      	strb	r3, [r7, #7]
 800876c:	460b      	mov	r3, r1
 800876e:	71bb      	strb	r3, [r7, #6]
 8008770:	4613      	mov	r3, r2
 8008772:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, deviceAddr, registerAdd,
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	b299      	uxth	r1, r3
 8008778:	79bb      	ldrb	r3, [r7, #6]
 800877a:	b29a      	uxth	r2, r3
 800877c:	797b      	ldrb	r3, [r7, #5]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	2301      	movs	r3, #1
 800878e:	4806      	ldr	r0, [pc, #24]	; (80087a8 <_Z8irc_readhhhPh+0x48>)
 8008790:	f7f9 fc9a 	bl	80020c8 <HAL_I2C_Mem_Read>
 8008794:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, buf, size, 500) == HAL_OK;
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf0c      	ite	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	2300      	movne	r3, #0
 800879e:	b2db      	uxtb	r3, r3
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	20000318 	.word	0x20000318

080087ac <pd_user_main>:
FUSB302 fusb(FUSB302B_ADDR, irc_read, irc_write, HAL_Delay); // Create FUSB driver
PolicyEngine pe(fusb, HAL_GetTick, HAL_Delay, pdbs_dpm_get_sink_capability,
		pdbs_dpm_evaluate_capability);

volatile bool irqoccured = false;
void pd_user_main() {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0

	if (fusb.fusb_read_id() && fusb.fusb_setup()) {
 80087b0:	4822      	ldr	r0, [pc, #136]	; (800883c <pd_user_main+0x90>)
 80087b2:	f7fe fe02 	bl	80073ba <_ZNK7FUSB30212fusb_read_idEv>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d007      	beq.n	80087cc <pd_user_main+0x20>
 80087bc:	481f      	ldr	r0, [pc, #124]	; (800883c <pd_user_main+0x90>)
 80087be:	f7fe fc97 	bl	80070f0 <_ZNK7FUSB30210fusb_setupEv>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <pd_user_main+0x20>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <pd_user_main+0x22>
 80087cc:	2300      	movs	r3, #0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d02e      	beq.n	8008830 <pd_user_main+0x84>

		//FUSB detected, start code
		printf("FUSB Comms OK\r\n");
 80087d2:	481b      	ldr	r0, [pc, #108]	; (8008840 <pd_user_main+0x94>)
 80087d4:	f000 fb92 	bl	8008efc <puts>
		irqoccured = true; //Force at least one read of the status regs at boot
 80087d8:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <pd_user_main+0x98>)
 80087da:	2201      	movs	r2, #1
 80087dc:	701a      	strb	r2, [r3, #0]
		for (;;) {
			printf(">Running thread \r\n");
 80087de:	481a      	ldr	r0, [pc, #104]	; (8008848 <pd_user_main+0x9c>)
 80087e0:	f000 fb8c 	bl	8008efc <puts>
			while (pe.thread()) { //Iterate until its stable
 80087e4:	bf00      	nop
 80087e6:	4819      	ldr	r0, [pc, #100]	; (800884c <pd_user_main+0xa0>)
 80087e8:	f7fe ff2a 	bl	8007640 <_ZN12PolicyEngine6threadEv>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f9      	bne.n	80087e6 <pd_user_main+0x3a>
			}
			printf(">Waiting for events \r\n");
 80087f2:	4817      	ldr	r0, [pc, #92]	; (8008850 <pd_user_main+0xa4>)
 80087f4:	f000 fb82 	bl	8008efc <puts>
			while (irqoccured == false
 80087f8:	e002      	b.n	8008800 <pd_user_main+0x54>
					&& (HAL_GPIO_ReadPin(FUSB_IRQ_GPIO_Port, FUSB_IRQ_Pin)
							== GPIO_PIN_SET)) {
				HAL_Delay(3); // Must respond to messages < 20ms, so fast iteration or use an rtos to schedule
 80087fa:	2003      	movs	r0, #3
 80087fc:	f7f8 fb32 	bl	8000e64 <HAL_Delay>
			while (irqoccured == false
 8008800:	4b10      	ldr	r3, [pc, #64]	; (8008844 <pd_user_main+0x98>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	b2db      	uxtb	r3, r3
					&& (HAL_GPIO_ReadPin(FUSB_IRQ_GPIO_Port, FUSB_IRQ_Pin)
 8008806:	2b00      	cmp	r3, #0
 8008808:	d108      	bne.n	800881c <pd_user_main+0x70>
 800880a:	2120      	movs	r1, #32
 800880c:	4811      	ldr	r0, [pc, #68]	; (8008854 <pd_user_main+0xa8>)
 800880e:	f7f9 f9a9 	bl	8001b64 <HAL_GPIO_ReadPin>
 8008812:	4603      	mov	r3, r0
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <pd_user_main+0x70>
 8008818:	2301      	movs	r3, #1
 800881a:	e000      	b.n	800881e <pd_user_main+0x72>
 800881c:	2300      	movs	r3, #0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1eb      	bne.n	80087fa <pd_user_main+0x4e>
			}
			irqoccured = false;
 8008822:	4b08      	ldr	r3, [pc, #32]	; (8008844 <pd_user_main+0x98>)
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
			pe.IRQOccured();
 8008828:	4808      	ldr	r0, [pc, #32]	; (800884c <pd_user_main+0xa0>)
 800882a:	f7fe fe69 	bl	8007500 <_ZN12PolicyEngine10IRQOccuredEv>
			printf(">Running thread \r\n");
 800882e:	e7d6      	b.n	80087de <pd_user_main+0x32>
		}
	} else {
		printf("FUSB Comms Failed\r\n");
 8008830:	4809      	ldr	r0, [pc, #36]	; (8008858 <pd_user_main+0xac>)
 8008832:	f000 fb63 	bl	8008efc <puts>
	}
}
 8008836:	bf00      	nop
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	200019b4 	.word	0x200019b4
 8008840:	08009c88 	.word	0x08009c88
 8008844:	20001afc 	.word	0x20001afc
 8008848:	08009c98 	.word	0x08009c98
 800884c:	200019c4 	.word	0x200019c4
 8008850:	08009cac 	.word	0x08009cac
 8008854:	40010c00 	.word	0x40010c00
 8008858:	08009cc4 	.word	0x08009cc4

0800885c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	80fb      	strh	r3, [r7, #6]
	irqoccured = true;
 8008866:	4b04      	ldr	r3, [pc, #16]	; (8008878 <HAL_GPIO_EXTI_Callback+0x1c>)
 8008868:	2201      	movs	r2, #1
 800886a:	701a      	strb	r2, [r3, #0]
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20001afc 	.word	0x20001afc

0800887c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_>:
/* The current draw when the output is disabled */
#define DPM_MIN_CURRENT PD_MA2PDI(100)

bool pdbs_dpm_evaluate_capability(const pd_msg *capabilities, pd_msg *request) {
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]

	/* Get the number of PDOs */
	uint8_t numobj = PD_NUMOBJ_GET(capabilities);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b29b      	uxth	r3, r3
 800888c:	131b      	asrs	r3, r3, #12
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	767b      	strb	r3, [r7, #25]
	/* Get whether or not the power supply is constrained */

	/* Make sure we have configuration */
	/* Look at the PDOs to see if one matches our desires */
	// Look against USB_PD_Desired_Levels to select in order of preference
	uint8_t bestIndex = 0xFF;
 8008896:	23ff      	movs	r3, #255	; 0xff
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bestIndexVoltage = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	623b      	str	r3, [r7, #32]
	int bestIndexCurrent = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]
	bool bestIsPPS = false;
 80088a4:	2300      	movs	r3, #0
 80088a6:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < numobj; i++) {
 80088a8:	2300      	movs	r3, #0
 80088aa:	76bb      	strb	r3, [r7, #26]
 80088ac:	e08b      	b.n	80089c6 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14a>
		/* If we have a fixed PDO, its V equals our desired V, and its I is
		 * at least our desired I */
		if ((capabilities->obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_FIXED) {
 80088ae:	7ebb      	ldrb	r3, [r7, #26]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d12f      	bne.n	8008920 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0xa4>
			// This is a fixed PDO entry
			// Evaluate if it can produve sufficient current based on the
			// tipResistance (ohms*10) V=I*R -> V/I => minimum resistance, if our tip
			// resistance is >= this then we can use this supply

			int voltage_mv = PD_PDV2MV(
 80088c0:	7ebb      	ldrb	r3, [r7, #26]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	0a9b      	lsrs	r3, r3, #10
 80088cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088d0:	2232      	movs	r2, #50	; 0x32
 80088d2:	fb02 f303 	mul.w	r3, r2, r3
 80088d6:	613b      	str	r3, [r7, #16]
					PD_PDO_SRC_FIXED_VOLTAGE_GET(capabilities->obj[i])); // voltage in mV units
			int current_a_x100 = PD_PDO_SRC_FIXED_CURRENT_GET(
 80088d8:	7ebb      	ldrb	r3, [r7, #26]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e6:	60fb      	str	r3, [r7, #12]
					capabilities->obj[i]);            // current in 10mA units
			printf("PD slot %d -> %d mV; %d mA\r\n", i, voltage_mv,
 80088e8:	7eb9      	ldrb	r1, [r7, #26]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4874      	ldr	r0, [pc, #464]	; (8008ac8 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x24c>)
 80088f8:	f000 fa9a 	bl	8008e30 <iprintf>
					current_a_x100 * 10);
			if (voltage_mv > bestIndexVoltage || bestIndex == 0xFF) {
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	429a      	cmp	r2, r3
 8008902:	dc03      	bgt.n	800890c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x90>
 8008904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008908:	2bff      	cmp	r3, #255	; 0xff
 800890a:	d159      	bne.n	80089c0 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
				// Higher voltage and valid, select this instead
				bestIndex = i;
 800890c:	7ebb      	ldrb	r3, [r7, #26]
 800890e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bestIndexVoltage = voltage_mv;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	623b      	str	r3, [r7, #32]
				bestIndexCurrent = current_a_x100;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	61fb      	str	r3, [r7, #28]
				bestIsPPS = false;
 800891a:	2300      	movs	r3, #0
 800891c:	76fb      	strb	r3, [r7, #27]
 800891e:	e04f      	b.n	80089c0 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
			}
		} else if ((capabilities->obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_AUGMENTED
 8008920:	7ebb      	ldrb	r3, [r7, #26]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800892e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008932:	d145      	bne.n	80089c0 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
				&& (capabilities->obj[i] & PD_APDO_TYPE) == PD_APDO_TYPE_PPS) {
 8008934:	7ebb      	ldrb	r3, [r7, #26]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d13c      	bne.n	80089c0 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
			// If this is a PPS slot, calculate the max voltage in the PPS range that
			// can we be used and maintain
			uint16_t max_voltage = PD_PAV2MV(
 8008946:	7ebb      	ldrb	r3, [r7, #26]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	0c5b      	lsrs	r3, r3, #17
 8008952:	b29b      	uxth	r3, r3
 8008954:	b2db      	uxtb	r3, r3
 8008956:	b29b      	uxth	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	4413      	add	r3, r2
 800895e:	461a      	mov	r2, r3
 8008960:	0091      	lsls	r1, r2, #2
 8008962:	461a      	mov	r2, r3
 8008964:	460b      	mov	r3, r1
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	82fb      	strh	r3, [r7, #22]
					PD_APDO_PPS_MAX_VOLTAGE_GET(capabilities->obj[i]));
			// uint16_t min_voltage =
			// PD_PAV2MV(PD_APDO_PPS_MIN_VOLTAGE_GET(capabilities->obj[i]));
			uint16_t max_current = PD_PAI2CA(
 800896c:	7ebb      	ldrb	r3, [r7, #26]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897e:	b29b      	uxth	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	0092      	lsls	r2, r2, #2
 8008984:	4413      	add	r3, r2
 8008986:	82bb      	strh	r3, [r7, #20]
					PD_APDO_PPS_CURRENT_GET(capabilities->obj[i])); // max current in 10mA units
			printf("PD PDO slot %d -> %d mV; %d mA\r\n", i, max_voltage,
 8008988:	7eb9      	ldrb	r1, [r7, #26]
 800898a:	8af8      	ldrh	r0, [r7, #22]
					max_current * 10);
 800898c:	8aba      	ldrh	r2, [r7, #20]
			printf("PD PDO slot %d -> %d mV; %d mA\r\n", i, max_voltage,
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	4602      	mov	r2, r0
 8008998:	484c      	ldr	r0, [pc, #304]	; (8008acc <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x250>)
 800899a:	f000 fa49 	bl	8008e30 <iprintf>
			// Using the current and tip resistance, calculate the ideal max voltage
			// if this is range, then we will work with this voltage
			// if this is not in range; then max_voltage can be safely selected
			if (max_voltage > bestIndexVoltage || bestIndex == 0xFF) {
 800899e:	8afb      	ldrh	r3, [r7, #22]
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	db03      	blt.n	80089ae <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x132>
 80089a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089aa:	2bff      	cmp	r3, #255	; 0xff
 80089ac:	d108      	bne.n	80089c0 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
				bestIndex = i;
 80089ae:	7ebb      	ldrb	r3, [r7, #26]
 80089b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bestIndexVoltage = max_voltage;
 80089b4:	8afb      	ldrh	r3, [r7, #22]
 80089b6:	623b      	str	r3, [r7, #32]
				bestIndexCurrent = max_current;
 80089b8:	8abb      	ldrh	r3, [r7, #20]
 80089ba:	61fb      	str	r3, [r7, #28]
				bestIsPPS = true;
 80089bc:	2301      	movs	r3, #1
 80089be:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < numobj; i++) {
 80089c0:	7ebb      	ldrb	r3, [r7, #26]
 80089c2:	3301      	adds	r3, #1
 80089c4:	76bb      	strb	r3, [r7, #26]
 80089c6:	7eba      	ldrb	r2, [r7, #26]
 80089c8:	7e7b      	ldrb	r3, [r7, #25]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	f4ff af6f 	bcc.w	80088ae <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x32>
			}
		}
	}

	if (bestIndex != 0xFF) {
 80089d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089d4:	2bff      	cmp	r3, #255	; 0xff
 80089d6:	d053      	beq.n	8008a80 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x204>
		printf("Found desired capability at index  %d, %d mV, %d mA\r\n",
 80089d8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80089dc:	69fa      	ldr	r2, [r7, #28]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	4839      	ldr	r0, [pc, #228]	; (8008ad0 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x254>)
 80089ea:	f000 fa21 	bl	8008e30 <iprintf>
				(int) bestIndex, bestIndexVoltage, bestIndexCurrent * 10);

		/* We got what we wanted, so build a request for that */
		request->hdr = PD_MSGTYPE_REQUEST | PD_NUMOBJ(1);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f042 0202 	orr.w	r2, r2, #2
 80089f6:	709a      	strb	r2, [r3, #2]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f042 0210 	orr.w	r2, r2, #16
 80089fe:	70da      	strb	r2, [r3, #3]
		if (bestIsPPS) {
 8008a00:	7efb      	ldrb	r3, [r7, #27]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d021      	beq.n	8008a4a <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x1ce>
			request->obj[0] =
					PD_RDO_PROG_CURRENT_SET(
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4a32      	ldr	r2, [pc, #200]	; (8008ad4 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x258>)
 8008a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8008a10:	1052      	asrs	r2, r2, #1
 8008a12:	17db      	asrs	r3, r3, #31
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							PD_CA2PAI(bestIndexCurrent)) | PD_RDO_PROG_VOLTAGE_SET(PD_MV2PRV(bestIndexVoltage)) | PD_RDO_NO_USB_SUSPEND | PD_RDO_OBJPOS_SET(bestIndex + 1);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	492d      	ldr	r1, [pc, #180]	; (8008ad4 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x258>)
 8008a1e:	fb81 0103 	smull	r0, r1, r1, r3
 8008a22:	10c9      	asrs	r1, r1, #3
 8008a24:	17db      	asrs	r3, r3, #31
 8008a26:	1acb      	subs	r3, r1, r3
 8008a28:	0259      	lsls	r1, r3, #9
 8008a2a:	4b2b      	ldr	r3, [pc, #172]	; (8008ad8 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x25c>)
 8008a2c:	400b      	ands	r3, r1
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a38:	3301      	adds	r3, #1
 8008a3a:	071b      	lsls	r3, r3, #28
 8008a3c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a40:	4313      	orrs	r3, r2
 8008a42:	461a      	mov	r2, r3
			request->obj[0] =
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	605a      	str	r2, [r3, #4]
 8008a48:	e013      	b.n	8008a72 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x1f6>
		} else {
			request->obj[0] =
					PD_RDO_FV_MAX_CURRENT_SET(
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
							bestIndexCurrent) | PD_RDO_FV_CURRENT_SET(bestIndexCurrent) | PD_RDO_NO_USB_SUSPEND | PD_RDO_OBJPOS_SET(bestIndex + 1);
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	0299      	lsls	r1, r3, #10
 8008a54:	4b21      	ldr	r3, [pc, #132]	; (8008adc <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x260>)
 8008a56:	400b      	ands	r3, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a62:	3301      	adds	r3, #1
 8008a64:	071b      	lsls	r3, r3, #28
 8008a66:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	461a      	mov	r2, r3
			request->obj[0] =
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	605a      	str	r2, [r3, #4]
		}
		// USB Data
		request->obj[0] |= PD_RDO_USB_COMMS;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e01d      	b.n	8008abc <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x240>
	} else {
		/* Nothing matched (or no configuration), so get 5 V at low current */
		request->hdr = PD_MSGTYPE_REQUEST | PD_NUMOBJ(1);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f042 0202 	orr.w	r2, r2, #2
 8008a88:	709a      	strb	r2, [r3, #2]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f042 0210 	orr.w	r2, r2, #16
 8008a90:	70da      	strb	r2, [r3, #3]
		request->obj[0] =
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f042 020a 	orr.w	r2, r2, #10
 8008a9a:	711a      	strb	r2, [r3, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8008aa2:	715a      	strb	r2, [r3, #5]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	719a      	strb	r2, [r3, #6]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f042 0211 	orr.w	r2, r2, #17
 8008aae:	71da      	strb	r2, [r3, #7]
		 * mismatch. */
		if (false /*TODO: Check if you have already negotiated*/) {
			request->obj[0] |= PD_RDO_CAP_MISMATCH;
		}
		// USB Data
		request->obj[0] |= PD_RDO_USB_COMMS;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	605a      	str	r2, [r3, #4]
	}
	// Even if we didnt match, we return true as we would still like to handshake
	// on 5V at the minimum
	return true;
 8008abc:	2301      	movs	r3, #1
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3728      	adds	r7, #40	; 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	08009cd8 	.word	0x08009cd8
 8008acc:	08009cf8 	.word	0x08009cf8
 8008ad0:	08009d1c 	.word	0x08009d1c
 8008ad4:	66666667 	.word	0x66666667
 8008ad8:	000ffe00 	.word	0x000ffe00
 8008adc:	000ffc00 	.word	0x000ffc00

08008ae0 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb>:

void pdbs_dpm_get_sink_capability(pd_msg *cap, const bool isPD3) {
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
	/* Keep track of how many PDOs we've added */
	int numobj = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]

	// Must always have a PDO object for vSafe5V, indicate the bare minimum power required
	/* Minimum current, 5 V, and higher capability. */
	cap->obj[numobj++] =
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	60fa      	str	r2, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	2200      	movs	r2, #0
 8008afe:	f042 020a 	orr.w	r2, r2, #10
 8008b02:	711a      	strb	r2, [r3, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f062 026f 	orn	r2, r2, #111	; 0x6f
 8008b0a:	715a      	strb	r2, [r3, #5]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f042 0201 	orr.w	r2, r2, #1
 8008b12:	719a      	strb	r2, [r3, #6]
 8008b14:	2200      	movs	r2, #0
 8008b16:	71da      	strb	r2, [r3, #7]
					| PD_PDO_SNK_FIXED_VOLTAGE_SET(
							PD_MV2PDV(5000)) | PD_PDO_SNK_FIXED_CURRENT_SET(DPM_MIN_CURRENT);

	if (true) { // If requesting more than 5V
		/* Get the current we want */
		uint16_t voltage = 20 * 1000; // in mv => 20V
 8008b18:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008b1c:	817b      	strh	r3, [r7, #10]
		uint16_t current = 2 * 100;   // In centi-amps => 2A
 8008b1e:	23c8      	movs	r3, #200	; 0xc8
 8008b20:	813b      	strh	r3, [r7, #8]

		/* Add a PDO for the desired power. */
		cap->obj[numobj++] =
				PD_PDO_TYPE_FIXED
						| PD_PDO_SNK_FIXED_VOLTAGE_SET(
 8008b22:	897b      	ldrh	r3, [r7, #10]
 8008b24:	4a33      	ldr	r2, [pc, #204]	; (8008bf4 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 8008b26:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2a:	091b      	lsrs	r3, r3, #4
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	029b      	lsls	r3, r3, #10
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b31      	ldr	r3, [pc, #196]	; (8008bf8 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x118>)
 8008b34:	4013      	ands	r3, r2
								PD_MV2PDV(voltage)) | PD_PDO_SNK_FIXED_CURRENT_SET(current);
 8008b36:	893a      	ldrh	r2, [r7, #8]
 8008b38:	f3c2 0109 	ubfx	r1, r2, #0, #10
		cap->obj[numobj++] =
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	1c50      	adds	r0, r2, #1
 8008b40:	60f8      	str	r0, [r7, #12]
								PD_MV2PDV(voltage)) | PD_PDO_SNK_FIXED_CURRENT_SET(current);
 8008b42:	4319      	orrs	r1, r3
		cap->obj[numobj++] =
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	0093      	lsls	r3, r2, #2
 8008b48:	4403      	add	r3, r0
 8008b4a:	6059      	str	r1, [r3, #4]

		/* If we want more than 5 V, set the Higher Capability flag */
		if (PD_MV2PDV(voltage) != PD_MV2PDV(5000)) {
 8008b4c:	897b      	ldrh	r3, [r7, #10]
 8008b4e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8008b52:	3b08      	subs	r3, #8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b31      	cmp	r3, #49	; 0x31
 8008b58:	d905      	bls.n	8008b66 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x86>
			cap->obj[0] |= PD_PDO_SNK_FIXED_HIGHER_CAP;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	605a      	str	r2, [r3, #4]
		}
		/* If we're using PD 3.0, add a PPS APDO for our desired voltage */
		if (isPD3) {
 8008b66:	78fb      	ldrb	r3, [r7, #3]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d025      	beq.n	8008bb8 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0xd8>
			cap->obj[numobj++] =
					PD_PDO_TYPE_AUGMENTED | PD_APDO_TYPE_PPS
							| PD_APDO_PPS_MAX_VOLTAGE_SET(
 8008b6c:	897b      	ldrh	r3, [r7, #10]
 8008b6e:	4a21      	ldr	r2, [pc, #132]	; (8008bf4 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 8008b70:	fba2 2303 	umull	r2, r3, r2, r3
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	045b      	lsls	r3, r3, #17
 8008b7a:	f003 72ff 	and.w	r2, r3, #33423360	; 0x1fe0000
									PD_MV2PAV(voltage)) | PD_APDO_PPS_MIN_VOLTAGE_SET(PD_MV2PAV(voltage)) | PD_APDO_PPS_CURRENT_SET(PD_CA2PAI(current));
 8008b7e:	897b      	ldrh	r3, [r7, #10]
 8008b80:	491c      	ldr	r1, [pc, #112]	; (8008bf4 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 8008b82:	fba1 1303 	umull	r1, r3, r1, r3
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	893b      	ldrh	r3, [r7, #8]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4919      	ldr	r1, [pc, #100]	; (8008bfc <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x11c>)
 8008b96:	fb81 0103 	smull	r0, r1, r1, r3
 8008b9a:	1049      	asrs	r1, r1, #1
 8008b9c:	17db      	asrs	r3, r3, #31
 8008b9e:	1acb      	subs	r3, r1, r3
 8008ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba4:	431a      	orrs	r2, r3
			cap->obj[numobj++] =
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1c59      	adds	r1, r3, #1
 8008baa:	60f9      	str	r1, [r7, #12]
									PD_MV2PAV(voltage)) | PD_APDO_PPS_MIN_VOLTAGE_SET(PD_MV2PAV(voltage)) | PD_APDO_PPS_CURRENT_SET(PD_CA2PAI(current));
 8008bac:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
			cap->obj[numobj++] =
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	605a      	str	r2, [r3, #4]
		}
	}
	/* Set the USB communications capable flag. */
	cap->obj[0] |= PD_PDO_SNK_FIXED_USB_COMMS;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	605a      	str	r2, [r3, #4]
	// if this device is unconstrained, set the flag
	cap->obj[0] |= PD_PDO_SNK_FIXED_UNCONSTRAINED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]

	/* Set the Sink_Capabilities message header */
	cap->hdr = PD_MSGTYPE_SINK_CAPABILITIES | PD_NUMOBJ(numobj);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	031b      	lsls	r3, r3, #12
 8008bd4:	b21b      	sxth	r3, r3
 8008bd6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	f043 0304 	orr.w	r3, r3, #4
 8008be0:	b21b      	sxth	r3, r3
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	805a      	strh	r2, [r3, #2]
}
 8008be8:	bf00      	nop
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	51eb851f 	.word	0x51eb851f
 8008bf8:	000ffc00 	.word	0x000ffc00
 8008bfc:	66666667 	.word	0x66666667

08008c00 <_ZN10ringbufferI6pd_msgLj4EEC1Ev>:
  explicit ringbuffer() : begin(0), end(0), wrap(false) {}
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr

08008c2c <_Z41__static_initialization_and_destruction_0ii>:
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af06      	add	r7, sp, #24
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d11b      	bne.n	8008c74 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d116      	bne.n	8008c74 <_Z41__static_initialization_and_destruction_0ii+0x48>
FUSB302 fusb(FUSB302B_ADDR, irc_read, irc_write, HAL_Delay); // Create FUSB driver
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8008c4c:	4a0d      	ldr	r2, [pc, #52]	; (8008c84 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8008c4e:	2144      	movs	r1, #68	; 0x44
 8008c50:	480d      	ldr	r0, [pc, #52]	; (8008c88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008c52:	f7ff fcf5 	bl	8008640 <_ZN7FUSB302C1EhPFbhhhPhES2_PFvmE>
		pdbs_dpm_evaluate_capability);
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008c58:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008c5a:	9204      	str	r2, [sp, #16]
 8008c5c:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8008c5e:	9203      	str	r2, [sp, #12]
 8008c60:	4a06      	ldr	r2, [pc, #24]	; (8008c7c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8008c62:	9202      	str	r2, [sp, #8]
 8008c64:	4a0b      	ldr	r2, [pc, #44]	; (8008c94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008c66:	9201      	str	r2, [sp, #4]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	9200      	str	r2, [sp, #0]
 8008c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c6e:	480a      	ldr	r0, [pc, #40]	; (8008c98 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8008c70:	f7ff fd00 	bl	8008674 <_ZN12PolicyEngineC1E7FUSB302PFmvEPFvmEPFvP6pd_msgbEPFbPKS5_S6_E>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	08000e65 	.word	0x08000e65
 8008c80:	08008715 	.word	0x08008715
 8008c84:	08008761 	.word	0x08008761
 8008c88:	200019b4 	.word	0x200019b4
 8008c8c:	0800887d 	.word	0x0800887d
 8008c90:	08008ae1 	.word	0x08008ae1
 8008c94:	08000e51 	.word	0x08000e51
 8008c98:	200019c4 	.word	0x200019c4

08008c9c <_GLOBAL__sub_I__Z9irc_writehhhPh>:
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7ff ffc1 	bl	8008c2c <_Z41__static_initialization_and_destruction_0ii>
 8008caa:	bd80      	pop	{r7, pc}

08008cac <std>:
 8008cac:	2300      	movs	r3, #0
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cba:	6083      	str	r3, [r0, #8]
 8008cbc:	8181      	strh	r1, [r0, #12]
 8008cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8008cc0:	81c2      	strh	r2, [r0, #14]
 8008cc2:	6183      	str	r3, [r0, #24]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	305c      	adds	r0, #92	; 0x5c
 8008cca:	f000 f9f7 	bl	80090bc <memset>
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <std+0x58>)
 8008cd0:	6224      	str	r4, [r4, #32]
 8008cd2:	6263      	str	r3, [r4, #36]	; 0x24
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <std+0x5c>)
 8008cd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <std+0x60>)
 8008cda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cdc:	4b0c      	ldr	r3, [pc, #48]	; (8008d10 <std+0x64>)
 8008cde:	6323      	str	r3, [r4, #48]	; 0x30
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <std+0x68>)
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d006      	beq.n	8008cf4 <std+0x48>
 8008ce6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008cea:	4294      	cmp	r4, r2
 8008cec:	d002      	beq.n	8008cf4 <std+0x48>
 8008cee:	33d0      	adds	r3, #208	; 0xd0
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d105      	bne.n	8008d00 <std+0x54>
 8008cf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f000 ba56 	b.w	80091ac <__retarget_lock_init_recursive>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	08008f0d 	.word	0x08008f0d
 8008d08:	08008f2f 	.word	0x08008f2f
 8008d0c:	08008f67 	.word	0x08008f67
 8008d10:	08008f8b 	.word	0x08008f8b
 8008d14:	20001b00 	.word	0x20001b00

08008d18 <stdio_exit_handler>:
 8008d18:	4a02      	ldr	r2, [pc, #8]	; (8008d24 <stdio_exit_handler+0xc>)
 8008d1a:	4903      	ldr	r1, [pc, #12]	; (8008d28 <stdio_exit_handler+0x10>)
 8008d1c:	4803      	ldr	r0, [pc, #12]	; (8008d2c <stdio_exit_handler+0x14>)
 8008d1e:	f000 b869 	b.w	8008df4 <_fwalk_sglue>
 8008d22:	bf00      	nop
 8008d24:	20000018 	.word	0x20000018
 8008d28:	08009a69 	.word	0x08009a69
 8008d2c:	20000024 	.word	0x20000024

08008d30 <cleanup_stdio>:
 8008d30:	6841      	ldr	r1, [r0, #4]
 8008d32:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <cleanup_stdio+0x34>)
 8008d34:	b510      	push	{r4, lr}
 8008d36:	4299      	cmp	r1, r3
 8008d38:	4604      	mov	r4, r0
 8008d3a:	d001      	beq.n	8008d40 <cleanup_stdio+0x10>
 8008d3c:	f000 fe94 	bl	8009a68 <_fflush_r>
 8008d40:	68a1      	ldr	r1, [r4, #8]
 8008d42:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <cleanup_stdio+0x38>)
 8008d44:	4299      	cmp	r1, r3
 8008d46:	d002      	beq.n	8008d4e <cleanup_stdio+0x1e>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fe8d 	bl	8009a68 <_fflush_r>
 8008d4e:	68e1      	ldr	r1, [r4, #12]
 8008d50:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <cleanup_stdio+0x3c>)
 8008d52:	4299      	cmp	r1, r3
 8008d54:	d004      	beq.n	8008d60 <cleanup_stdio+0x30>
 8008d56:	4620      	mov	r0, r4
 8008d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5c:	f000 be84 	b.w	8009a68 <_fflush_r>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	20001b00 	.word	0x20001b00
 8008d68:	20001b68 	.word	0x20001b68
 8008d6c:	20001bd0 	.word	0x20001bd0

08008d70 <global_stdio_init.part.0>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <global_stdio_init.part.0+0x30>)
 8008d74:	4c0b      	ldr	r4, [pc, #44]	; (8008da4 <global_stdio_init.part.0+0x34>)
 8008d76:	4a0c      	ldr	r2, [pc, #48]	; (8008da8 <global_stdio_init.part.0+0x38>)
 8008d78:	4620      	mov	r0, r4
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	2104      	movs	r1, #4
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f7ff ff94 	bl	8008cac <std>
 8008d84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2109      	movs	r1, #9
 8008d8c:	f7ff ff8e 	bl	8008cac <std>
 8008d90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d94:	2202      	movs	r2, #2
 8008d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9a:	2112      	movs	r1, #18
 8008d9c:	f7ff bf86 	b.w	8008cac <std>
 8008da0:	20001c38 	.word	0x20001c38
 8008da4:	20001b00 	.word	0x20001b00
 8008da8:	08008d19 	.word	0x08008d19

08008dac <__sfp_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sfp_lock_acquire+0x8>)
 8008dae:	f000 b9fe 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20001c41 	.word	0x20001c41

08008db8 <__sfp_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__sfp_lock_release+0x8>)
 8008dba:	f000 b9f9 	b.w	80091b0 <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20001c41 	.word	0x20001c41

08008dc4 <__sinit>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7ff fff0 	bl	8008dac <__sfp_lock_acquire>
 8008dcc:	6a23      	ldr	r3, [r4, #32]
 8008dce:	b11b      	cbz	r3, 8008dd8 <__sinit+0x14>
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bff0 	b.w	8008db8 <__sfp_lock_release>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <__sinit+0x28>)
 8008dda:	6223      	str	r3, [r4, #32]
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <__sinit+0x2c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f5      	bne.n	8008dd0 <__sinit+0xc>
 8008de4:	f7ff ffc4 	bl	8008d70 <global_stdio_init.part.0>
 8008de8:	e7f2      	b.n	8008dd0 <__sinit+0xc>
 8008dea:	bf00      	nop
 8008dec:	08008d31 	.word	0x08008d31
 8008df0:	20001c38 	.word	0x20001c38

08008df4 <_fwalk_sglue>:
 8008df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4607      	mov	r7, r0
 8008dfa:	4688      	mov	r8, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	2600      	movs	r6, #0
 8008e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e04:	f1b9 0901 	subs.w	r9, r9, #1
 8008e08:	d505      	bpl.n	8008e16 <_fwalk_sglue+0x22>
 8008e0a:	6824      	ldr	r4, [r4, #0]
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d1f7      	bne.n	8008e00 <_fwalk_sglue+0xc>
 8008e10:	4630      	mov	r0, r6
 8008e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d907      	bls.n	8008e2c <_fwalk_sglue+0x38>
 8008e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e20:	3301      	adds	r3, #1
 8008e22:	d003      	beq.n	8008e2c <_fwalk_sglue+0x38>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4638      	mov	r0, r7
 8008e28:	47c0      	blx	r8
 8008e2a:	4306      	orrs	r6, r0
 8008e2c:	3568      	adds	r5, #104	; 0x68
 8008e2e:	e7e9      	b.n	8008e04 <_fwalk_sglue+0x10>

08008e30 <iprintf>:
 8008e30:	b40f      	push	{r0, r1, r2, r3}
 8008e32:	b507      	push	{r0, r1, r2, lr}
 8008e34:	4906      	ldr	r1, [pc, #24]	; (8008e50 <iprintf+0x20>)
 8008e36:	ab04      	add	r3, sp, #16
 8008e38:	6808      	ldr	r0, [r1, #0]
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	6881      	ldr	r1, [r0, #8]
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	f000 fae1 	bl	8009408 <_vfiprintf_r>
 8008e46:	b003      	add	sp, #12
 8008e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e4c:	b004      	add	sp, #16
 8008e4e:	4770      	bx	lr
 8008e50:	20000070 	.word	0x20000070

08008e54 <_puts_r>:
 8008e54:	6a03      	ldr	r3, [r0, #32]
 8008e56:	b570      	push	{r4, r5, r6, lr}
 8008e58:	4605      	mov	r5, r0
 8008e5a:	460e      	mov	r6, r1
 8008e5c:	6884      	ldr	r4, [r0, #8]
 8008e5e:	b90b      	cbnz	r3, 8008e64 <_puts_r+0x10>
 8008e60:	f7ff ffb0 	bl	8008dc4 <__sinit>
 8008e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e66:	07db      	lsls	r3, r3, #31
 8008e68:	d405      	bmi.n	8008e76 <_puts_r+0x22>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	0598      	lsls	r0, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_puts_r+0x22>
 8008e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e72:	f000 f99c 	bl	80091ae <__retarget_lock_acquire_recursive>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	0719      	lsls	r1, r3, #28
 8008e7a:	d513      	bpl.n	8008ea4 <_puts_r+0x50>
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	b18b      	cbz	r3, 8008ea4 <_puts_r+0x50>
 8008e80:	3e01      	subs	r6, #1
 8008e82:	68a3      	ldr	r3, [r4, #8]
 8008e84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	b9e9      	cbnz	r1, 8008eca <_puts_r+0x76>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da2e      	bge.n	8008ef0 <_puts_r+0x9c>
 8008e92:	4622      	mov	r2, r4
 8008e94:	210a      	movs	r1, #10
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f87b 	bl	8008f92 <__swbuf_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d007      	beq.n	8008eb0 <_puts_r+0x5c>
 8008ea0:	250a      	movs	r5, #10
 8008ea2:	e007      	b.n	8008eb4 <_puts_r+0x60>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f8b0 	bl	800900c <__swsetup_r>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d0e7      	beq.n	8008e80 <_puts_r+0x2c>
 8008eb0:	f04f 35ff 	mov.w	r5, #4294967295
 8008eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eb6:	07da      	lsls	r2, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_puts_r+0x72>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	059b      	lsls	r3, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_puts_r+0x72>
 8008ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec2:	f000 f975 	bl	80091b0 <__retarget_lock_release_recursive>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	bd70      	pop	{r4, r5, r6, pc}
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	da04      	bge.n	8008ed8 <_puts_r+0x84>
 8008ece:	69a2      	ldr	r2, [r4, #24]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	dc06      	bgt.n	8008ee2 <_puts_r+0x8e>
 8008ed4:	290a      	cmp	r1, #10
 8008ed6:	d004      	beq.n	8008ee2 <_puts_r+0x8e>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	7019      	strb	r1, [r3, #0]
 8008ee0:	e7cf      	b.n	8008e82 <_puts_r+0x2e>
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 f854 	bl	8008f92 <__swbuf_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	d1c9      	bne.n	8008e82 <_puts_r+0x2e>
 8008eee:	e7df      	b.n	8008eb0 <_puts_r+0x5c>
 8008ef0:	250a      	movs	r5, #10
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	6022      	str	r2, [r4, #0]
 8008ef8:	701d      	strb	r5, [r3, #0]
 8008efa:	e7db      	b.n	8008eb4 <_puts_r+0x60>

08008efc <puts>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <puts+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f7ff bfa7 	b.w	8008e54 <_puts_r>
 8008f06:	bf00      	nop
 8008f08:	20000070 	.word	0x20000070

08008f0c <__sread>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	460c      	mov	r4, r1
 8008f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f14:	f000 f8fc 	bl	8009110 <_read_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	bfab      	itete	ge
 8008f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f20:	181b      	addge	r3, r3, r0
 8008f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f26:	bfac      	ite	ge
 8008f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f2a:	81a3      	strhlt	r3, [r4, #12]
 8008f2c:	bd10      	pop	{r4, pc}

08008f2e <__swrite>:
 8008f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	461f      	mov	r7, r3
 8008f34:	898b      	ldrh	r3, [r1, #12]
 8008f36:	4605      	mov	r5, r0
 8008f38:	05db      	lsls	r3, r3, #23
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	d505      	bpl.n	8008f4c <__swrite+0x1e>
 8008f40:	2302      	movs	r3, #2
 8008f42:	2200      	movs	r2, #0
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	f000 f8d0 	bl	80090ec <_lseek_r>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	4632      	mov	r2, r6
 8008f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	4628      	mov	r0, r5
 8008f58:	463b      	mov	r3, r7
 8008f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	f000 b8e7 	b.w	8009134 <_write_r>

08008f66 <__sseek>:
 8008f66:	b510      	push	{r4, lr}
 8008f68:	460c      	mov	r4, r1
 8008f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6e:	f000 f8bd 	bl	80090ec <_lseek_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	bf15      	itete	ne
 8008f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f82:	81a3      	strheq	r3, [r4, #12]
 8008f84:	bf18      	it	ne
 8008f86:	81a3      	strhne	r3, [r4, #12]
 8008f88:	bd10      	pop	{r4, pc}

08008f8a <__sclose>:
 8008f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8e:	f000 b89d 	b.w	80090cc <_close_r>

08008f92 <__swbuf_r>:
 8008f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f94:	460e      	mov	r6, r1
 8008f96:	4614      	mov	r4, r2
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b118      	cbz	r0, 8008fa4 <__swbuf_r+0x12>
 8008f9c:	6a03      	ldr	r3, [r0, #32]
 8008f9e:	b90b      	cbnz	r3, 8008fa4 <__swbuf_r+0x12>
 8008fa0:	f7ff ff10 	bl	8008dc4 <__sinit>
 8008fa4:	69a3      	ldr	r3, [r4, #24]
 8008fa6:	60a3      	str	r3, [r4, #8]
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	071a      	lsls	r2, r3, #28
 8008fac:	d525      	bpl.n	8008ffa <__swbuf_r+0x68>
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b31b      	cbz	r3, 8008ffa <__swbuf_r+0x68>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	b2f6      	uxtb	r6, r6
 8008fb8:	1a98      	subs	r0, r3, r2
 8008fba:	6963      	ldr	r3, [r4, #20]
 8008fbc:	4637      	mov	r7, r6
 8008fbe:	4283      	cmp	r3, r0
 8008fc0:	dc04      	bgt.n	8008fcc <__swbuf_r+0x3a>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f000 fd4f 	bl	8009a68 <_fflush_r>
 8008fca:	b9e0      	cbnz	r0, 8009006 <__swbuf_r+0x74>
 8008fcc:	68a3      	ldr	r3, [r4, #8]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	701e      	strb	r6, [r3, #0]
 8008fda:	6962      	ldr	r2, [r4, #20]
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d004      	beq.n	8008fec <__swbuf_r+0x5a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	07db      	lsls	r3, r3, #31
 8008fe6:	d506      	bpl.n	8008ff6 <__swbuf_r+0x64>
 8008fe8:	2e0a      	cmp	r6, #10
 8008fea:	d104      	bne.n	8008ff6 <__swbuf_r+0x64>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 fd3a 	bl	8009a68 <_fflush_r>
 8008ff4:	b938      	cbnz	r0, 8009006 <__swbuf_r+0x74>
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f000 f805 	bl	800900c <__swsetup_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	d0d5      	beq.n	8008fb2 <__swbuf_r+0x20>
 8009006:	f04f 37ff 	mov.w	r7, #4294967295
 800900a:	e7f4      	b.n	8008ff6 <__swbuf_r+0x64>

0800900c <__swsetup_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4b2a      	ldr	r3, [pc, #168]	; (80090b8 <__swsetup_r+0xac>)
 8009010:	4605      	mov	r5, r0
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	460c      	mov	r4, r1
 8009016:	b118      	cbz	r0, 8009020 <__swsetup_r+0x14>
 8009018:	6a03      	ldr	r3, [r0, #32]
 800901a:	b90b      	cbnz	r3, 8009020 <__swsetup_r+0x14>
 800901c:	f7ff fed2 	bl	8008dc4 <__sinit>
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009026:	0718      	lsls	r0, r3, #28
 8009028:	d422      	bmi.n	8009070 <__swsetup_r+0x64>
 800902a:	06d9      	lsls	r1, r3, #27
 800902c:	d407      	bmi.n	800903e <__swsetup_r+0x32>
 800902e:	2309      	movs	r3, #9
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	e034      	b.n	80090a8 <__swsetup_r+0x9c>
 800903e:	0758      	lsls	r0, r3, #29
 8009040:	d512      	bpl.n	8009068 <__swsetup_r+0x5c>
 8009042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009044:	b141      	cbz	r1, 8009058 <__swsetup_r+0x4c>
 8009046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800904a:	4299      	cmp	r1, r3
 800904c:	d002      	beq.n	8009054 <__swsetup_r+0x48>
 800904e:	4628      	mov	r0, r5
 8009050:	f000 f8be 	bl	80091d0 <_free_r>
 8009054:	2300      	movs	r3, #0
 8009056:	6363      	str	r3, [r4, #52]	; 0x34
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	2300      	movs	r3, #0
 8009062:	6063      	str	r3, [r4, #4]
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f043 0308 	orr.w	r3, r3, #8
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	b94b      	cbnz	r3, 8009088 <__swsetup_r+0x7c>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800907a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800907e:	d003      	beq.n	8009088 <__swsetup_r+0x7c>
 8009080:	4621      	mov	r1, r4
 8009082:	4628      	mov	r0, r5
 8009084:	f000 fd3d 	bl	8009b02 <__smakebuf_r>
 8009088:	89a0      	ldrh	r0, [r4, #12]
 800908a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800908e:	f010 0301 	ands.w	r3, r0, #1
 8009092:	d00a      	beq.n	80090aa <__swsetup_r+0x9e>
 8009094:	2300      	movs	r3, #0
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	6963      	ldr	r3, [r4, #20]
 800909a:	425b      	negs	r3, r3
 800909c:	61a3      	str	r3, [r4, #24]
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	b943      	cbnz	r3, 80090b4 <__swsetup_r+0xa8>
 80090a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090a6:	d1c4      	bne.n	8009032 <__swsetup_r+0x26>
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	0781      	lsls	r1, r0, #30
 80090ac:	bf58      	it	pl
 80090ae:	6963      	ldrpl	r3, [r4, #20]
 80090b0:	60a3      	str	r3, [r4, #8]
 80090b2:	e7f4      	b.n	800909e <__swsetup_r+0x92>
 80090b4:	2000      	movs	r0, #0
 80090b6:	e7f7      	b.n	80090a8 <__swsetup_r+0x9c>
 80090b8:	20000070 	.word	0x20000070

080090bc <memset>:
 80090bc:	4603      	mov	r3, r0
 80090be:	4402      	add	r2, r0
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d100      	bne.n	80090c6 <memset+0xa>
 80090c4:	4770      	bx	lr
 80090c6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ca:	e7f9      	b.n	80090c0 <memset+0x4>

080090cc <_close_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	2300      	movs	r3, #0
 80090d0:	4d05      	ldr	r5, [pc, #20]	; (80090e8 <_close_r+0x1c>)
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	f7f7 fd13 	bl	8000b02 <_close>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_close_r+0x1a>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_close_r+0x1a>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20001c3c 	.word	0x20001c3c

080090ec <_lseek_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	4611      	mov	r1, r2
 80090f4:	2200      	movs	r2, #0
 80090f6:	4d05      	ldr	r5, [pc, #20]	; (800910c <_lseek_r+0x20>)
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f7 fd25 	bl	8000b4a <_lseek>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_lseek_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_lseek_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20001c3c 	.word	0x20001c3c

08009110 <_read_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	2200      	movs	r2, #0
 800911a:	4d05      	ldr	r5, [pc, #20]	; (8009130 <_read_r+0x20>)
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f7 fcb6 	bl	8000a90 <_read>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_read_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_read_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20001c3c 	.word	0x20001c3c

08009134 <_write_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	2200      	movs	r2, #0
 800913e:	4d05      	ldr	r5, [pc, #20]	; (8009154 <_write_r+0x20>)
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7f7 fcc1 	bl	8000aca <_write>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_write_r+0x1e>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_write_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20001c3c 	.word	0x20001c3c

08009158 <__errno>:
 8009158:	4b01      	ldr	r3, [pc, #4]	; (8009160 <__errno+0x8>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20000070 	.word	0x20000070

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	2600      	movs	r6, #0
 8009168:	4d0c      	ldr	r5, [pc, #48]	; (800919c <__libc_init_array+0x38>)
 800916a:	4c0d      	ldr	r4, [pc, #52]	; (80091a0 <__libc_init_array+0x3c>)
 800916c:	1b64      	subs	r4, r4, r5
 800916e:	10a4      	asrs	r4, r4, #2
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	f000 fd42 	bl	8009bfc <_init>
 8009178:	2600      	movs	r6, #0
 800917a:	4d0a      	ldr	r5, [pc, #40]	; (80091a4 <__libc_init_array+0x40>)
 800917c:	4c0a      	ldr	r4, [pc, #40]	; (80091a8 <__libc_init_array+0x44>)
 800917e:	1b64      	subs	r4, r4, r5
 8009180:	10a4      	asrs	r4, r4, #2
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	08009db8 	.word	0x08009db8
 80091a0:	08009db8 	.word	0x08009db8
 80091a4:	08009db8 	.word	0x08009db8
 80091a8:	08009dc0 	.word	0x08009dc0

080091ac <__retarget_lock_init_recursive>:
 80091ac:	4770      	bx	lr

080091ae <__retarget_lock_acquire_recursive>:
 80091ae:	4770      	bx	lr

080091b0 <__retarget_lock_release_recursive>:
 80091b0:	4770      	bx	lr

080091b2 <memcpy>:
 80091b2:	440a      	add	r2, r1
 80091b4:	4291      	cmp	r1, r2
 80091b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80091ba:	d100      	bne.n	80091be <memcpy+0xc>
 80091bc:	4770      	bx	lr
 80091be:	b510      	push	{r4, lr}
 80091c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c4:	4291      	cmp	r1, r2
 80091c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ca:	d1f9      	bne.n	80091c0 <memcpy+0xe>
 80091cc:	bd10      	pop	{r4, pc}
	...

080091d0 <_free_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4605      	mov	r5, r0
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d040      	beq.n	800925a <_free_r+0x8a>
 80091d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091dc:	1f0c      	subs	r4, r1, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfb8      	it	lt
 80091e2:	18e4      	addlt	r4, r4, r3
 80091e4:	f000 f8dc 	bl	80093a0 <__malloc_lock>
 80091e8:	4a1c      	ldr	r2, [pc, #112]	; (800925c <_free_r+0x8c>)
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	b933      	cbnz	r3, 80091fc <_free_r+0x2c>
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	6014      	str	r4, [r2, #0]
 80091f2:	4628      	mov	r0, r5
 80091f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f8:	f000 b8d8 	b.w	80093ac <__malloc_unlock>
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d908      	bls.n	8009212 <_free_r+0x42>
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	1821      	adds	r1, r4, r0
 8009204:	428b      	cmp	r3, r1
 8009206:	bf01      	itttt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	1809      	addeq	r1, r1, r0
 800920e:	6021      	streq	r1, [r4, #0]
 8009210:	e7ed      	b.n	80091ee <_free_r+0x1e>
 8009212:	461a      	mov	r2, r3
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b10b      	cbz	r3, 800921c <_free_r+0x4c>
 8009218:	42a3      	cmp	r3, r4
 800921a:	d9fa      	bls.n	8009212 <_free_r+0x42>
 800921c:	6811      	ldr	r1, [r2, #0]
 800921e:	1850      	adds	r0, r2, r1
 8009220:	42a0      	cmp	r0, r4
 8009222:	d10b      	bne.n	800923c <_free_r+0x6c>
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	4401      	add	r1, r0
 8009228:	1850      	adds	r0, r2, r1
 800922a:	4283      	cmp	r3, r0
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	d1e0      	bne.n	80091f2 <_free_r+0x22>
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4408      	add	r0, r1
 8009236:	6010      	str	r0, [r2, #0]
 8009238:	6053      	str	r3, [r2, #4]
 800923a:	e7da      	b.n	80091f2 <_free_r+0x22>
 800923c:	d902      	bls.n	8009244 <_free_r+0x74>
 800923e:	230c      	movs	r3, #12
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	e7d6      	b.n	80091f2 <_free_r+0x22>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	1821      	adds	r1, r4, r0
 8009248:	428b      	cmp	r3, r1
 800924a:	bf01      	itttt	eq
 800924c:	6819      	ldreq	r1, [r3, #0]
 800924e:	685b      	ldreq	r3, [r3, #4]
 8009250:	1809      	addeq	r1, r1, r0
 8009252:	6021      	streq	r1, [r4, #0]
 8009254:	6063      	str	r3, [r4, #4]
 8009256:	6054      	str	r4, [r2, #4]
 8009258:	e7cb      	b.n	80091f2 <_free_r+0x22>
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20001c44 	.word	0x20001c44

08009260 <sbrk_aligned>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	4e0e      	ldr	r6, [pc, #56]	; (800929c <sbrk_aligned+0x3c>)
 8009264:	460c      	mov	r4, r1
 8009266:	6831      	ldr	r1, [r6, #0]
 8009268:	4605      	mov	r5, r0
 800926a:	b911      	cbnz	r1, 8009272 <sbrk_aligned+0x12>
 800926c:	f000 fca8 	bl	8009bc0 <_sbrk_r>
 8009270:	6030      	str	r0, [r6, #0]
 8009272:	4621      	mov	r1, r4
 8009274:	4628      	mov	r0, r5
 8009276:	f000 fca3 	bl	8009bc0 <_sbrk_r>
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	d00a      	beq.n	8009294 <sbrk_aligned+0x34>
 800927e:	1cc4      	adds	r4, r0, #3
 8009280:	f024 0403 	bic.w	r4, r4, #3
 8009284:	42a0      	cmp	r0, r4
 8009286:	d007      	beq.n	8009298 <sbrk_aligned+0x38>
 8009288:	1a21      	subs	r1, r4, r0
 800928a:	4628      	mov	r0, r5
 800928c:	f000 fc98 	bl	8009bc0 <_sbrk_r>
 8009290:	3001      	adds	r0, #1
 8009292:	d101      	bne.n	8009298 <sbrk_aligned+0x38>
 8009294:	f04f 34ff 	mov.w	r4, #4294967295
 8009298:	4620      	mov	r0, r4
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	20001c48 	.word	0x20001c48

080092a0 <_malloc_r>:
 80092a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a4:	1ccd      	adds	r5, r1, #3
 80092a6:	f025 0503 	bic.w	r5, r5, #3
 80092aa:	3508      	adds	r5, #8
 80092ac:	2d0c      	cmp	r5, #12
 80092ae:	bf38      	it	cc
 80092b0:	250c      	movcc	r5, #12
 80092b2:	2d00      	cmp	r5, #0
 80092b4:	4607      	mov	r7, r0
 80092b6:	db01      	blt.n	80092bc <_malloc_r+0x1c>
 80092b8:	42a9      	cmp	r1, r5
 80092ba:	d905      	bls.n	80092c8 <_malloc_r+0x28>
 80092bc:	230c      	movs	r3, #12
 80092be:	2600      	movs	r6, #0
 80092c0:	603b      	str	r3, [r7, #0]
 80092c2:	4630      	mov	r0, r6
 80092c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800939c <_malloc_r+0xfc>
 80092cc:	f000 f868 	bl	80093a0 <__malloc_lock>
 80092d0:	f8d8 3000 	ldr.w	r3, [r8]
 80092d4:	461c      	mov	r4, r3
 80092d6:	bb5c      	cbnz	r4, 8009330 <_malloc_r+0x90>
 80092d8:	4629      	mov	r1, r5
 80092da:	4638      	mov	r0, r7
 80092dc:	f7ff ffc0 	bl	8009260 <sbrk_aligned>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	4604      	mov	r4, r0
 80092e4:	d155      	bne.n	8009392 <_malloc_r+0xf2>
 80092e6:	f8d8 4000 	ldr.w	r4, [r8]
 80092ea:	4626      	mov	r6, r4
 80092ec:	2e00      	cmp	r6, #0
 80092ee:	d145      	bne.n	800937c <_malloc_r+0xdc>
 80092f0:	2c00      	cmp	r4, #0
 80092f2:	d048      	beq.n	8009386 <_malloc_r+0xe6>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	4631      	mov	r1, r6
 80092f8:	4638      	mov	r0, r7
 80092fa:	eb04 0903 	add.w	r9, r4, r3
 80092fe:	f000 fc5f 	bl	8009bc0 <_sbrk_r>
 8009302:	4581      	cmp	r9, r0
 8009304:	d13f      	bne.n	8009386 <_malloc_r+0xe6>
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	4638      	mov	r0, r7
 800930a:	1a6d      	subs	r5, r5, r1
 800930c:	4629      	mov	r1, r5
 800930e:	f7ff ffa7 	bl	8009260 <sbrk_aligned>
 8009312:	3001      	adds	r0, #1
 8009314:	d037      	beq.n	8009386 <_malloc_r+0xe6>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	442b      	add	r3, r5
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	f8d8 3000 	ldr.w	r3, [r8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d038      	beq.n	8009396 <_malloc_r+0xf6>
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	42a2      	cmp	r2, r4
 8009328:	d12b      	bne.n	8009382 <_malloc_r+0xe2>
 800932a:	2200      	movs	r2, #0
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	e00f      	b.n	8009350 <_malloc_r+0xb0>
 8009330:	6822      	ldr	r2, [r4, #0]
 8009332:	1b52      	subs	r2, r2, r5
 8009334:	d41f      	bmi.n	8009376 <_malloc_r+0xd6>
 8009336:	2a0b      	cmp	r2, #11
 8009338:	d917      	bls.n	800936a <_malloc_r+0xca>
 800933a:	1961      	adds	r1, r4, r5
 800933c:	42a3      	cmp	r3, r4
 800933e:	6025      	str	r5, [r4, #0]
 8009340:	bf18      	it	ne
 8009342:	6059      	strne	r1, [r3, #4]
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	bf08      	it	eq
 8009348:	f8c8 1000 	streq.w	r1, [r8]
 800934c:	5162      	str	r2, [r4, r5]
 800934e:	604b      	str	r3, [r1, #4]
 8009350:	4638      	mov	r0, r7
 8009352:	f104 060b 	add.w	r6, r4, #11
 8009356:	f000 f829 	bl	80093ac <__malloc_unlock>
 800935a:	f026 0607 	bic.w	r6, r6, #7
 800935e:	1d23      	adds	r3, r4, #4
 8009360:	1af2      	subs	r2, r6, r3
 8009362:	d0ae      	beq.n	80092c2 <_malloc_r+0x22>
 8009364:	1b9b      	subs	r3, r3, r6
 8009366:	50a3      	str	r3, [r4, r2]
 8009368:	e7ab      	b.n	80092c2 <_malloc_r+0x22>
 800936a:	42a3      	cmp	r3, r4
 800936c:	6862      	ldr	r2, [r4, #4]
 800936e:	d1dd      	bne.n	800932c <_malloc_r+0x8c>
 8009370:	f8c8 2000 	str.w	r2, [r8]
 8009374:	e7ec      	b.n	8009350 <_malloc_r+0xb0>
 8009376:	4623      	mov	r3, r4
 8009378:	6864      	ldr	r4, [r4, #4]
 800937a:	e7ac      	b.n	80092d6 <_malloc_r+0x36>
 800937c:	4634      	mov	r4, r6
 800937e:	6876      	ldr	r6, [r6, #4]
 8009380:	e7b4      	b.n	80092ec <_malloc_r+0x4c>
 8009382:	4613      	mov	r3, r2
 8009384:	e7cc      	b.n	8009320 <_malloc_r+0x80>
 8009386:	230c      	movs	r3, #12
 8009388:	4638      	mov	r0, r7
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	f000 f80e 	bl	80093ac <__malloc_unlock>
 8009390:	e797      	b.n	80092c2 <_malloc_r+0x22>
 8009392:	6025      	str	r5, [r4, #0]
 8009394:	e7dc      	b.n	8009350 <_malloc_r+0xb0>
 8009396:	605b      	str	r3, [r3, #4]
 8009398:	deff      	udf	#255	; 0xff
 800939a:	bf00      	nop
 800939c:	20001c44 	.word	0x20001c44

080093a0 <__malloc_lock>:
 80093a0:	4801      	ldr	r0, [pc, #4]	; (80093a8 <__malloc_lock+0x8>)
 80093a2:	f7ff bf04 	b.w	80091ae <__retarget_lock_acquire_recursive>
 80093a6:	bf00      	nop
 80093a8:	20001c40 	.word	0x20001c40

080093ac <__malloc_unlock>:
 80093ac:	4801      	ldr	r0, [pc, #4]	; (80093b4 <__malloc_unlock+0x8>)
 80093ae:	f7ff beff 	b.w	80091b0 <__retarget_lock_release_recursive>
 80093b2:	bf00      	nop
 80093b4:	20001c40 	.word	0x20001c40

080093b8 <__sfputc_r>:
 80093b8:	6893      	ldr	r3, [r2, #8]
 80093ba:	b410      	push	{r4}
 80093bc:	3b01      	subs	r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	6093      	str	r3, [r2, #8]
 80093c2:	da07      	bge.n	80093d4 <__sfputc_r+0x1c>
 80093c4:	6994      	ldr	r4, [r2, #24]
 80093c6:	42a3      	cmp	r3, r4
 80093c8:	db01      	blt.n	80093ce <__sfputc_r+0x16>
 80093ca:	290a      	cmp	r1, #10
 80093cc:	d102      	bne.n	80093d4 <__sfputc_r+0x1c>
 80093ce:	bc10      	pop	{r4}
 80093d0:	f7ff bddf 	b.w	8008f92 <__swbuf_r>
 80093d4:	6813      	ldr	r3, [r2, #0]
 80093d6:	1c58      	adds	r0, r3, #1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	7019      	strb	r1, [r3, #0]
 80093dc:	4608      	mov	r0, r1
 80093de:	bc10      	pop	{r4}
 80093e0:	4770      	bx	lr

080093e2 <__sfputs_r>:
 80093e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e4:	4606      	mov	r6, r0
 80093e6:	460f      	mov	r7, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	18d5      	adds	r5, r2, r3
 80093ec:	42ac      	cmp	r4, r5
 80093ee:	d101      	bne.n	80093f4 <__sfputs_r+0x12>
 80093f0:	2000      	movs	r0, #0
 80093f2:	e007      	b.n	8009404 <__sfputs_r+0x22>
 80093f4:	463a      	mov	r2, r7
 80093f6:	4630      	mov	r0, r6
 80093f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fc:	f7ff ffdc 	bl	80093b8 <__sfputc_r>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d1f3      	bne.n	80093ec <__sfputs_r+0xa>
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009408 <_vfiprintf_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	460d      	mov	r5, r1
 800940e:	4614      	mov	r4, r2
 8009410:	4698      	mov	r8, r3
 8009412:	4606      	mov	r6, r0
 8009414:	b09d      	sub	sp, #116	; 0x74
 8009416:	b118      	cbz	r0, 8009420 <_vfiprintf_r+0x18>
 8009418:	6a03      	ldr	r3, [r0, #32]
 800941a:	b90b      	cbnz	r3, 8009420 <_vfiprintf_r+0x18>
 800941c:	f7ff fcd2 	bl	8008dc4 <__sinit>
 8009420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009422:	07d9      	lsls	r1, r3, #31
 8009424:	d405      	bmi.n	8009432 <_vfiprintf_r+0x2a>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	059a      	lsls	r2, r3, #22
 800942a:	d402      	bmi.n	8009432 <_vfiprintf_r+0x2a>
 800942c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800942e:	f7ff febe 	bl	80091ae <__retarget_lock_acquire_recursive>
 8009432:	89ab      	ldrh	r3, [r5, #12]
 8009434:	071b      	lsls	r3, r3, #28
 8009436:	d501      	bpl.n	800943c <_vfiprintf_r+0x34>
 8009438:	692b      	ldr	r3, [r5, #16]
 800943a:	b99b      	cbnz	r3, 8009464 <_vfiprintf_r+0x5c>
 800943c:	4629      	mov	r1, r5
 800943e:	4630      	mov	r0, r6
 8009440:	f7ff fde4 	bl	800900c <__swsetup_r>
 8009444:	b170      	cbz	r0, 8009464 <_vfiprintf_r+0x5c>
 8009446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009448:	07dc      	lsls	r4, r3, #31
 800944a:	d504      	bpl.n	8009456 <_vfiprintf_r+0x4e>
 800944c:	f04f 30ff 	mov.w	r0, #4294967295
 8009450:	b01d      	add	sp, #116	; 0x74
 8009452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009456:	89ab      	ldrh	r3, [r5, #12]
 8009458:	0598      	lsls	r0, r3, #22
 800945a:	d4f7      	bmi.n	800944c <_vfiprintf_r+0x44>
 800945c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800945e:	f7ff fea7 	bl	80091b0 <__retarget_lock_release_recursive>
 8009462:	e7f3      	b.n	800944c <_vfiprintf_r+0x44>
 8009464:	2300      	movs	r3, #0
 8009466:	9309      	str	r3, [sp, #36]	; 0x24
 8009468:	2320      	movs	r3, #32
 800946a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800946e:	2330      	movs	r3, #48	; 0x30
 8009470:	f04f 0901 	mov.w	r9, #1
 8009474:	f8cd 800c 	str.w	r8, [sp, #12]
 8009478:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009628 <_vfiprintf_r+0x220>
 800947c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009480:	4623      	mov	r3, r4
 8009482:	469a      	mov	sl, r3
 8009484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009488:	b10a      	cbz	r2, 800948e <_vfiprintf_r+0x86>
 800948a:	2a25      	cmp	r2, #37	; 0x25
 800948c:	d1f9      	bne.n	8009482 <_vfiprintf_r+0x7a>
 800948e:	ebba 0b04 	subs.w	fp, sl, r4
 8009492:	d00b      	beq.n	80094ac <_vfiprintf_r+0xa4>
 8009494:	465b      	mov	r3, fp
 8009496:	4622      	mov	r2, r4
 8009498:	4629      	mov	r1, r5
 800949a:	4630      	mov	r0, r6
 800949c:	f7ff ffa1 	bl	80093e2 <__sfputs_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	f000 80a9 	beq.w	80095f8 <_vfiprintf_r+0x1f0>
 80094a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a8:	445a      	add	r2, fp
 80094aa:	9209      	str	r2, [sp, #36]	; 0x24
 80094ac:	f89a 3000 	ldrb.w	r3, [sl]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80a1 	beq.w	80095f8 <_vfiprintf_r+0x1f0>
 80094b6:	2300      	movs	r3, #0
 80094b8:	f04f 32ff 	mov.w	r2, #4294967295
 80094bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c0:	f10a 0a01 	add.w	sl, sl, #1
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	9307      	str	r3, [sp, #28]
 80094c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094cc:	931a      	str	r3, [sp, #104]	; 0x68
 80094ce:	4654      	mov	r4, sl
 80094d0:	2205      	movs	r2, #5
 80094d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d6:	4854      	ldr	r0, [pc, #336]	; (8009628 <_vfiprintf_r+0x220>)
 80094d8:	f000 fb82 	bl	8009be0 <memchr>
 80094dc:	9a04      	ldr	r2, [sp, #16]
 80094de:	b9d8      	cbnz	r0, 8009518 <_vfiprintf_r+0x110>
 80094e0:	06d1      	lsls	r1, r2, #27
 80094e2:	bf44      	itt	mi
 80094e4:	2320      	movmi	r3, #32
 80094e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ea:	0713      	lsls	r3, r2, #28
 80094ec:	bf44      	itt	mi
 80094ee:	232b      	movmi	r3, #43	; 0x2b
 80094f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f4:	f89a 3000 	ldrb.w	r3, [sl]
 80094f8:	2b2a      	cmp	r3, #42	; 0x2a
 80094fa:	d015      	beq.n	8009528 <_vfiprintf_r+0x120>
 80094fc:	4654      	mov	r4, sl
 80094fe:	2000      	movs	r0, #0
 8009500:	f04f 0c0a 	mov.w	ip, #10
 8009504:	9a07      	ldr	r2, [sp, #28]
 8009506:	4621      	mov	r1, r4
 8009508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800950c:	3b30      	subs	r3, #48	; 0x30
 800950e:	2b09      	cmp	r3, #9
 8009510:	d94d      	bls.n	80095ae <_vfiprintf_r+0x1a6>
 8009512:	b1b0      	cbz	r0, 8009542 <_vfiprintf_r+0x13a>
 8009514:	9207      	str	r2, [sp, #28]
 8009516:	e014      	b.n	8009542 <_vfiprintf_r+0x13a>
 8009518:	eba0 0308 	sub.w	r3, r0, r8
 800951c:	fa09 f303 	lsl.w	r3, r9, r3
 8009520:	4313      	orrs	r3, r2
 8009522:	46a2      	mov	sl, r4
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	e7d2      	b.n	80094ce <_vfiprintf_r+0xc6>
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	1d19      	adds	r1, r3, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	9103      	str	r1, [sp, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	bfbb      	ittet	lt
 8009534:	425b      	neglt	r3, r3
 8009536:	f042 0202 	orrlt.w	r2, r2, #2
 800953a:	9307      	strge	r3, [sp, #28]
 800953c:	9307      	strlt	r3, [sp, #28]
 800953e:	bfb8      	it	lt
 8009540:	9204      	strlt	r2, [sp, #16]
 8009542:	7823      	ldrb	r3, [r4, #0]
 8009544:	2b2e      	cmp	r3, #46	; 0x2e
 8009546:	d10c      	bne.n	8009562 <_vfiprintf_r+0x15a>
 8009548:	7863      	ldrb	r3, [r4, #1]
 800954a:	2b2a      	cmp	r3, #42	; 0x2a
 800954c:	d134      	bne.n	80095b8 <_vfiprintf_r+0x1b0>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	3402      	adds	r4, #2
 8009552:	1d1a      	adds	r2, r3, #4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	9203      	str	r2, [sp, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfb8      	it	lt
 800955c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800962c <_vfiprintf_r+0x224>
 8009566:	2203      	movs	r2, #3
 8009568:	4650      	mov	r0, sl
 800956a:	7821      	ldrb	r1, [r4, #0]
 800956c:	f000 fb38 	bl	8009be0 <memchr>
 8009570:	b138      	cbz	r0, 8009582 <_vfiprintf_r+0x17a>
 8009572:	2240      	movs	r2, #64	; 0x40
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	eba0 000a 	sub.w	r0, r0, sl
 800957a:	4082      	lsls	r2, r0
 800957c:	4313      	orrs	r3, r2
 800957e:	3401      	adds	r4, #1
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009586:	2206      	movs	r2, #6
 8009588:	4829      	ldr	r0, [pc, #164]	; (8009630 <_vfiprintf_r+0x228>)
 800958a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800958e:	f000 fb27 	bl	8009be0 <memchr>
 8009592:	2800      	cmp	r0, #0
 8009594:	d03f      	beq.n	8009616 <_vfiprintf_r+0x20e>
 8009596:	4b27      	ldr	r3, [pc, #156]	; (8009634 <_vfiprintf_r+0x22c>)
 8009598:	bb1b      	cbnz	r3, 80095e2 <_vfiprintf_r+0x1da>
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	3307      	adds	r3, #7
 800959e:	f023 0307 	bic.w	r3, r3, #7
 80095a2:	3308      	adds	r3, #8
 80095a4:	9303      	str	r3, [sp, #12]
 80095a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a8:	443b      	add	r3, r7
 80095aa:	9309      	str	r3, [sp, #36]	; 0x24
 80095ac:	e768      	b.n	8009480 <_vfiprintf_r+0x78>
 80095ae:	460c      	mov	r4, r1
 80095b0:	2001      	movs	r0, #1
 80095b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80095b6:	e7a6      	b.n	8009506 <_vfiprintf_r+0xfe>
 80095b8:	2300      	movs	r3, #0
 80095ba:	f04f 0c0a 	mov.w	ip, #10
 80095be:	4619      	mov	r1, r3
 80095c0:	3401      	adds	r4, #1
 80095c2:	9305      	str	r3, [sp, #20]
 80095c4:	4620      	mov	r0, r4
 80095c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ca:	3a30      	subs	r2, #48	; 0x30
 80095cc:	2a09      	cmp	r2, #9
 80095ce:	d903      	bls.n	80095d8 <_vfiprintf_r+0x1d0>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0c6      	beq.n	8009562 <_vfiprintf_r+0x15a>
 80095d4:	9105      	str	r1, [sp, #20]
 80095d6:	e7c4      	b.n	8009562 <_vfiprintf_r+0x15a>
 80095d8:	4604      	mov	r4, r0
 80095da:	2301      	movs	r3, #1
 80095dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e0:	e7f0      	b.n	80095c4 <_vfiprintf_r+0x1bc>
 80095e2:	ab03      	add	r3, sp, #12
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	462a      	mov	r2, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	4b13      	ldr	r3, [pc, #76]	; (8009638 <_vfiprintf_r+0x230>)
 80095ec:	a904      	add	r1, sp, #16
 80095ee:	f3af 8000 	nop.w
 80095f2:	4607      	mov	r7, r0
 80095f4:	1c78      	adds	r0, r7, #1
 80095f6:	d1d6      	bne.n	80095a6 <_vfiprintf_r+0x19e>
 80095f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095fa:	07d9      	lsls	r1, r3, #31
 80095fc:	d405      	bmi.n	800960a <_vfiprintf_r+0x202>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	059a      	lsls	r2, r3, #22
 8009602:	d402      	bmi.n	800960a <_vfiprintf_r+0x202>
 8009604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009606:	f7ff fdd3 	bl	80091b0 <__retarget_lock_release_recursive>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	065b      	lsls	r3, r3, #25
 800960e:	f53f af1d 	bmi.w	800944c <_vfiprintf_r+0x44>
 8009612:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009614:	e71c      	b.n	8009450 <_vfiprintf_r+0x48>
 8009616:	ab03      	add	r3, sp, #12
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	462a      	mov	r2, r5
 800961c:	4630      	mov	r0, r6
 800961e:	4b06      	ldr	r3, [pc, #24]	; (8009638 <_vfiprintf_r+0x230>)
 8009620:	a904      	add	r1, sp, #16
 8009622:	f000 f87d 	bl	8009720 <_printf_i>
 8009626:	e7e4      	b.n	80095f2 <_vfiprintf_r+0x1ea>
 8009628:	08009d84 	.word	0x08009d84
 800962c:	08009d8a 	.word	0x08009d8a
 8009630:	08009d8e 	.word	0x08009d8e
 8009634:	00000000 	.word	0x00000000
 8009638:	080093e3 	.word	0x080093e3

0800963c <_printf_common>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	4616      	mov	r6, r2
 8009642:	4699      	mov	r9, r3
 8009644:	688a      	ldr	r2, [r1, #8]
 8009646:	690b      	ldr	r3, [r1, #16]
 8009648:	4607      	mov	r7, r0
 800964a:	4293      	cmp	r3, r2
 800964c:	bfb8      	it	lt
 800964e:	4613      	movlt	r3, r2
 8009650:	6033      	str	r3, [r6, #0]
 8009652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009656:	460c      	mov	r4, r1
 8009658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800965c:	b10a      	cbz	r2, 8009662 <_printf_common+0x26>
 800965e:	3301      	adds	r3, #1
 8009660:	6033      	str	r3, [r6, #0]
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	0699      	lsls	r1, r3, #26
 8009666:	bf42      	ittt	mi
 8009668:	6833      	ldrmi	r3, [r6, #0]
 800966a:	3302      	addmi	r3, #2
 800966c:	6033      	strmi	r3, [r6, #0]
 800966e:	6825      	ldr	r5, [r4, #0]
 8009670:	f015 0506 	ands.w	r5, r5, #6
 8009674:	d106      	bne.n	8009684 <_printf_common+0x48>
 8009676:	f104 0a19 	add.w	sl, r4, #25
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	6832      	ldr	r2, [r6, #0]
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	42ab      	cmp	r3, r5
 8009682:	dc2b      	bgt.n	80096dc <_printf_common+0xa0>
 8009684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009688:	1e13      	subs	r3, r2, #0
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	bf18      	it	ne
 800968e:	2301      	movne	r3, #1
 8009690:	0692      	lsls	r2, r2, #26
 8009692:	d430      	bmi.n	80096f6 <_printf_common+0xba>
 8009694:	4649      	mov	r1, r9
 8009696:	4638      	mov	r0, r7
 8009698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800969c:	47c0      	blx	r8
 800969e:	3001      	adds	r0, #1
 80096a0:	d023      	beq.n	80096ea <_printf_common+0xae>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	6922      	ldr	r2, [r4, #16]
 80096a6:	f003 0306 	and.w	r3, r3, #6
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	bf14      	ite	ne
 80096ae:	2500      	movne	r5, #0
 80096b0:	6833      	ldreq	r3, [r6, #0]
 80096b2:	f04f 0600 	mov.w	r6, #0
 80096b6:	bf08      	it	eq
 80096b8:	68e5      	ldreq	r5, [r4, #12]
 80096ba:	f104 041a 	add.w	r4, r4, #26
 80096be:	bf08      	it	eq
 80096c0:	1aed      	subeq	r5, r5, r3
 80096c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80096c6:	bf08      	it	eq
 80096c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096cc:	4293      	cmp	r3, r2
 80096ce:	bfc4      	itt	gt
 80096d0:	1a9b      	subgt	r3, r3, r2
 80096d2:	18ed      	addgt	r5, r5, r3
 80096d4:	42b5      	cmp	r5, r6
 80096d6:	d11a      	bne.n	800970e <_printf_common+0xd2>
 80096d8:	2000      	movs	r0, #0
 80096da:	e008      	b.n	80096ee <_printf_common+0xb2>
 80096dc:	2301      	movs	r3, #1
 80096de:	4652      	mov	r2, sl
 80096e0:	4649      	mov	r1, r9
 80096e2:	4638      	mov	r0, r7
 80096e4:	47c0      	blx	r8
 80096e6:	3001      	adds	r0, #1
 80096e8:	d103      	bne.n	80096f2 <_printf_common+0xb6>
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f2:	3501      	adds	r5, #1
 80096f4:	e7c1      	b.n	800967a <_printf_common+0x3e>
 80096f6:	2030      	movs	r0, #48	; 0x30
 80096f8:	18e1      	adds	r1, r4, r3
 80096fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009704:	4422      	add	r2, r4
 8009706:	3302      	adds	r3, #2
 8009708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800970c:	e7c2      	b.n	8009694 <_printf_common+0x58>
 800970e:	2301      	movs	r3, #1
 8009710:	4622      	mov	r2, r4
 8009712:	4649      	mov	r1, r9
 8009714:	4638      	mov	r0, r7
 8009716:	47c0      	blx	r8
 8009718:	3001      	adds	r0, #1
 800971a:	d0e6      	beq.n	80096ea <_printf_common+0xae>
 800971c:	3601      	adds	r6, #1
 800971e:	e7d9      	b.n	80096d4 <_printf_common+0x98>

08009720 <_printf_i>:
 8009720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	7e0f      	ldrb	r7, [r1, #24]
 8009726:	4691      	mov	r9, r2
 8009728:	2f78      	cmp	r7, #120	; 0x78
 800972a:	4680      	mov	r8, r0
 800972c:	460c      	mov	r4, r1
 800972e:	469a      	mov	sl, r3
 8009730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009736:	d807      	bhi.n	8009748 <_printf_i+0x28>
 8009738:	2f62      	cmp	r7, #98	; 0x62
 800973a:	d80a      	bhi.n	8009752 <_printf_i+0x32>
 800973c:	2f00      	cmp	r7, #0
 800973e:	f000 80d5 	beq.w	80098ec <_printf_i+0x1cc>
 8009742:	2f58      	cmp	r7, #88	; 0x58
 8009744:	f000 80c1 	beq.w	80098ca <_printf_i+0x1aa>
 8009748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800974c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009750:	e03a      	b.n	80097c8 <_printf_i+0xa8>
 8009752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009756:	2b15      	cmp	r3, #21
 8009758:	d8f6      	bhi.n	8009748 <_printf_i+0x28>
 800975a:	a101      	add	r1, pc, #4	; (adr r1, 8009760 <_printf_i+0x40>)
 800975c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009760:	080097b9 	.word	0x080097b9
 8009764:	080097cd 	.word	0x080097cd
 8009768:	08009749 	.word	0x08009749
 800976c:	08009749 	.word	0x08009749
 8009770:	08009749 	.word	0x08009749
 8009774:	08009749 	.word	0x08009749
 8009778:	080097cd 	.word	0x080097cd
 800977c:	08009749 	.word	0x08009749
 8009780:	08009749 	.word	0x08009749
 8009784:	08009749 	.word	0x08009749
 8009788:	08009749 	.word	0x08009749
 800978c:	080098d3 	.word	0x080098d3
 8009790:	080097f9 	.word	0x080097f9
 8009794:	0800988d 	.word	0x0800988d
 8009798:	08009749 	.word	0x08009749
 800979c:	08009749 	.word	0x08009749
 80097a0:	080098f5 	.word	0x080098f5
 80097a4:	08009749 	.word	0x08009749
 80097a8:	080097f9 	.word	0x080097f9
 80097ac:	08009749 	.word	0x08009749
 80097b0:	08009749 	.word	0x08009749
 80097b4:	08009895 	.word	0x08009895
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	602a      	str	r2, [r5, #0]
 80097c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097c8:	2301      	movs	r3, #1
 80097ca:	e0a0      	b.n	800990e <_printf_i+0x1ee>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	0607      	lsls	r7, r0, #24
 80097d2:	f103 0104 	add.w	r1, r3, #4
 80097d6:	6029      	str	r1, [r5, #0]
 80097d8:	d501      	bpl.n	80097de <_printf_i+0xbe>
 80097da:	681e      	ldr	r6, [r3, #0]
 80097dc:	e003      	b.n	80097e6 <_printf_i+0xc6>
 80097de:	0646      	lsls	r6, r0, #25
 80097e0:	d5fb      	bpl.n	80097da <_printf_i+0xba>
 80097e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	da03      	bge.n	80097f2 <_printf_i+0xd2>
 80097ea:	232d      	movs	r3, #45	; 0x2d
 80097ec:	4276      	negs	r6, r6
 80097ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097f2:	230a      	movs	r3, #10
 80097f4:	4859      	ldr	r0, [pc, #356]	; (800995c <_printf_i+0x23c>)
 80097f6:	e012      	b.n	800981e <_printf_i+0xfe>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	6820      	ldr	r0, [r4, #0]
 80097fc:	1d19      	adds	r1, r3, #4
 80097fe:	6029      	str	r1, [r5, #0]
 8009800:	0605      	lsls	r5, r0, #24
 8009802:	d501      	bpl.n	8009808 <_printf_i+0xe8>
 8009804:	681e      	ldr	r6, [r3, #0]
 8009806:	e002      	b.n	800980e <_printf_i+0xee>
 8009808:	0641      	lsls	r1, r0, #25
 800980a:	d5fb      	bpl.n	8009804 <_printf_i+0xe4>
 800980c:	881e      	ldrh	r6, [r3, #0]
 800980e:	2f6f      	cmp	r7, #111	; 0x6f
 8009810:	bf0c      	ite	eq
 8009812:	2308      	moveq	r3, #8
 8009814:	230a      	movne	r3, #10
 8009816:	4851      	ldr	r0, [pc, #324]	; (800995c <_printf_i+0x23c>)
 8009818:	2100      	movs	r1, #0
 800981a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800981e:	6865      	ldr	r5, [r4, #4]
 8009820:	2d00      	cmp	r5, #0
 8009822:	bfa8      	it	ge
 8009824:	6821      	ldrge	r1, [r4, #0]
 8009826:	60a5      	str	r5, [r4, #8]
 8009828:	bfa4      	itt	ge
 800982a:	f021 0104 	bicge.w	r1, r1, #4
 800982e:	6021      	strge	r1, [r4, #0]
 8009830:	b90e      	cbnz	r6, 8009836 <_printf_i+0x116>
 8009832:	2d00      	cmp	r5, #0
 8009834:	d04b      	beq.n	80098ce <_printf_i+0x1ae>
 8009836:	4615      	mov	r5, r2
 8009838:	fbb6 f1f3 	udiv	r1, r6, r3
 800983c:	fb03 6711 	mls	r7, r3, r1, r6
 8009840:	5dc7      	ldrb	r7, [r0, r7]
 8009842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009846:	4637      	mov	r7, r6
 8009848:	42bb      	cmp	r3, r7
 800984a:	460e      	mov	r6, r1
 800984c:	d9f4      	bls.n	8009838 <_printf_i+0x118>
 800984e:	2b08      	cmp	r3, #8
 8009850:	d10b      	bne.n	800986a <_printf_i+0x14a>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	07de      	lsls	r6, r3, #31
 8009856:	d508      	bpl.n	800986a <_printf_i+0x14a>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	6861      	ldr	r1, [r4, #4]
 800985c:	4299      	cmp	r1, r3
 800985e:	bfde      	ittt	le
 8009860:	2330      	movle	r3, #48	; 0x30
 8009862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800986a:	1b52      	subs	r2, r2, r5
 800986c:	6122      	str	r2, [r4, #16]
 800986e:	464b      	mov	r3, r9
 8009870:	4621      	mov	r1, r4
 8009872:	4640      	mov	r0, r8
 8009874:	f8cd a000 	str.w	sl, [sp]
 8009878:	aa03      	add	r2, sp, #12
 800987a:	f7ff fedf 	bl	800963c <_printf_common>
 800987e:	3001      	adds	r0, #1
 8009880:	d14a      	bne.n	8009918 <_printf_i+0x1f8>
 8009882:	f04f 30ff 	mov.w	r0, #4294967295
 8009886:	b004      	add	sp, #16
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	f043 0320 	orr.w	r3, r3, #32
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	2778      	movs	r7, #120	; 0x78
 8009896:	4832      	ldr	r0, [pc, #200]	; (8009960 <_printf_i+0x240>)
 8009898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	6829      	ldr	r1, [r5, #0]
 80098a0:	061f      	lsls	r7, r3, #24
 80098a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80098a6:	d402      	bmi.n	80098ae <_printf_i+0x18e>
 80098a8:	065f      	lsls	r7, r3, #25
 80098aa:	bf48      	it	mi
 80098ac:	b2b6      	uxthmi	r6, r6
 80098ae:	07df      	lsls	r7, r3, #31
 80098b0:	bf48      	it	mi
 80098b2:	f043 0320 	orrmi.w	r3, r3, #32
 80098b6:	6029      	str	r1, [r5, #0]
 80098b8:	bf48      	it	mi
 80098ba:	6023      	strmi	r3, [r4, #0]
 80098bc:	b91e      	cbnz	r6, 80098c6 <_printf_i+0x1a6>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	f023 0320 	bic.w	r3, r3, #32
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	2310      	movs	r3, #16
 80098c8:	e7a6      	b.n	8009818 <_printf_i+0xf8>
 80098ca:	4824      	ldr	r0, [pc, #144]	; (800995c <_printf_i+0x23c>)
 80098cc:	e7e4      	b.n	8009898 <_printf_i+0x178>
 80098ce:	4615      	mov	r5, r2
 80098d0:	e7bd      	b.n	800984e <_printf_i+0x12e>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	6826      	ldr	r6, [r4, #0]
 80098d6:	1d18      	adds	r0, r3, #4
 80098d8:	6961      	ldr	r1, [r4, #20]
 80098da:	6028      	str	r0, [r5, #0]
 80098dc:	0635      	lsls	r5, r6, #24
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	d501      	bpl.n	80098e6 <_printf_i+0x1c6>
 80098e2:	6019      	str	r1, [r3, #0]
 80098e4:	e002      	b.n	80098ec <_printf_i+0x1cc>
 80098e6:	0670      	lsls	r0, r6, #25
 80098e8:	d5fb      	bpl.n	80098e2 <_printf_i+0x1c2>
 80098ea:	8019      	strh	r1, [r3, #0]
 80098ec:	2300      	movs	r3, #0
 80098ee:	4615      	mov	r5, r2
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	e7bc      	b.n	800986e <_printf_i+0x14e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	2100      	movs	r1, #0
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	602a      	str	r2, [r5, #0]
 80098fc:	681d      	ldr	r5, [r3, #0]
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	4628      	mov	r0, r5
 8009902:	f000 f96d 	bl	8009be0 <memchr>
 8009906:	b108      	cbz	r0, 800990c <_printf_i+0x1ec>
 8009908:	1b40      	subs	r0, r0, r5
 800990a:	6060      	str	r0, [r4, #4]
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	2300      	movs	r3, #0
 8009912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009916:	e7aa      	b.n	800986e <_printf_i+0x14e>
 8009918:	462a      	mov	r2, r5
 800991a:	4649      	mov	r1, r9
 800991c:	4640      	mov	r0, r8
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	47d0      	blx	sl
 8009922:	3001      	adds	r0, #1
 8009924:	d0ad      	beq.n	8009882 <_printf_i+0x162>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	079b      	lsls	r3, r3, #30
 800992a:	d413      	bmi.n	8009954 <_printf_i+0x234>
 800992c:	68e0      	ldr	r0, [r4, #12]
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	4298      	cmp	r0, r3
 8009932:	bfb8      	it	lt
 8009934:	4618      	movlt	r0, r3
 8009936:	e7a6      	b.n	8009886 <_printf_i+0x166>
 8009938:	2301      	movs	r3, #1
 800993a:	4632      	mov	r2, r6
 800993c:	4649      	mov	r1, r9
 800993e:	4640      	mov	r0, r8
 8009940:	47d0      	blx	sl
 8009942:	3001      	adds	r0, #1
 8009944:	d09d      	beq.n	8009882 <_printf_i+0x162>
 8009946:	3501      	adds	r5, #1
 8009948:	68e3      	ldr	r3, [r4, #12]
 800994a:	9903      	ldr	r1, [sp, #12]
 800994c:	1a5b      	subs	r3, r3, r1
 800994e:	42ab      	cmp	r3, r5
 8009950:	dcf2      	bgt.n	8009938 <_printf_i+0x218>
 8009952:	e7eb      	b.n	800992c <_printf_i+0x20c>
 8009954:	2500      	movs	r5, #0
 8009956:	f104 0619 	add.w	r6, r4, #25
 800995a:	e7f5      	b.n	8009948 <_printf_i+0x228>
 800995c:	08009d95 	.word	0x08009d95
 8009960:	08009da6 	.word	0x08009da6

08009964 <__sflush_r>:
 8009964:	898a      	ldrh	r2, [r1, #12]
 8009966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009968:	4605      	mov	r5, r0
 800996a:	0710      	lsls	r0, r2, #28
 800996c:	460c      	mov	r4, r1
 800996e:	d457      	bmi.n	8009a20 <__sflush_r+0xbc>
 8009970:	684b      	ldr	r3, [r1, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc04      	bgt.n	8009980 <__sflush_r+0x1c>
 8009976:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	dc01      	bgt.n	8009980 <__sflush_r+0x1c>
 800997c:	2000      	movs	r0, #0
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009982:	2e00      	cmp	r6, #0
 8009984:	d0fa      	beq.n	800997c <__sflush_r+0x18>
 8009986:	2300      	movs	r3, #0
 8009988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800998c:	682f      	ldr	r7, [r5, #0]
 800998e:	6a21      	ldr	r1, [r4, #32]
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	d032      	beq.n	80099fa <__sflush_r+0x96>
 8009994:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	075a      	lsls	r2, r3, #29
 800999a:	d505      	bpl.n	80099a8 <__sflush_r+0x44>
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	1ac0      	subs	r0, r0, r3
 80099a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099a2:	b10b      	cbz	r3, 80099a8 <__sflush_r+0x44>
 80099a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a6:	1ac0      	subs	r0, r0, r3
 80099a8:	2300      	movs	r3, #0
 80099aa:	4602      	mov	r2, r0
 80099ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ae:	4628      	mov	r0, r5
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	47b0      	blx	r6
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	d106      	bne.n	80099c8 <__sflush_r+0x64>
 80099ba:	6829      	ldr	r1, [r5, #0]
 80099bc:	291d      	cmp	r1, #29
 80099be:	d82b      	bhi.n	8009a18 <__sflush_r+0xb4>
 80099c0:	4a28      	ldr	r2, [pc, #160]	; (8009a64 <__sflush_r+0x100>)
 80099c2:	410a      	asrs	r2, r1
 80099c4:	07d6      	lsls	r6, r2, #31
 80099c6:	d427      	bmi.n	8009a18 <__sflush_r+0xb4>
 80099c8:	2200      	movs	r2, #0
 80099ca:	6062      	str	r2, [r4, #4]
 80099cc:	6922      	ldr	r2, [r4, #16]
 80099ce:	04d9      	lsls	r1, r3, #19
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	d504      	bpl.n	80099de <__sflush_r+0x7a>
 80099d4:	1c42      	adds	r2, r0, #1
 80099d6:	d101      	bne.n	80099dc <__sflush_r+0x78>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b903      	cbnz	r3, 80099de <__sflush_r+0x7a>
 80099dc:	6560      	str	r0, [r4, #84]	; 0x54
 80099de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099e0:	602f      	str	r7, [r5, #0]
 80099e2:	2900      	cmp	r1, #0
 80099e4:	d0ca      	beq.n	800997c <__sflush_r+0x18>
 80099e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ea:	4299      	cmp	r1, r3
 80099ec:	d002      	beq.n	80099f4 <__sflush_r+0x90>
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff fbee 	bl	80091d0 <_free_r>
 80099f4:	2000      	movs	r0, #0
 80099f6:	6360      	str	r0, [r4, #52]	; 0x34
 80099f8:	e7c1      	b.n	800997e <__sflush_r+0x1a>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b0      	blx	r6
 8009a00:	1c41      	adds	r1, r0, #1
 8009a02:	d1c8      	bne.n	8009996 <__sflush_r+0x32>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0c5      	beq.n	8009996 <__sflush_r+0x32>
 8009a0a:	2b1d      	cmp	r3, #29
 8009a0c:	d001      	beq.n	8009a12 <__sflush_r+0xae>
 8009a0e:	2b16      	cmp	r3, #22
 8009a10:	d101      	bne.n	8009a16 <__sflush_r+0xb2>
 8009a12:	602f      	str	r7, [r5, #0]
 8009a14:	e7b2      	b.n	800997c <__sflush_r+0x18>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	e7ae      	b.n	800997e <__sflush_r+0x1a>
 8009a20:	690f      	ldr	r7, [r1, #16]
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d0aa      	beq.n	800997c <__sflush_r+0x18>
 8009a26:	0793      	lsls	r3, r2, #30
 8009a28:	bf18      	it	ne
 8009a2a:	2300      	movne	r3, #0
 8009a2c:	680e      	ldr	r6, [r1, #0]
 8009a2e:	bf08      	it	eq
 8009a30:	694b      	ldreq	r3, [r1, #20]
 8009a32:	1bf6      	subs	r6, r6, r7
 8009a34:	600f      	str	r7, [r1, #0]
 8009a36:	608b      	str	r3, [r1, #8]
 8009a38:	2e00      	cmp	r6, #0
 8009a3a:	dd9f      	ble.n	800997c <__sflush_r+0x18>
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	463a      	mov	r2, r7
 8009a40:	4628      	mov	r0, r5
 8009a42:	6a21      	ldr	r1, [r4, #32]
 8009a44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a48:	47e0      	blx	ip
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	dc06      	bgt.n	8009a5c <__sflush_r+0xf8>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	e790      	b.n	800997e <__sflush_r+0x1a>
 8009a5c:	4407      	add	r7, r0
 8009a5e:	1a36      	subs	r6, r6, r0
 8009a60:	e7ea      	b.n	8009a38 <__sflush_r+0xd4>
 8009a62:	bf00      	nop
 8009a64:	dfbffffe 	.word	0xdfbffffe

08009a68 <_fflush_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	690b      	ldr	r3, [r1, #16]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b913      	cbnz	r3, 8009a78 <_fflush_r+0x10>
 8009a72:	2500      	movs	r5, #0
 8009a74:	4628      	mov	r0, r5
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	b118      	cbz	r0, 8009a82 <_fflush_r+0x1a>
 8009a7a:	6a03      	ldr	r3, [r0, #32]
 8009a7c:	b90b      	cbnz	r3, 8009a82 <_fflush_r+0x1a>
 8009a7e:	f7ff f9a1 	bl	8008dc4 <__sinit>
 8009a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f3      	beq.n	8009a72 <_fflush_r+0xa>
 8009a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a8c:	07d0      	lsls	r0, r2, #31
 8009a8e:	d404      	bmi.n	8009a9a <_fflush_r+0x32>
 8009a90:	0599      	lsls	r1, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_fflush_r+0x32>
 8009a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a96:	f7ff fb8a 	bl	80091ae <__retarget_lock_acquire_recursive>
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f7ff ff61 	bl	8009964 <__sflush_r>
 8009aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	07da      	lsls	r2, r3, #31
 8009aa8:	d4e4      	bmi.n	8009a74 <_fflush_r+0xc>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d4e1      	bmi.n	8009a74 <_fflush_r+0xc>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f7ff fb7d 	bl	80091b0 <__retarget_lock_release_recursive>
 8009ab6:	e7dd      	b.n	8009a74 <_fflush_r+0xc>

08009ab8 <__swhatbuf_r>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	460c      	mov	r4, r1
 8009abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac0:	4615      	mov	r5, r2
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	461e      	mov	r6, r3
 8009ac6:	b096      	sub	sp, #88	; 0x58
 8009ac8:	da0c      	bge.n	8009ae4 <__swhatbuf_r+0x2c>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	2100      	movs	r1, #0
 8009ace:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ad2:	bf0c      	ite	eq
 8009ad4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ad8:	2340      	movne	r3, #64	; 0x40
 8009ada:	2000      	movs	r0, #0
 8009adc:	6031      	str	r1, [r6, #0]
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	b016      	add	sp, #88	; 0x58
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	466a      	mov	r2, sp
 8009ae6:	f000 f849 	bl	8009b7c <_fstat_r>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	dbed      	blt.n	8009aca <__swhatbuf_r+0x12>
 8009aee:	9901      	ldr	r1, [sp, #4]
 8009af0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009af4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009af8:	4259      	negs	r1, r3
 8009afa:	4159      	adcs	r1, r3
 8009afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b00:	e7eb      	b.n	8009ada <__swhatbuf_r+0x22>

08009b02 <__smakebuf_r>:
 8009b02:	898b      	ldrh	r3, [r1, #12]
 8009b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b06:	079d      	lsls	r5, r3, #30
 8009b08:	4606      	mov	r6, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	d507      	bpl.n	8009b1e <__smakebuf_r+0x1c>
 8009b0e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	6123      	str	r3, [r4, #16]
 8009b16:	2301      	movs	r3, #1
 8009b18:	6163      	str	r3, [r4, #20]
 8009b1a:	b002      	add	sp, #8
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	466a      	mov	r2, sp
 8009b20:	ab01      	add	r3, sp, #4
 8009b22:	f7ff ffc9 	bl	8009ab8 <__swhatbuf_r>
 8009b26:	9900      	ldr	r1, [sp, #0]
 8009b28:	4605      	mov	r5, r0
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7ff fbb8 	bl	80092a0 <_malloc_r>
 8009b30:	b948      	cbnz	r0, 8009b46 <__smakebuf_r+0x44>
 8009b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b36:	059a      	lsls	r2, r3, #22
 8009b38:	d4ef      	bmi.n	8009b1a <__smakebuf_r+0x18>
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	f043 0302 	orr.w	r3, r3, #2
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	e7e3      	b.n	8009b0e <__smakebuf_r+0xc>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	6020      	str	r0, [r4, #0]
 8009b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	9b00      	ldr	r3, [sp, #0]
 8009b52:	6120      	str	r0, [r4, #16]
 8009b54:	6163      	str	r3, [r4, #20]
 8009b56:	9b01      	ldr	r3, [sp, #4]
 8009b58:	b15b      	cbz	r3, 8009b72 <__smakebuf_r+0x70>
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b60:	f000 f81e 	bl	8009ba0 <_isatty_r>
 8009b64:	b128      	cbz	r0, 8009b72 <__smakebuf_r+0x70>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f023 0303 	bic.w	r3, r3, #3
 8009b6c:	f043 0301 	orr.w	r3, r3, #1
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	431d      	orrs	r5, r3
 8009b76:	81a5      	strh	r5, [r4, #12]
 8009b78:	e7cf      	b.n	8009b1a <__smakebuf_r+0x18>
	...

08009b7c <_fstat_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4d06      	ldr	r5, [pc, #24]	; (8009b9c <_fstat_r+0x20>)
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	f7f6 ffc5 	bl	8000b18 <_fstat>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d102      	bne.n	8009b98 <_fstat_r+0x1c>
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	b103      	cbz	r3, 8009b98 <_fstat_r+0x1c>
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	bd38      	pop	{r3, r4, r5, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20001c3c 	.word	0x20001c3c

08009ba0 <_isatty_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	4d05      	ldr	r5, [pc, #20]	; (8009bbc <_isatty_r+0x1c>)
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f6 ffc3 	bl	8000b36 <_isatty>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_isatty_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_isatty_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20001c3c 	.word	0x20001c3c

08009bc0 <_sbrk_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4d05      	ldr	r5, [pc, #20]	; (8009bdc <_sbrk_r+0x1c>)
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	4608      	mov	r0, r1
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	f7f6 ffca 	bl	8000b64 <_sbrk>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_sbrk_r+0x1a>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_sbrk_r+0x1a>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	20001c3c 	.word	0x20001c3c

08009be0 <memchr>:
 8009be0:	4603      	mov	r3, r0
 8009be2:	b510      	push	{r4, lr}
 8009be4:	b2c9      	uxtb	r1, r1
 8009be6:	4402      	add	r2, r0
 8009be8:	4293      	cmp	r3, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	d101      	bne.n	8009bf2 <memchr+0x12>
 8009bee:	2000      	movs	r0, #0
 8009bf0:	e003      	b.n	8009bfa <memchr+0x1a>
 8009bf2:	7804      	ldrb	r4, [r0, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	428c      	cmp	r4, r1
 8009bf8:	d1f6      	bne.n	8009be8 <memchr+0x8>
 8009bfa:	bd10      	pop	{r4, pc}

08009bfc <_init>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	bf00      	nop
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr

08009c08 <_fini>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr

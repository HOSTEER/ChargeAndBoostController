
ChargeAndBoostController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f88  08003f88  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003f88  08003f88  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f88  08003f88  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  20000010  08003fa0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08003fa0  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f31  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003704  00000000  00000000  00034fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  000386b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101c  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a002  00000000  00000000  0003ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019923  00000000  00000000  00054b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000996c3  00000000  00000000  0006e4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005550  00000000  00000000  00107b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ee8 	.word	0x08003ee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003ee8 	.word	0x08003ee8

08000150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f000 fcc3 	bl	8000b18 <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f000 fa86 	bl	80006a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fd8b 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f000 fa76 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a14      	ldr	r2, [pc, #80]	; (8000238 <HAL_ADC_MspInit+0x6c>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d121      	bne.n	8000230 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <HAL_ADC_MspInit+0x70>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin|USB_SENSE_Pin;
 800021c:	2303      	movs	r3, #3
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <HAL_ADC_MspInit+0x74>)
 800022c:	f000 ff66 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40012400 	.word	0x40012400
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000060 	.word	0x20000060
 8000270:	200000b4 	.word	0x200000b4

08000274 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <MX_FREERTOS_Init+0x30>)
 800027c:	1d3c      	adds	r4, r7, #4
 800027e:	461d      	mov	r5, r3
 8000280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f002 fc41 	bl	8002b18 <osThreadCreate>
 8000296:	4603      	mov	r3, r0
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <MX_FREERTOS_Init+0x34>)
 800029a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bdb0      	pop	{r4, r5, r7, pc}
 80002a4:	08003f0c 	.word	0x08003f0c
 80002a8:	2000005c 	.word	0x2000005c

080002ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f002 fc7b 	bl	8002bb0 <osDelay>
 80002ba:	e7fb      	b.n	80002b4 <StartDefaultTask+0x8>

080002bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b47      	ldr	r3, [pc, #284]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b41      	ldr	r3, [pc, #260]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b3e      	ldr	r3, [pc, #248]	; (80003f0 <MX_GPIO_Init+0x134>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b3b      	ldr	r3, [pc, #236]	; (80003f0 <MX_GPIO_Init+0x134>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a3a      	ldr	r2, [pc, #232]	; (80003f0 <MX_GPIO_Init+0x134>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b38      	ldr	r3, [pc, #224]	; (80003f0 <MX_GPIO_Init+0x134>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2107      	movs	r1, #7
 800031c:	4835      	ldr	r0, [pc, #212]	; (80003f4 <MX_GPIO_Init+0x138>)
 800031e:	f001 f871 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD0_Pin|CHARG_EN_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8000328:	4833      	ldr	r0, [pc, #204]	; (80003f8 <MX_GPIO_Init+0x13c>)
 800032a:	f001 f86b 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12V_Pin|VOUT_EN_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000334:	4830      	ldr	r0, [pc, #192]	; (80003f8 <MX_GPIO_Init+0x13c>)
 8000336:	f001 f865 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800033a:	2380      	movs	r3, #128	; 0x80
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033e:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <MX_GPIO_Init+0x140>)
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	482a      	ldr	r0, [pc, #168]	; (80003f8 <MX_GPIO_Init+0x13c>)
 800034e:	f000 fed5 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD2_Pin;
 8000352:	2307      	movs	r3, #7
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4822      	ldr	r0, [pc, #136]	; (80003f4 <MX_GPIO_Init+0x138>)
 800036a:	f000 fec7 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD0_Pin|EN12V_Pin|VOUT_EN_Pin
 800036e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000372:	613b      	str	r3, [r7, #16]
                          |CHARG_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_GPIO_Init+0x13c>)
 8000388:	f000 feb8 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARG_ON_Pin;
 800038c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARG_ON_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4815      	ldr	r0, [pc, #84]	; (80003f8 <MX_GPIO_Init+0x13c>)
 80003a2:	f000 feab 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARG_OFF_Pin;
 80003a6:	2308      	movs	r3, #8
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARG_OFF_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480e      	ldr	r0, [pc, #56]	; (80003f4 <MX_GPIO_Init+0x138>)
 80003ba:	f000 fe9f 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 80003be:	2320      	movs	r3, #32
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_GPIO_Init+0x140>)
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4808      	ldr	r0, [pc, #32]	; (80003f4 <MX_GPIO_Init+0x138>)
 80003d2:	f000 fe93 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2105      	movs	r1, #5
 80003da:	2017      	movs	r0, #23
 80003dc:	f000 fe63 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003e0:	2017      	movs	r0, #23
 80003e2:	f000 fe7c 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 80003e6:	bf00      	nop
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	40010800 	.word	0x40010800
 80003fc:	10110000 	.word	0x10110000

08000400 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_I2C1_Init+0x50>)
 8000406:	4a13      	ldr	r2, [pc, #76]	; (8000454 <MX_I2C1_Init+0x54>)
 8000408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_I2C1_Init+0x50>)
 800040c:	4a12      	ldr	r2, [pc, #72]	; (8000458 <MX_I2C1_Init+0x58>)
 800040e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_I2C1_Init+0x50>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_I2C1_Init+0x50>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_I2C1_Init+0x50>)
 800041e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_I2C1_Init+0x50>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_I2C1_Init+0x50>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <MX_I2C1_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_I2C1_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_I2C1_Init+0x50>)
 800043e:	f001 f835 	bl	80014ac <HAL_I2C_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000448:	f000 f92e 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200002b4 	.word	0x200002b4
 8000454:	40005400 	.word	0x40005400
 8000458:	00061a80 	.word	0x00061a80

0800045c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <HAL_I2C_MspInit+0x70>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d123      	bne.n	80004c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000494:	23c0      	movs	r3, #192	; 0xc0
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000498:	2312      	movs	r3, #18
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049c:	2303      	movs	r3, #3
 800049e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480b      	ldr	r0, [pc, #44]	; (80004d4 <HAL_I2C_MspInit+0x78>)
 80004a8:	f000 fe28 	bl	80010fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b6:	61d3      	str	r3, [r2, #28]
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_I2C_MspInit+0x74>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40005400 	.word	0x40005400
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <leds_task>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void leds_task(void * unused){
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef * GPIO_port[5]={ LD0_GPIO_Port, LD1_GPIO_Port, LD2_GPIO_Port, LD3_GPIO_Port, LD4_GPIO_Port};
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <leds_task+0x6c>)
 80004e2:	f107 0418 	add.w	r4, r7, #24
 80004e6:	461d      	mov	r5, r3
 80004e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ec:	682b      	ldr	r3, [r5, #0]
 80004ee:	6023      	str	r3, [r4, #0]
	uint16_t GPIO_pins[5]={ LD0_Pin, LD1_Pin, LD2_Pin, LD3_Pin, LD4_Pin};
 80004f0:	4a15      	ldr	r2, [pc, #84]	; (8000548 <leds_task+0x70>)
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004f8:	c303      	stmia	r3!, {r0, r1}
 80004fa:	801a      	strh	r2, [r3, #0]
	vTaskDelay(pdMS_TO_TICKS(5000));
 80004fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000500:	f002 fda4 	bl	800304c <vTaskDelay>
	for(uint8_t led_number=1; led_number<5; led_number++){
 8000504:	2301      	movs	r3, #1
 8000506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800050a:	e016      	b.n	800053a <leds_task+0x62>
		HAL_GPIO_WritePin(GPIO_port[led_number], GPIO_pins[led_number], GPIO_PIN_RESET);
 800050c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	3330      	adds	r3, #48	; 0x30
 8000514:	443b      	add	r3, r7
 8000516:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800051a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	3330      	adds	r3, #48	; 0x30
 8000522:	443b      	add	r3, r7
 8000524:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	f000 ff6a 	bl	8001404 <HAL_GPIO_WritePin>
	for(uint8_t led_number=1; led_number<5; led_number++){
 8000530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000534:	3301      	adds	r3, #1
 8000536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800053a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800053e:	2b04      	cmp	r3, #4
 8000540:	d9e4      	bls.n	800050c <leds_task+0x34>
	}
	for(;;){
 8000542:	e7fe      	b.n	8000542 <leds_task+0x6a>
 8000544:	08003f28 	.word	0x08003f28
 8000548:	08003f3c 	.word	0x08003f3c

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 faaf 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f82d 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f7ff feaf 	bl	80002bc <MX_GPIO_Init>
  MX_I2C1_Init();
 800055e:	f7ff ff4f 	bl	8000400 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000562:	f000 fa0d 	bl	8000980 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000566:	f7ff fdf3 	bl	8000150 <MX_ADC1_Init>
  MX_TIM1_Init();
 800056a:	f000 f991 	bl	8000890 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 800056e:	480d      	ldr	r0, [pc, #52]	; (80005a4 <main+0x58>)
 8000570:	f001 fe28 	bl	80021c4 <HAL_TIM_Base_Start_IT>
	BaseType_t ret;
	ret = xTaskCreate(leds_task, "leds_task", DEFAULT_STACK_SIZE, NULL, 1, &h_leds);
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <main+0x5c>)
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	2301      	movs	r3, #1
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000582:	490a      	ldr	r1, [pc, #40]	; (80005ac <main+0x60>)
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0x64>)
 8000586:	f002 fc32 	bl	8002dee <xTaskCreate>
 800058a:	6078      	str	r0, [r7, #4]
	if(ret != pdPASS)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d001      	beq.n	8000596 <main+0x4a>
	{
		Error_Handler();
 8000592:	f000 f889 	bl	80006a8 <Error_Handler>
	}
	vTaskStartScheduler();
 8000596:	f002 fd8d 	bl	80030b4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800059a:	f7ff fe6b 	bl	8000274 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800059e:	f002 fab4 	bl	8002b0a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x56>
 80005a4:	20000354 	.word	0x20000354
 80005a8:	20000308 	.word	0x20000308
 80005ac:	08003f48 	.word	0x08003f48
 80005b0:	080004d9 	.word	0x080004d9

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005be:	2228      	movs	r2, #40	; 0x28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fc64 	bl	8003e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80005ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000602:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f891 	bl	8001734 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000618:	f000 f846 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fafd 	bl	8001c38 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f830 	bl	80006a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000648:	2302      	movs	r3, #2
 800064a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800064c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000650:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fcaf 	bl	8001fb8 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000660:	f000 f822 	bl	80006a8 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800067c:	d102      	bne.n	8000684 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800067e:	f000 fa2f 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
	else if (htim->Instance == TIM1){
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
	}
  /* USER CODE END Callback 1 */
}
 8000682:	e009      	b.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim->Instance == TIM1){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d104      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000694:	f000 fece 	bl	8001434 <HAL_GPIO_TogglePin>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40012c00 	.word	0x40012c00
 80006a4:	40010800 	.word	0x40010800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_MspInit+0x68>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_MspInit+0x68>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_MspInit+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_MspInit+0x68>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_MspInit+0x68>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x68>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	210f      	movs	r1, #15
 80006ee:	f06f 0001 	mvn.w	r0, #1
 80006f2:	f000 fcd8 	bl	80010a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_MspInit+0x6c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <HAL_MspInit+0x6c>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000

08000724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <HAL_InitTick+0xe8>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a33      	ldr	r2, [pc, #204]	; (800080c <HAL_InitTick+0xe8>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <HAL_InitTick+0xe8>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000752:	f107 0210 	add.w	r2, r7, #16
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fbdd 	bl	8001f1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800076c:	f001 fbae 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8000770:	6378      	str	r0, [r7, #52]	; 0x34
 8000772:	e004      	b.n	800077e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000774:	f001 fbaa 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8000778:	4603      	mov	r3, r0
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000780:	4a23      	ldr	r2, [pc, #140]	; (8000810 <HAL_InitTick+0xec>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	0c9b      	lsrs	r3, r3, #18
 8000788:	3b01      	subs	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <HAL_InitTick+0xf0>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <HAL_InitTick+0xf0>)
 8000796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800079c:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <HAL_InitTick+0xf0>)
 800079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <HAL_InitTick+0xf0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <HAL_InitTick+0xf0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_InitTick+0xf0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80007b4:	4817      	ldr	r0, [pc, #92]	; (8000814 <HAL_InitTick+0xf0>)
 80007b6:	f001 fcb5 	bl	8002124 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d11b      	bne.n	8000800 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <HAL_InitTick+0xf0>)
 80007ca:	f001 fcfb 	bl	80021c4 <HAL_TIM_Base_Start_IT>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d111      	bne.n	8000800 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007dc:	201c      	movs	r0, #28
 80007de:	f000 fc7e 	bl	80010de <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d808      	bhi.n	80007fa <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	201c      	movs	r0, #28
 80007ee:	f000 fc5a 	bl	80010a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <HAL_InitTick+0xf4>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e002      	b.n	8000800 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000804:	4618      	mov	r0, r3
 8000806:	3738      	adds	r7, #56	; 0x38
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40021000 	.word	0x40021000
 8000810:	431bde83 	.word	0x431bde83
 8000814:	2000030c 	.word	0x2000030c
 8000818:	20000004 	.word	0x20000004

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_N_Pin);
 800084a:	2020      	movs	r0, #32
 800084c:	f000 fe0c 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	f000 fe09 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <TIM1_UP_IRQHandler+0x10>)
 8000862:	f001 fd01 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000354 	.word	0x20000354

08000870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <TIM2_IRQHandler+0x10>)
 8000876:	f001 fcf7 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000030c 	.word	0x2000030c

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_TIM1_Init+0x9c>)
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <MX_TIM1_Init+0xa0>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM1_Init+0x9c>)
 80008b4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_TIM1_Init+0x9c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM1_Init+0x9c>)
 80008c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_TIM1_Init+0x9c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_TIM1_Init+0x9c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_TIM1_Init+0x9c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_TIM1_Init+0x9c>)
 80008dc:	f001 fc22 	bl	8002124 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008e6:	f7ff fedf 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_TIM1_Init+0x9c>)
 80008f8:	f001 fdbe 	bl	8002478 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000902:	f7ff fed1 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_TIM1_Init+0x9c>)
 8000914:	f001 ff94 	bl	8002840 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800091e:	f7ff fec3 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000354 	.word	0x20000354
 8000930:	40012c00 	.word	0x40012c00

08000934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <HAL_TIM_Base_MspInit+0x44>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d113      	bne.n	800096e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_TIM_Base_MspInit+0x48>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <HAL_TIM_Base_MspInit+0x48>)
 800094c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_TIM_Base_MspInit+0x48>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2105      	movs	r1, #5
 8000962:	2019      	movs	r0, #25
 8000964:	f000 fb9f 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000968:	2019      	movs	r0, #25
 800096a:	f000 fbb8 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40012c00 	.word	0x40012c00
 800097c:	40021000 	.word	0x40021000

08000980 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f001 ffb2 	bl	8002920 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f7ff fe71 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000039c 	.word	0x2000039c
 80009d0:	40004400 	.word	0x40004400

080009d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <HAL_UART_MspInit+0x88>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d12f      	bne.n	8000a54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fe:	61d3      	str	r3, [r2, #28]
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a24:	2304      	movs	r3, #4
 8000a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_MspInit+0x90>)
 8000a38:	f000 fb60 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_UART_MspInit+0x90>)
 8000a50:	f000 fb54 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff ff0c 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6e:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a84:	4c09      	ldr	r4, [pc, #36]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 fa05 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fd59 	bl	800054c <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aa4:	08003f90 	.word	0x08003f90
  ldr r2, =_sbss
 8000aa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aac:	20001134 	.word	0x20001134

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 fae3 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f7ff fe2a 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fdf0 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200003e4 	.word	0x200003e4

08000b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	200003e4 	.word	0x200003e4

08000b18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0be      	b.n	8000cb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fb38 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f9ab 	bl	8000eb8 <ADC_ConversionStop_Disable>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8099 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8095 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b1b      	ldrb	r3, [r3, #12]
 8000b9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb0:	d003      	beq.n	8000bba <HAL_ADC_Init+0xa2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d102      	bne.n	8000bc0 <HAL_ADC_Init+0xa8>
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	e000      	b.n	8000bc2 <HAL_ADC_Init+0xaa>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7d1b      	ldrb	r3, [r3, #20]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d119      	bne.n	8000c04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7b1b      	ldrb	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	035a      	lsls	r2, r3, #13
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e00b      	b.n	8000c04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f043 0220 	orr.w	r2, r3, #32
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <HAL_ADC_Init+0x1a8>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_Init+0x126>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d104      	bne.n	8000c48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	051b      	lsls	r3, r3, #20
 8000c46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_Init+0x1ac>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10b      	bne.n	8000c84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c82:	e018      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f023 0312 	bic.w	r3, r3, #18
 8000c8c:	f043 0210 	orr.w	r2, r3, #16
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca4:	e007      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc4:	ff1f0efe 	.word	0xff1f0efe

08000cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d101      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x20>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e0dc      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x1da>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d81c      	bhi.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	3b05      	subs	r3, #5
 8000d0a:	221f      	movs	r2, #31
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	3b05      	subs	r3, #5
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d30:	e03c      	b.n	8000dac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	d81c      	bhi.n	8000d74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b23      	subs	r3, #35	; 0x23
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4019      	ands	r1, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
 8000d72:	e01b      	b.n	8000dac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	3b41      	subs	r3, #65	; 0x41
 8000d86:	221f      	movs	r2, #31
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4019      	ands	r1, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b41      	subs	r3, #65	; 0x41
 8000da0:	fa00 f203 	lsl.w	r2, r0, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d91c      	bls.n	8000dee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68d9      	ldr	r1, [r3, #12]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b1e      	subs	r3, #30
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4019      	ands	r1, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b1e      	subs	r3, #30
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	e019      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6919      	ldr	r1, [r3, #16]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2207      	movs	r2, #7
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d003      	beq.n	8000e32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e2e:	2b11      	cmp	r3, #17
 8000e30:	d132      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_ADC_ConfigChannel+0x1e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d125      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d126      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b10      	cmp	r3, #16
 8000e60:	d11a      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9a      	lsrs	r2, r3, #18
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e78:	e002      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <HAL_ADC_ConfigChannel+0x1b2>
 8000e86:	e007      	b.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f043 0220 	orr.w	r2, r3, #32
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40012400 	.word	0x40012400
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	431bde83 	.word	0x431bde83

08000eb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d12e      	bne.n	8000f30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ee2:	f7ff fe0f 	bl	8000b04 <HAL_GetTick>
 8000ee6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee8:	e01b      	b.n	8000f22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eea:	f7ff fe0b 	bl	8000b04 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d914      	bls.n	8000f22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10d      	bne.n	8000f22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f043 0210 	orr.w	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e007      	b.n	8000f32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d0dc      	beq.n	8000eea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <__NVIC_EnableIRQ+0x34>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff4f 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff64 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ffb2 	bl	800102c <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff81 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff57 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e169      	b.n	80013e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001110:	2201      	movs	r2, #1
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8158 	bne.w	80013de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a9a      	ldr	r2, [pc, #616]	; (800139c <HAL_GPIO_Init+0x2a0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d05e      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001138:	4a98      	ldr	r2, [pc, #608]	; (800139c <HAL_GPIO_Init+0x2a0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d875      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800113e:	4a98      	ldr	r2, [pc, #608]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d058      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001144:	4a96      	ldr	r2, [pc, #600]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d86f      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800114a:	4a96      	ldr	r2, [pc, #600]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d052      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001150:	4a94      	ldr	r2, [pc, #592]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d869      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001156:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d04c      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 800115c:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d863      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001162:	4a92      	ldr	r2, [pc, #584]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d046      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001168:	4a90      	ldr	r2, [pc, #576]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d85d      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d82a      	bhi.n	80011c8 <HAL_GPIO_Init+0xcc>
 8001172:	2b12      	cmp	r3, #18
 8001174:	d859      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <HAL_GPIO_Init+0x80>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011f7 	.word	0x080011f7
 8001180:	080011d1 	.word	0x080011d1
 8001184:	080011e3 	.word	0x080011e3
 8001188:	08001225 	.word	0x08001225
 800118c:	0800122b 	.word	0x0800122b
 8001190:	0800122b 	.word	0x0800122b
 8001194:	0800122b 	.word	0x0800122b
 8001198:	0800122b 	.word	0x0800122b
 800119c:	0800122b 	.word	0x0800122b
 80011a0:	0800122b 	.word	0x0800122b
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	0800122b 	.word	0x0800122b
 80011ac:	0800122b 	.word	0x0800122b
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	0800122b 	.word	0x0800122b
 80011b8:	0800122b 	.word	0x0800122b
 80011bc:	0800122b 	.word	0x0800122b
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	4a79      	ldr	r2, [pc, #484]	; (80013b0 <HAL_GPIO_Init+0x2b4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e02c      	b.n	800122a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e029      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e024      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	3308      	adds	r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e01f      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	330c      	adds	r3, #12
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e01a      	b.n	800122c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fe:	2304      	movs	r3, #4
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e013      	b.n	800122c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	611a      	str	r2, [r3, #16]
          break;
 8001216:	e009      	b.n	800122c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	615a      	str	r2, [r3, #20]
          break;
 8001222:	e003      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x130>
          break;
 800122a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2bff      	cmp	r3, #255	; 0xff
 8001230:	d801      	bhi.n	8001236 <HAL_GPIO_Init+0x13a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	e001      	b.n	800123a <HAL_GPIO_Init+0x13e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d802      	bhi.n	8001248 <HAL_GPIO_Init+0x14c>
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x152>
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	3b08      	subs	r3, #8
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	210f      	movs	r1, #15
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	6a39      	ldr	r1, [r7, #32]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80b1 	beq.w	80013de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001294:	4a48      	ldr	r2, [pc, #288]	; (80013b8 <HAL_GPIO_Init+0x2bc>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a40      	ldr	r2, [pc, #256]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d013      	beq.n	80012e8 <HAL_GPIO_Init+0x1ec>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <HAL_GPIO_Init+0x2c4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1e8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <HAL_GPIO_Init+0x2c8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1e4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3d      	ldr	r2, [pc, #244]	; (80013c8 <HAL_GPIO_Init+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1e0>
 80012d8:	2303      	movs	r3, #3
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012dc:	2304      	movs	r3, #4
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e8:	2300      	movs	r3, #0
 80012ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fa:	492f      	ldr	r1, [pc, #188]	; (80013b8 <HAL_GPIO_Init+0x2bc>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	492c      	ldr	r1, [pc, #176]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4928      	ldr	r1, [pc, #160]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4922      	ldr	r1, [pc, #136]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	491e      	ldr	r1, [pc, #120]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4918      	ldr	r1, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4914      	ldr	r1, [pc, #80]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	490e      	ldr	r1, [pc, #56]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e021      	b.n	80013de <HAL_GPIO_Init+0x2e2>
 800139a:	bf00      	nop
 800139c:	10320000 	.word	0x10320000
 80013a0:	10310000 	.word	0x10310000
 80013a4:	10220000 	.word	0x10220000
 80013a8:	10210000 	.word	0x10210000
 80013ac:	10120000 	.word	0x10120000
 80013b0:	10110000 	.word	0x10110000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000
 80013c8:	40011400 	.word	0x40011400
 80013cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_GPIO_Init+0x304>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <HAL_GPIO_Init+0x304>)
 80013da:	4013      	ands	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f ae8e 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	372c      	adds	r7, #44	; 0x2c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43d9      	mvns	r1, r3
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	400b      	ands	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	611a      	str	r2, [r3, #16]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f806 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e12b      	b.n	8001716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7fe ffc2 	bl	800045c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800150e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001510:	f000 fcdc 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8001514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a81      	ldr	r2, [pc, #516]	; (8001720 <HAL_I2C_Init+0x274>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d807      	bhi.n	8001530 <HAL_I2C_Init+0x84>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a80      	ldr	r2, [pc, #512]	; (8001724 <HAL_I2C_Init+0x278>)
 8001524:	4293      	cmp	r3, r2
 8001526:	bf94      	ite	ls
 8001528:	2301      	movls	r3, #1
 800152a:	2300      	movhi	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e006      	b.n	800153e <HAL_I2C_Init+0x92>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a7d      	ldr	r2, [pc, #500]	; (8001728 <HAL_I2C_Init+0x27c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0e7      	b.n	8001716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4a78      	ldr	r2, [pc, #480]	; (800172c <HAL_I2C_Init+0x280>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a6a      	ldr	r2, [pc, #424]	; (8001720 <HAL_I2C_Init+0x274>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d802      	bhi.n	8001580 <HAL_I2C_Init+0xd4>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	e009      	b.n	8001594 <HAL_I2C_Init+0xe8>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	4a69      	ldr	r2, [pc, #420]	; (8001730 <HAL_I2C_Init+0x284>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	3301      	adds	r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	430b      	orrs	r3, r1
 800159a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	495c      	ldr	r1, [pc, #368]	; (8001720 <HAL_I2C_Init+0x274>)
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d819      	bhi.n	80015e8 <HAL_I2C_Init+0x13c>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1e59      	subs	r1, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015c8:	400b      	ands	r3, r1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <HAL_I2C_Init+0x138>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1e59      	subs	r1, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e2:	e051      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 80015e4:	2304      	movs	r3, #4
 80015e6:	e04f      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d111      	bne.n	8001614 <HAL_I2C_Init+0x168>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	e012      	b.n	800163a <HAL_I2C_Init+0x18e>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1e58      	subs	r0, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	0099      	lsls	r1, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	fbb0 f3f3 	udiv	r3, r0, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x196>
 800163e:	2301      	movs	r3, #1
 8001640:	e022      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10e      	bne.n	8001668 <HAL_I2C_Init+0x1bc>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e58      	subs	r0, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	440b      	add	r3, r1
 8001658:	fbb0 f3f3 	udiv	r3, r0, r3
 800165c:	3301      	adds	r3, #1
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001666:	e00f      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	6809      	ldr	r1, [r1, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6911      	ldr	r1, [r2, #16]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68d2      	ldr	r2, [r2, #12]
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	000186a0 	.word	0x000186a0
 8001724:	001e847f 	.word	0x001e847f
 8001728:	003d08ff 	.word	0x003d08ff
 800172c:	431bde83 	.word	0x431bde83
 8001730:	10624dd3 	.word	0x10624dd3

08001734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e272      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8087 	beq.w	8001862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001760:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d112      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
 800176c:	4b8c      	ldr	r3, [pc, #560]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d10b      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d06c      	beq.n	8001860 <HAL_RCC_OscConfig+0x12c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d168      	bne.n	8001860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e24c      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x76>
 800179c:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a7f      	ldr	r2, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e02e      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0xbc>
 80017d6:	4b72      	ldr	r3, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a71      	ldr	r2, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017f0:	4b6b      	ldr	r3, [pc, #428]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6a      	ldr	r2, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff f978 	bl	8000b04 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff f974 	bl	8000b04 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e200      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xe4>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f964 	bl	8000b04 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff f960 	bl	8000b04 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1ec      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x10c>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c0      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4939      	ldr	r1, [pc, #228]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f919 	bl	8000b04 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff f915 	bl	8000b04 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a1      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4927      	ldr	r1, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff f8f8 	bl	8000b04 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff f8f4 	bl	8000b04 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e180      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03a      	beq.n	80019b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d019      	beq.n	800197e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff f8d8 	bl	8000b04 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff f8d4 	bl	8000b04 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e160      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fb00 	bl	8001f7c <RCC_Delay>
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f8be 	bl	8000b04 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198a:	e00f      	b.n	80019ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff f8ba 	bl	8000b04 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d908      	bls.n	80019ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e146      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	42420000 	.word	0x42420000
 80019a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e9      	bne.n	800198c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a6 	beq.w	8001b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b85      	ldr	r3, [pc, #532]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7e      	ldr	r2, [pc, #504]	; (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f87b 	bl	8000b04 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff f877 	bl	8000b04 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e103      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x312>
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	e02d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x334>
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a69      	ldr	r2, [pc, #420]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a66      	ldr	r2, [pc, #408]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	e01c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x356>
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a60      	ldr	r2, [pc, #384]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a5d      	ldr	r2, [pc, #372]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e00b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f82b 	bl	8000b04 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff f827 	bl	8000b04 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0b1      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ee      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x37e>
 8001ad4:	e014      	b.n	8001b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f815 	bl	8000b04 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff f811 	bl	8000b04 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e09b      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ee      	bne.n	8001ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8087 	beq.w	8001c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d061      	beq.n	8001bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d146      	bne.n	8001bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe ffe5 	bl	8000b04 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe ffe1 	bl	8000b04 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e06d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4921      	ldr	r1, [pc, #132]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a19      	ldr	r1, [r3, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe ffb5 	bl	8000b04 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe ffb1 	bl	8000b04 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46a>
 8001bbc:	e035      	b.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff9e 	bl	8000b04 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ff9a 	bl	8000b04 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e026      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x498>
 8001bea:	e01e      	b.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e019      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_OscConfig+0x500>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d0      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d910      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4965      	ldr	r1, [pc, #404]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0b8      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c94:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a58      	ldr	r2, [pc, #352]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cac:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	494d      	ldr	r1, [pc, #308]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d040      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e07f      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e073      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06b      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4936      	ldr	r1, [pc, #216]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d28:	f7fe feec 	bl	8000b04 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7fe fee8 	bl	8000b04 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e053      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d210      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4922      	ldr	r1, [pc, #136]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e032      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4916      	ldr	r1, [pc, #88]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	490e      	ldr	r1, [pc, #56]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc6:	f000 f821 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	490a      	ldr	r1, [pc, #40]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	5ccb      	ldrb	r3, [r1, r3]
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1cc>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x1d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fc9c 	bl	8000724 <HAL_InitTick>

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08003f5c 	.word	0x08003f5c
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x30>
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x36>
 8001e3a:	e027      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	e027      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0c9b      	lsrs	r3, r3, #18
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0c5b      	lsrs	r3, r3, #17
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e004      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	613b      	str	r3, [r7, #16]
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	693b      	ldr	r3, [r7, #16]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	08003f74 	.word	0x08003f74
 8001eac:	08003f84 	.word	0x08003f84
 8001eb0:	003d0900 	.word	0x003d0900
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff2 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08003f6c 	.word	0x08003f6c

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08003f6c 	.word	0x08003f6c

08001f1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0207 	and.w	r2, r3, #7
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40022000 	.word	0x40022000

08001f7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <RCC_Delay+0x34>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <RCC_Delay+0x38>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0a5b      	lsrs	r3, r3, #9
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f98:	bf00      	nop
  }
  while (Delay --);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	60fa      	str	r2, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f9      	bne.n	8001f98 <RCC_Delay+0x1c>
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	10624dd3 	.word	0x10624dd3

08001fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d07d      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10d      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b49      	ldr	r3, [pc, #292]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d118      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200c:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a42      	ldr	r2, [pc, #264]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002018:	f7fe fd74 	bl	8000b04 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	e008      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe fd70 	bl	8000b04 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e06d      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d02e      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d027      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002064:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002066:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800206c:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002072:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d014      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fd3f 	bl	8000b04 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fd3b 	bl	8000b04 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e036      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ee      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4917      	ldr	r1, [pc, #92]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	490b      	ldr	r1, [pc, #44]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	42420440 	.word	0x42420440

08002124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e041      	b.n	80021ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fbf2 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 fa74 	bl	8002650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d001      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e03a      	b.n	8002252 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_TIM_Base_Start_IT+0x98>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x58>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d009      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x58>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_TIM_Base_Start_IT+0x9c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x58>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_TIM_Base_Start_IT+0xa0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b06      	cmp	r3, #6
 800222c:	d010      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	e007      	b.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800

08002268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b02      	cmp	r3, #2
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0202 	mvn.w	r2, #2
 8002294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9b4 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f9a7 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f9b6 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0204 	mvn.w	r2, #4
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f98a 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f97d 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f98c 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0208 	mvn.w	r2, #8
 800233c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f960 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f953 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f962 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0210 	mvn.w	r2, #16
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2208      	movs	r2, #8
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f936 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f929 	bl	8002606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f938 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10e      	bne.n	80023ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0201 	mvn.w	r2, #1
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe f940 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d10e      	bne.n	8002418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d107      	bne.n	8002418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa7b 	bl	800290e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d10e      	bne.n	8002444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d107      	bne.n	8002444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800243c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f8fc 	bl	800263c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b20      	cmp	r3, #32
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d107      	bne.n	8002470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0220 	mvn.w	r2, #32
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa46 	bl	80028fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x1c>
 8002490:	2302      	movs	r3, #2
 8002492:	e0b4      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x186>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024cc:	d03e      	beq.n	800254c <HAL_TIM_ConfigClockSource+0xd4>
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	f200 8087 	bhi.w	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	f000 8086 	beq.w	80025ea <HAL_TIM_ConfigClockSource+0x172>
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d87f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d01a      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xa6>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d87b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d050      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x11a>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d877      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d03c      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0xfa>
 80024f8:	2b50      	cmp	r3, #80	; 0x50
 80024fa:	d873      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d058      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d86f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d064      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002508:	2b30      	cmp	r3, #48	; 0x30
 800250a:	d86b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d060      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d867      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002518:	2b10      	cmp	r3, #16
 800251a:	d05a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x15a>
 800251c:	e062      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800252e:	f000 f968 	bl	8002802 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	609a      	str	r2, [r3, #8]
      break;
 800254a:	e04f      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	f000 f951 	bl	8002802 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256e:	609a      	str	r2, [r3, #8]
      break;
 8002570:	e03c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f8c8 	bl	8002714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2150      	movs	r1, #80	; 0x50
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f91f 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 8002590:	e02c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f8e6 	bl	8002770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2160      	movs	r1, #96	; 0x60
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f90f 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 80025b0:	e01c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f8a8 	bl	8002714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f8ff 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 80025d0:	e00c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f000 f8f6 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 80025e2:	e003      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e000      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
	...

08002650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a29      	ldr	r2, [pc, #164]	; (8002708 <TIM_Base_SetConfig+0xb8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <TIM_Base_SetConfig+0x30>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d007      	beq.n	8002680 <TIM_Base_SetConfig+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a26      	ldr	r2, [pc, #152]	; (800270c <TIM_Base_SetConfig+0xbc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0x30>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a25      	ldr	r2, [pc, #148]	; (8002710 <TIM_Base_SetConfig+0xc0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d108      	bne.n	8002692 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <TIM_Base_SetConfig+0xb8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_Base_SetConfig+0x62>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d007      	beq.n	80026b2 <TIM_Base_SetConfig+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a19      	ldr	r2, [pc, #100]	; (800270c <TIM_Base_SetConfig+0xbc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_Base_SetConfig+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <TIM_Base_SetConfig+0xc0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <TIM_Base_SetConfig+0xb8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	615a      	str	r2, [r3, #20]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800

08002714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f023 0201 	bic.w	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f023 030a 	bic.w	r3, r3, #10
 8002750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800279a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	031b      	lsls	r3, r3, #12
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	621a      	str	r2, [r3, #32]
}
 80027c4:	bf00      	nop
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f043 0307 	orr.w	r3, r3, #7
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800281c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	021a      	lsls	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	431a      	orrs	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4313      	orrs	r3, r2
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	609a      	str	r2, [r3, #8]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e046      	b.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d009      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800

080028fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e042      	b.n	80029b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f844 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f82b 	bl	80029c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029fa:	f023 030c 	bic.w	r3, r3, #12
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2c      	ldr	r2, [pc, #176]	; (8002ad4 <UART_SetConfig+0x114>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d103      	bne.n	8002a30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a28:	f7ff fa64 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	e002      	b.n	8002a36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff fa4c 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002a34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009a      	lsls	r2, r3, #2
 8002a40:	441a      	add	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <UART_SetConfig+0x118>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	0119      	lsls	r1, r3, #4
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009a      	lsls	r2, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <UART_SetConfig+0x118>)
 8002a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2064      	movs	r0, #100	; 0x64
 8002a76:	fb00 f303 	mul.w	r3, r0, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	3332      	adds	r3, #50	; 0x32
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <UART_SetConfig+0x118>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8c:	4419      	add	r1, r3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <UART_SetConfig+0x118>)
 8002aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 020f 	and.w	r2, r3, #15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	440a      	add	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	51eb851f 	.word	0x51eb851f

08002adc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aee:	2b84      	cmp	r3, #132	; 0x84
 8002af0:	d005      	beq.n	8002afe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	3303      	adds	r3, #3
 8002afc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b0e:	f000 fad1 	bl	80030b4 <vTaskStartScheduler>
  
  return osOK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af04      	add	r7, sp, #16
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <osThreadCreate+0x54>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01c      	beq.n	8002b6c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685c      	ldr	r4, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691e      	ldr	r6, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ffc9 	bl	8002adc <makeFreeRtosPriority>
 8002b4a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	9100      	str	r1, [sp, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	4632      	mov	r2, r6
 8002b5e:	4629      	mov	r1, r5
 8002b60:	4620      	mov	r0, r4
 8002b62:	f000 f8e8 	bl	8002d36 <xTaskCreateStatic>
 8002b66:	4603      	mov	r3, r0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e01c      	b.n	8002ba6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685c      	ldr	r4, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b78:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ffab 	bl	8002adc <makeFreeRtosPriority>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	9200      	str	r2, [sp, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4632      	mov	r2, r6
 8002b94:	4629      	mov	r1, r5
 8002b96:	4620      	mov	r0, r4
 8002b98:	f000 f929 	bl	8002dee <xTaskCreate>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <osDelay+0x16>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	e000      	b.n	8002bc8 <osDelay+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fa3f 	bl	800304c <vTaskDelay>
  
  return osOK;
 8002bce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0208 	add.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f103 0208 	add.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 0208 	add.w	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d103      	bne.n	8002c94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e00c      	b.n	8002cae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3308      	adds	r3, #8
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e002      	b.n	8002ca2 <vListInsert+0x2e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d2f6      	bcs.n	8002c9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6892      	ldr	r2, [r2, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6852      	ldr	r2, [r2, #4]
 8002d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d103      	bne.n	8002d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b08e      	sub	sp, #56	; 0x38
 8002d3a:	af04      	add	r7, sp, #16
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <xTaskCreateStatic+0x46>
	__asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	61fb      	str	r3, [r7, #28]
}
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d7c:	2354      	movs	r3, #84	; 0x54
 8002d7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b54      	cmp	r3, #84	; 0x54
 8002d84:	d00a      	beq.n	8002d9c <xTaskCreateStatic+0x66>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	61bb      	str	r3, [r7, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01e      	beq.n	8002de0 <xTaskCreateStatic+0xaa>
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01b      	beq.n	8002de0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f850 	bl	8002e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dda:	f000 f8cd 	bl	8002f78 <prvAddNewTaskToReadyList>
 8002dde:	e001      	b.n	8002de4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002de4:	697b      	ldr	r3, [r7, #20]
	}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08c      	sub	sp, #48	; 0x30
 8002df2:	af04      	add	r7, sp, #16
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fe6c 	bl	8003ae0 <pvPortMalloc>
 8002e08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e10:	2054      	movs	r0, #84	; 0x54
 8002e12:	f000 fe65 	bl	8003ae0 <pvPortMalloc>
 8002e16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
 8002e24:	e005      	b.n	8002e32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f000 ff1e 	bl	8003c68 <vPortFree>
 8002e2c:	e001      	b.n	8002e32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d017      	beq.n	8002e68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9303      	str	r3, [sp, #12]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	9302      	str	r3, [sp, #8]
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f80e 	bl	8002e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e5c:	69f8      	ldr	r0, [r7, #28]
 8002e5e:	f000 f88b 	bl	8002f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e002      	b.n	8002e6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
	}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	3b01      	subs	r3, #1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f023 0307 	bic.w	r3, r3, #7
 8002e9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	617b      	str	r3, [r7, #20]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e012      	b.n	8002eec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	7819      	ldrb	r1, [r3, #0]
 8002ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3334      	adds	r3, #52	; 0x34
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d9e9      	bls.n	8002ec6 <prvInitialiseNewTask+0x4e>
 8002ef2:	e000      	b.n	8002ef6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002ef4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d901      	bls.n	8002f08 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f04:	2306      	movs	r3, #6
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	2200      	movs	r2, #0
 8002f18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fe79 	bl	8002c16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	3318      	adds	r3, #24
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fe74 	bl	8002c16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	f1c3 0207 	rsb	r2, r3, #7
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	2200      	movs	r2, #0
 8002f48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	69b8      	ldr	r0, [r7, #24]
 8002f58:	f000 fc0e 	bl	8003778 <pxPortInitialiseStack>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f6e:	bf00      	nop
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f80:	f000 fcec 	bl	800395c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <prvAddNewTaskToReadyList+0xb8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a29      	ldr	r2, [pc, #164]	; (8003030 <prvAddNewTaskToReadyList+0xb8>)
 8002f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <prvAddNewTaskToReadyList+0xbc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f96:	4a27      	ldr	r2, [pc, #156]	; (8003034 <prvAddNewTaskToReadyList+0xbc>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <prvAddNewTaskToReadyList+0xb8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d110      	bne.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fa4:	f000 fac0 	bl	8003528 <prvInitialiseTaskLists>
 8002fa8:	e00d      	b.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <prvAddNewTaskToReadyList+0xc0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <prvAddNewTaskToReadyList+0xbc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d802      	bhi.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <prvAddNewTaskToReadyList+0xbc>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <prvAddNewTaskToReadyList+0xc4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <prvAddNewTaskToReadyList+0xc4>)
 8002fce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <prvAddNewTaskToReadyList+0xcc>)
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7ff fe18 	bl	8002c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ffe:	f000 fcdd 	bl	80039bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <prvAddNewTaskToReadyList+0xc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <prvAddNewTaskToReadyList+0xbc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <prvAddNewTaskToReadyList+0xd0>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200004e8 	.word	0x200004e8
 8003034:	200003e8 	.word	0x200003e8
 8003038:	200004f4 	.word	0x200004f4
 800303c:	20000504 	.word	0x20000504
 8003040:	200004f0 	.word	0x200004f0
 8003044:	200003ec 	.word	0x200003ec
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d017      	beq.n	800308e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <vTaskDelay+0x60>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <vTaskDelay+0x30>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	60bb      	str	r3, [r7, #8]
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800307c:	f000 f87a 	bl	8003174 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003080:	2100      	movs	r1, #0
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fb12 	bl	80036ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003088:	f000 f882 	bl	8003190 <xTaskResumeAll>
 800308c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <vTaskDelay+0x64>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000510 	.word	0x20000510
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030c2:	463a      	mov	r2, r7
 80030c4:	1d39      	adds	r1, r7, #4
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd f8ba 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	9202      	str	r2, [sp, #8]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	460a      	mov	r2, r1
 80030e2:	491e      	ldr	r1, [pc, #120]	; (800315c <vTaskStartScheduler+0xa8>)
 80030e4:	481e      	ldr	r0, [pc, #120]	; (8003160 <vTaskStartScheduler+0xac>)
 80030e6:	f7ff fe26 	bl	8002d36 <xTaskCreateStatic>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <vTaskStartScheduler+0xb0>)
 80030ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <vTaskStartScheduler+0xb0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030f8:	2301      	movs	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e001      	b.n	8003102 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d116      	bne.n	8003136 <vTaskStartScheduler+0x82>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	613b      	str	r3, [r7, #16]
}
 800311a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <vTaskStartScheduler+0xb4>)
 800311e:	f04f 32ff 	mov.w	r2, #4294967295
 8003122:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <vTaskStartScheduler+0xb8>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <vTaskStartScheduler+0xbc>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003130:	f000 fba2 	bl	8003878 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003134:	e00e      	b.n	8003154 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d10a      	bne.n	8003154 <vTaskStartScheduler+0xa0>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	60fb      	str	r3, [r7, #12]
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <vTaskStartScheduler+0x9e>
}
 8003154:	bf00      	nop
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	08003f54 	.word	0x08003f54
 8003160:	080034f9 	.word	0x080034f9
 8003164:	2000050c 	.word	0x2000050c
 8003168:	20000508 	.word	0x20000508
 800316c:	200004f4 	.word	0x200004f4
 8003170:	200004ec 	.word	0x200004ec

08003174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <vTaskSuspendAll+0x18>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a03      	ldr	r2, [pc, #12]	; (800318c <vTaskSuspendAll+0x18>)
 8003180:	6013      	str	r3, [r2, #0]
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000510 	.word	0x20000510

08003190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <xTaskResumeAll+0x114>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <xTaskResumeAll+0x2c>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	603b      	str	r3, [r7, #0]
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031bc:	f000 fbce 	bl	800395c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031c0:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <xTaskResumeAll+0x114>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <xTaskResumeAll+0x114>)
 80031c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ca:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <xTaskResumeAll+0x114>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d161      	bne.n	8003296 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031d2:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <xTaskResumeAll+0x118>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d05d      	beq.n	8003296 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031da:	e02e      	b.n	800323a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031dc:	4b33      	ldr	r3, [pc, #204]	; (80032ac <xTaskResumeAll+0x11c>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3318      	adds	r3, #24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd7b 	bl	8002ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd76 	bl	8002ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	2201      	movs	r2, #1
 80031fe:	409a      	lsls	r2, r3
 8003200:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <xTaskResumeAll+0x120>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4313      	orrs	r3, r2
 8003206:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <xTaskResumeAll+0x120>)
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <xTaskResumeAll+0x124>)
 8003218:	441a      	add	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3304      	adds	r3, #4
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7ff fd04 	bl	8002c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <xTaskResumeAll+0x128>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003234:	4b21      	ldr	r3, [pc, #132]	; (80032bc <xTaskResumeAll+0x12c>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <xTaskResumeAll+0x11c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1cc      	bne.n	80031dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003248:	f000 fa0c 	bl	8003664 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800324c:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <xTaskResumeAll+0x130>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003258:	f000 f836 	bl	80032c8 <xTaskIncrementTick>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <xTaskResumeAll+0x12c>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f1      	bne.n	8003258 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <xTaskResumeAll+0x130>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <xTaskResumeAll+0x12c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003282:	2301      	movs	r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <xTaskResumeAll+0x134>)
 8003288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003296:	f000 fb91 	bl	80039bc <vPortExitCritical>

	return xAlreadyYielded;
 800329a:	68bb      	ldr	r3, [r7, #8]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000510 	.word	0x20000510
 80032a8:	200004e8 	.word	0x200004e8
 80032ac:	200004a8 	.word	0x200004a8
 80032b0:	200004f0 	.word	0x200004f0
 80032b4:	200003ec 	.word	0x200003ec
 80032b8:	200003e8 	.word	0x200003e8
 80032bc:	200004fc 	.word	0x200004fc
 80032c0:	200004f8 	.word	0x200004f8
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d2:	4b51      	ldr	r3, [pc, #324]	; (8003418 <xTaskIncrementTick+0x150>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 808d 	bne.w	80033f6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <xTaskIncrementTick+0x154>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032e4:	4a4d      	ldr	r2, [pc, #308]	; (800341c <xTaskIncrementTick+0x154>)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d120      	bne.n	8003332 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032f0:	4b4b      	ldr	r3, [pc, #300]	; (8003420 <xTaskIncrementTick+0x158>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <xTaskIncrementTick+0x48>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	603b      	str	r3, [r7, #0]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <xTaskIncrementTick+0x46>
 8003310:	4b43      	ldr	r3, [pc, #268]	; (8003420 <xTaskIncrementTick+0x158>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <xTaskIncrementTick+0x15c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a41      	ldr	r2, [pc, #260]	; (8003420 <xTaskIncrementTick+0x158>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4a41      	ldr	r2, [pc, #260]	; (8003424 <xTaskIncrementTick+0x15c>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <xTaskIncrementTick+0x160>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	4a3f      	ldr	r2, [pc, #252]	; (8003428 <xTaskIncrementTick+0x160>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	f000 f999 	bl	8003664 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <xTaskIncrementTick+0x164>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d34d      	bcc.n	80033d8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <xTaskIncrementTick+0x158>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <xTaskIncrementTick+0x82>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <xTaskIncrementTick+0x84>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003350:	4b36      	ldr	r3, [pc, #216]	; (800342c <xTaskIncrementTick+0x164>)
 8003352:	f04f 32ff 	mov.w	r2, #4294967295
 8003356:	601a      	str	r2, [r3, #0]
					break;
 8003358:	e03e      	b.n	80033d8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <xTaskIncrementTick+0x158>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d203      	bcs.n	800337a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003372:	4a2e      	ldr	r2, [pc, #184]	; (800342c <xTaskIncrementTick+0x164>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6013      	str	r3, [r2, #0]
						break;
 8003378:	e02e      	b.n	80033d8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3304      	adds	r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fcb0 	bl	8002ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	3318      	adds	r3, #24
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fca7 	bl	8002ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <xTaskIncrementTick+0x168>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <xTaskIncrementTick+0x168>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <xTaskIncrementTick+0x16c>)
 80033b6:	441a      	add	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff fc35 	bl	8002c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <xTaskIncrementTick+0x170>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d3b4      	bcc.n	800333c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d6:	e7b1      	b.n	800333c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <xTaskIncrementTick+0x170>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033de:	4915      	ldr	r1, [pc, #84]	; (8003434 <xTaskIncrementTick+0x16c>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d907      	bls.n	8003400 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e004      	b.n	8003400 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <xTaskIncrementTick+0x174>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <xTaskIncrementTick+0x174>)
 80033fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <xTaskIncrementTick+0x178>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800340c:	697b      	ldr	r3, [r7, #20]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000510 	.word	0x20000510
 800341c:	200004ec 	.word	0x200004ec
 8003420:	200004a0 	.word	0x200004a0
 8003424:	200004a4 	.word	0x200004a4
 8003428:	20000500 	.word	0x20000500
 800342c:	20000508 	.word	0x20000508
 8003430:	200004f0 	.word	0x200004f0
 8003434:	200003ec 	.word	0x200003ec
 8003438:	200003e8 	.word	0x200003e8
 800343c:	200004f8 	.word	0x200004f8
 8003440:	200004fc 	.word	0x200004fc

08003444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <vTaskSwitchContext+0xa0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003452:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <vTaskSwitchContext+0xa4>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003458:	e03f      	b.n	80034da <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <vTaskSwitchContext+0xa4>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003460:	4b22      	ldr	r3, [pc, #136]	; (80034ec <vTaskSwitchContext+0xa8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800346e:	7afb      	ldrb	r3, [r7, #11]
 8003470:	f1c3 031f 	rsb	r3, r3, #31
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	491e      	ldr	r1, [pc, #120]	; (80034f0 <vTaskSwitchContext+0xac>)
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	607b      	str	r3, [r7, #4]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vTaskSwitchContext+0x5a>
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <vTaskSwitchContext+0xac>)
 80034ac:	4413      	add	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3308      	adds	r3, #8
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d104      	bne.n	80034d0 <vTaskSwitchContext+0x8c>
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <vTaskSwitchContext+0xb0>)
 80034d8:	6013      	str	r3, [r2, #0]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000510 	.word	0x20000510
 80034e8:	200004fc 	.word	0x200004fc
 80034ec:	200004f0 	.word	0x200004f0
 80034f0:	200003ec 	.word	0x200003ec
 80034f4:	200003e8 	.word	0x200003e8

080034f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003500:	f000 f852 	bl	80035a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <prvIdleTask+0x28>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d9f9      	bls.n	8003500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <prvIdleTask+0x2c>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800351c:	e7f0      	b.n	8003500 <prvIdleTask+0x8>
 800351e:	bf00      	nop
 8003520:	200003ec 	.word	0x200003ec
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e00c      	b.n	800354e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <prvInitialiseTaskLists+0x60>)
 8003540:	4413      	add	r3, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fb48 	bl	8002bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3301      	adds	r3, #1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d9ef      	bls.n	8003534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <prvInitialiseTaskLists+0x64>)
 8003556:	f7ff fb3f 	bl	8002bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800355a:	480d      	ldr	r0, [pc, #52]	; (8003590 <prvInitialiseTaskLists+0x68>)
 800355c:	f7ff fb3c 	bl	8002bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <prvInitialiseTaskLists+0x6c>)
 8003562:	f7ff fb39 	bl	8002bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003566:	480c      	ldr	r0, [pc, #48]	; (8003598 <prvInitialiseTaskLists+0x70>)
 8003568:	f7ff fb36 	bl	8002bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800356c:	480b      	ldr	r0, [pc, #44]	; (800359c <prvInitialiseTaskLists+0x74>)
 800356e:	f7ff fb33 	bl	8002bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <prvInitialiseTaskLists+0x78>)
 8003574:	4a05      	ldr	r2, [pc, #20]	; (800358c <prvInitialiseTaskLists+0x64>)
 8003576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <prvInitialiseTaskLists+0x7c>)
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <prvInitialiseTaskLists+0x68>)
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200003ec 	.word	0x200003ec
 800358c:	20000478 	.word	0x20000478
 8003590:	2000048c 	.word	0x2000048c
 8003594:	200004a8 	.word	0x200004a8
 8003598:	200004bc 	.word	0x200004bc
 800359c:	200004d4 	.word	0x200004d4
 80035a0:	200004a0 	.word	0x200004a0
 80035a4:	200004a4 	.word	0x200004a4

080035a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ae:	e019      	b.n	80035e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035b0:	f000 f9d4 	bl	800395c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <prvCheckTasksWaitingTermination+0x50>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fb8f 	bl	8002ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <prvCheckTasksWaitingTermination+0x54>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <prvCheckTasksWaitingTermination+0x54>)
 80035ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035da:	f000 f9ef 	bl	80039bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f810 	bl	8003604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e1      	bne.n	80035b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200004bc 	.word	0x200004bc
 80035fc:	200004e8 	.word	0x200004e8
 8003600:	200004d0 	.word	0x200004d0

08003604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003612:	2b00      	cmp	r3, #0
 8003614:	d108      	bne.n	8003628 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fb24 	bl	8003c68 <vPortFree>
				vPortFree( pxTCB );
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb21 	bl	8003c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003626:	e018      	b.n	800365a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800362e:	2b01      	cmp	r3, #1
 8003630:	d103      	bne.n	800363a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fb18 	bl	8003c68 <vPortFree>
	}
 8003638:	e00f      	b.n	800365a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003640:	2b02      	cmp	r3, #2
 8003642:	d00a      	beq.n	800365a <prvDeleteTCB+0x56>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	60fb      	str	r3, [r7, #12]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <prvDeleteTCB+0x54>
	}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <prvResetNextTaskUnblockTime+0x40>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <prvResetNextTaskUnblockTime+0x14>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <prvResetNextTaskUnblockTime+0x16>
 8003678:	2300      	movs	r3, #0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <prvResetNextTaskUnblockTime+0x44>)
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003686:	e008      	b.n	800369a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <prvResetNextTaskUnblockTime+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <prvResetNextTaskUnblockTime+0x44>)
 8003698:	6013      	str	r3, [r2, #0]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	200004a0 	.word	0x200004a0
 80036a8:	20000508 	.word	0x20000508

080036ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <prvAddCurrentTaskToDelayedList+0xb0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fb0e 	bl	8002ce4 <uxListRemove>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2201      	movs	r2, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4013      	ands	r3, r2
 80036e2:	4a20      	ldr	r2, [pc, #128]	; (8003764 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d10a      	bne.n	8003704 <prvAddCurrentTaskToDelayedList+0x58>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	481a      	ldr	r0, [pc, #104]	; (8003768 <prvAddCurrentTaskToDelayedList+0xbc>)
 80036fe:	f7ff fa96 	bl	8002c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003702:	e026      	b.n	8003752 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <prvAddCurrentTaskToDelayedList+0xb4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d209      	bcs.n	8003730 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <prvAddCurrentTaskToDelayedList+0xc0>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7ff faa3 	bl	8002c74 <vListInsert>
}
 800372e:	e010      	b.n	8003752 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f7ff fa99 	bl	8002c74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d202      	bcs.n	8003752 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800374c:	4a09      	ldr	r2, [pc, #36]	; (8003774 <prvAddCurrentTaskToDelayedList+0xc8>)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200004ec 	.word	0x200004ec
 8003760:	200003e8 	.word	0x200003e8
 8003764:	200004f0 	.word	0x200004f0
 8003768:	200004d4 	.word	0x200004d4
 800376c:	200004a4 	.word	0x200004a4
 8003770:	200004a0 	.word	0x200004a0
 8003774:	20000508 	.word	0x20000508

08003778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3b04      	subs	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b04      	subs	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3b04      	subs	r3, #4
 80037a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <pxPortInitialiseStack+0x54>)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3b14      	subs	r3, #20
 80037b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b20      	subs	r3, #32
 80037be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	080037d1 	.word	0x080037d1

080037d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <prvTaskExitError+0x54>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d00a      	beq.n	80037fa <prvTaskExitError+0x2a>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60fb      	str	r3, [r7, #12]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <prvTaskExitError+0x28>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
}
 800380c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800380e:	bf00      	nop
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0fc      	beq.n	8003810 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000000c 	.word	0x2000000c
	...

08003830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <pxCurrentTCBConst2>)
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	6808      	ldr	r0, [r1, #0]
 8003836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800383a:	f380 8809 	msr	PSP, r0
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8811 	msr	BASEPRI, r0
 800384a:	f04e 0e0d 	orr.w	lr, lr, #13
 800384e:	4770      	bx	lr

08003850 <pxCurrentTCBConst2>:
 8003850:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop

08003858 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003858:	4806      	ldr	r0, [pc, #24]	; (8003874 <prvPortStartFirstTask+0x1c>)
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	6800      	ldr	r0, [r0, #0]
 800385e:	f380 8808 	msr	MSP, r0
 8003862:	b662      	cpsie	i
 8003864:	b661      	cpsie	f
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	df00      	svc	0
 8003870:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003872:	bf00      	nop
 8003874:	e000ed08 	.word	0xe000ed08

08003878 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800387e:	4b32      	ldr	r3, [pc, #200]	; (8003948 <xPortStartScheduler+0xd0>)
 8003880:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <xPortStartScheduler+0xd4>)
 80038a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <xPortStartScheduler+0xd8>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038ac:	e009      	b.n	80038c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80038ae:	4b28      	ldr	r3, [pc, #160]	; (8003950 <xPortStartScheduler+0xd8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <xPortStartScheduler+0xd8>)
 80038b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d0ef      	beq.n	80038ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <xPortStartScheduler+0xd8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1c3 0307 	rsb	r3, r3, #7
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d00a      	beq.n	80038f0 <xPortStartScheduler+0x78>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60bb      	str	r3, [r7, #8]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038f0:	4b17      	ldr	r3, [pc, #92]	; (8003950 <xPortStartScheduler+0xd8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	4a16      	ldr	r2, [pc, #88]	; (8003950 <xPortStartScheduler+0xd8>)
 80038f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <xPortStartScheduler+0xd8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <xPortStartScheduler+0xd8>)
 8003904:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <xPortStartScheduler+0xdc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a10      	ldr	r2, [pc, #64]	; (8003954 <xPortStartScheduler+0xdc>)
 8003914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <xPortStartScheduler+0xdc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <xPortStartScheduler+0xdc>)
 8003920:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003924:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003926:	f000 f8b9 	bl	8003a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <xPortStartScheduler+0xe0>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003930:	f7ff ff92 	bl	8003858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003934:	f7ff fd86 	bl	8003444 <vTaskSwitchContext>
	prvTaskExitError();
 8003938:	f7ff ff4a 	bl	80037d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e400 	.word	0xe000e400
 800394c:	20000514 	.word	0x20000514
 8003950:	20000518 	.word	0x20000518
 8003954:	e000ed20 	.word	0xe000ed20
 8003958:	2000000c 	.word	0x2000000c

0800395c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	607b      	str	r3, [r7, #4]
}
 8003974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003976:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <vPortEnterCritical+0x58>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <vPortEnterCritical+0x58>)
 800397e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <vPortEnterCritical+0x58>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10f      	bne.n	80039a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <vPortEnterCritical+0x5c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	603b      	str	r3, [r7, #0]
}
 80039a4:	bf00      	nop
 80039a6:	e7fe      	b.n	80039a6 <vPortEnterCritical+0x4a>
	}
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	2000000c 	.word	0x2000000c
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <vPortExitCritical+0x4c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <vPortExitCritical+0x24>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	607b      	str	r3, [r7, #4]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <vPortExitCritical+0x4c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <vPortExitCritical+0x4c>)
 80039e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <vPortExitCritical+0x4c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <vPortExitCritical+0x42>
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	2000000c 	.word	0x2000000c
 8003a0c:	00000000 	.word	0x00000000

08003a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a10:	f3ef 8009 	mrs	r0, PSP
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <pxCurrentTCBConst>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a20:	6010      	str	r0, [r2, #0]
 8003a22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a2a:	f380 8811 	msr	BASEPRI, r0
 8003a2e:	f7ff fd09 	bl	8003444 <vTaskSwitchContext>
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f380 8811 	msr	BASEPRI, r0
 8003a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	6808      	ldr	r0, [r1, #0]
 8003a42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a46:	f380 8809 	msr	PSP, r0
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	4770      	bx	lr

08003a50 <pxCurrentTCBConst>:
 8003a50:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop

08003a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	607b      	str	r3, [r7, #4]
}
 8003a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a72:	f7ff fc29 	bl	80032c8 <xTaskIncrementTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <SysTick_Handler+0x40>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f383 8811 	msr	BASEPRI, r3
}
 8003a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <vPortSetupTimerInterrupt+0x30>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <vPortSetupTimerInterrupt+0x34>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <vPortSetupTimerInterrupt+0x38>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <vPortSetupTimerInterrupt+0x3c>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	4a08      	ldr	r2, [pc, #32]	; (8003adc <vPortSetupTimerInterrupt+0x40>)
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003abe:	4b03      	ldr	r3, [pc, #12]	; (8003acc <vPortSetupTimerInterrupt+0x30>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	e000e010 	.word	0xe000e010
 8003ad0:	e000e018 	.word	0xe000e018
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	10624dd3 	.word	0x10624dd3
 8003adc:	e000e014 	.word	0xe000e014

08003ae0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003aec:	f7ff fb42 	bl	8003174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003af0:	4b58      	ldr	r3, [pc, #352]	; (8003c54 <pvPortMalloc+0x174>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003af8:	f000 f910 	bl	8003d1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003afc:	4b56      	ldr	r3, [pc, #344]	; (8003c58 <pvPortMalloc+0x178>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 808e 	bne.w	8003c26 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01d      	beq.n	8003b4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b10:	2208      	movs	r2, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d014      	beq.n	8003b4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	3308      	adds	r3, #8
 8003b2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <pvPortMalloc+0x6c>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	617b      	str	r3, [r7, #20]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d069      	beq.n	8003c26 <pvPortMalloc+0x146>
 8003b52:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <pvPortMalloc+0x17c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d864      	bhi.n	8003c26 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <pvPortMalloc+0x180>)
 8003b5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <pvPortMalloc+0x180>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b66:	e004      	b.n	8003b72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d903      	bls.n	8003b84 <pvPortMalloc+0xa4>
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f1      	bne.n	8003b68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b84:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <pvPortMalloc+0x174>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d04b      	beq.n	8003c26 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2208      	movs	r2, #8
 8003b94:	4413      	add	r3, r2
 8003b96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad2      	subs	r2, r2, r3
 8003ba8:	2308      	movs	r3, #8
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d91f      	bls.n	8003bf0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <pvPortMalloc+0xf8>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	613b      	str	r3, [r7, #16]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bea:	69b8      	ldr	r0, [r7, #24]
 8003bec:	f000 f8f8 	bl	8003de0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <pvPortMalloc+0x17c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <pvPortMalloc+0x17c>)
 8003bfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bfe:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <pvPortMalloc+0x17c>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <pvPortMalloc+0x184>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d203      	bcs.n	8003c12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <pvPortMalloc+0x17c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <pvPortMalloc+0x184>)
 8003c10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <pvPortMalloc+0x178>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c26:	f7ff fab3 	bl	8003190 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <pvPortMalloc+0x16a>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60fb      	str	r3, [r7, #12]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <pvPortMalloc+0x168>
	return pvReturn;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20001124 	.word	0x20001124
 8003c58:	20001130 	.word	0x20001130
 8003c5c:	20001128 	.word	0x20001128
 8003c60:	2000111c 	.word	0x2000111c
 8003c64:	2000112c 	.word	0x2000112c

08003c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d048      	beq.n	8003d0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <vPortFree+0xac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <vPortFree+0x44>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60fb      	str	r3, [r7, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <vPortFree+0x62>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	60bb      	str	r3, [r7, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <vPortFree+0xac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d019      	beq.n	8003d0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d115      	bne.n	8003d0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <vPortFree+0xac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	401a      	ands	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cf0:	f7ff fa40 	bl	8003174 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <vPortFree+0xb0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a06      	ldr	r2, [pc, #24]	; (8003d18 <vPortFree+0xb0>)
 8003d00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d02:	6938      	ldr	r0, [r7, #16]
 8003d04:	f000 f86c 	bl	8003de0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d08:	f7ff fa42 	bl	8003190 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d0c:	bf00      	nop
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20001130 	.word	0x20001130
 8003d18:	20001128 	.word	0x20001128

08003d1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d28:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <prvHeapInit+0xac>)
 8003d2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3307      	adds	r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <prvHeapInit+0xac>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <prvHeapInit+0xb0>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <prvHeapInit+0xb0>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d68:	2208      	movs	r2, #8
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <prvHeapInit+0xb8>)
 8003daa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <prvHeapInit+0xbc>)
 8003db2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <prvHeapInit+0xc0>)
 8003db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000051c 	.word	0x2000051c
 8003dcc:	2000111c 	.word	0x2000111c
 8003dd0:	20001124 	.word	0x20001124
 8003dd4:	2000112c 	.word	0x2000112c
 8003dd8:	20001128 	.word	0x20001128
 8003ddc:	20001130 	.word	0x20001130

08003de0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <prvInsertBlockIntoFreeList+0xa8>)
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e002      	b.n	8003df4 <prvInsertBlockIntoFreeList+0x14>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d8f7      	bhi.n	8003dee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4413      	add	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d108      	bne.n	8003e22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d118      	bne.n	8003e68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <prvInsertBlockIntoFreeList+0xac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d00d      	beq.n	8003e5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e008      	b.n	8003e70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <prvInsertBlockIntoFreeList+0xac>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e003      	b.n	8003e70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d002      	beq.n	8003e7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	2000111c 	.word	0x2000111c
 8003e8c:	20001124 	.word	0x20001124

08003e90 <memset>:
 8003e90:	4603      	mov	r3, r0
 8003e92:	4402      	add	r2, r0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d100      	bne.n	8003e9a <memset+0xa>
 8003e98:	4770      	bx	lr
 8003e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9e:	e7f9      	b.n	8003e94 <memset+0x4>

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	4d0c      	ldr	r5, [pc, #48]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea6:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea8:	1b64      	subs	r4, r4, r5
 8003eaa:	10a4      	asrs	r4, r4, #2
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	f000 f81a 	bl	8003ee8 <_init>
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	4d0a      	ldr	r5, [pc, #40]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ee4 <__libc_init_array+0x44>)
 8003eba:	1b64      	subs	r4, r4, r5
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08003f88 	.word	0x08003f88
 8003edc:	08003f88 	.word	0x08003f88
 8003ee0:	08003f88 	.word	0x08003f88
 8003ee4:	08003f8c 	.word	0x08003f8c

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
